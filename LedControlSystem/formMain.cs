using HelloRemoting;
using LedControlSystem.Cloud;
using LedControlSystem.Fonts;
using LedControlSystem.Properties;
using LedModel;
using LedModel.Cloud;
using LedModel.Const;
using LedModel.Content;
using LedModel.Enum;
using LedModel.Foundation;
using LedModel.Share;
using LedResources;
using LedService.Cloud.Account;
using LedService.Cloud.Group;
using LedService.Cloud.Terminal;
using LedService.Const;
using LedService.Weather;
using Microsoft.Win32;
using OfficeTool.Excel;
using server_interface;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Globalization;
using System.IO;
using System.IO.Ports;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using ZHUI;

namespace LedControlSystem.LedControlSystem
{
	public class formMain : Form
	{
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto, Pack = 8)]
		private struct TVITEM
		{
			public int mask;

			public IntPtr hItem;

			public int state;

			public int stateMask;

			[MarshalAs(UnmanagedType.LPTStr)]
			public string lpszText;

			public int cchTextMax;

			public int iImage;

			public int iSelectedImage;

			public int cChildren;

			public IntPtr lParam;
		}

		private const int TVIF_STATE = 8;

		private const int TVIS_STATEIMAGEMASK = 61440;

		private const int TV_FIRST = 4352;

		private const int TVM_SETITEM = 4415;

		public const int WM_SYSCOMMAND = 274;

		public const int SC_MOVE = 61456;

		public const int HTCAPTION = 2;

		public const int WMSZ_LEFT = 61441;

		public const int WMSZ_RIGHT = 61442;

		public const int WMSZ_TOP = 61443;

		public const int WMSZ_TOPLEFT = 61444;

		public const int WMSZ_TOPRIGHT = 61445;

		public const int WMSZ_BOTTOM = 61446;

		public const int WMSZ_BOTTOMLEFT = 61447;

		public const int WMSZ_BOTTOMRIGHT = 61448;

		public static UpdateWeatherProvinceEvent updateWeatherProvinceEvent;

		public static bool isGreen = false;

		public static bool IsforeignTradeMode = Program.IsforeignTradeMode;

		public static bool stringSubareaEnabled = true;

		public static string ledVersion = formMain.IsforeignTradeMode ? "V5.1.1.16" : "V6.1.1.89";

		public static string ledTitle = "LED Control System";

		public static string ledTitleVersion = formMain.IsforeignTradeMode ? "V5" : "V6";

		public static string DefalutForeignTradeFamilyName = "Tahoma";

		public static string LanguageChineseSimplified = "zh_CN";

		public static string LanguageChineseTraditional = "zh_CN";

		public static string LanguageEnglish = "en";

		public bool isUpdataCode;

		public bool isDownloadStringLibrary;

		public static string GprsServer = "http://server1.zhonghang-gprs.com/gprsService/";

		public bool ftpModel;

		public static string CloudModelDescription = "SingleColor";

		public static int LastSelectedContentType = -1;

		public static bool isUseGroup = true;

		public static bool isUseXML = true;

		public static bool isADAutoSend = false;

		public static bool isExting = false;

		public static bool isArba = false;

		public static int DetectionMode = -1;

		public static bool IsCompleteSet = false;

		public static bool IsFirstStart = false;

		private static string projectDir = "";

		private static string projectName = "";

		private static string projectCloudName = "";

		private static string languagePath = "";

		private static string projectPath = "D:\\led.zhled";

		private static string projectCloudPath = "";

		private static int ScreenCoverWidth = 5;

		public static UI_Interface IServer = null;

		public static Dictionary<string, DEVICE_INFO> deviceInfoDict;

		public static LedProject ledsys;

		private LedPanel nowPanel;

		private LedItem nowItem;

		private BinaryFormatter binFor = new BinaryFormatter();

		private static string formID = "mainform";

		private static MulitLanguageFresher mulitLanguage;

		public static int FrameRate;

		private AnimationMaker animationMaker;

		public LedSubarea nowMarquee;

		private LedTime nowTime;

		private LedDial nowDial;

		private LedCounter nowCounter;

		private LedLunar nowLunar;

		private LedTemperature nowTemperature;

		private LedWeather nowWeather;

		private LedString nowString;

		private LedDText nowText;

		private LedSubarea nowSubarea;

		private LedAnimation nowAnimation;

		private LedEdge nowSubareaEdgeData;

		private LedEffectsSetting nowEffectSetting;

		private LedPictureText nowMarqueeContent;

		private LedBackground nowBackGround;

		private formStart starter;

		private bool isShowStartForm = true;

		private LedContent nowLedContent;

		private System.Drawing.Point LedTreeELocation;

		public string overlappingItem = "";

		public bool hasNullItem;

		public bool isALlItemClosed = true;

		private IList<Control> ButtonList = new List<Control>();

		private IList<bool> ButtonVisibleList = new List<bool>();

		private IList<Label> ButtonTextList = new List<Label>();

		public bool isIPCServerOK;

		public List<string> newDeviceProductIDs = new List<string>();

		private static string[] movieBackgroundParamXML;

		private static string[] movieBackgroundparamName;

		private static string[] movieBackgroundParamValue;

		private int levelGroup;

		private int levelPanel = 1;

		private int levelItem = 2;

		private int levelSubarea = 3;

		private int levelContent = 4;

		private bool marqueeTextChanged;

		private formText marqueeTextEditor;

		private TreeNode tnNoGroup;

		private System.Drawing.Point screenPanelOldLocation;

		private System.Drawing.Point lastRightButtonLocation = new System.Drawing.Point(0, 0);

		private bool screenPanelIsMoving;

		private System.Drawing.Point panelCoverOldLocation;

		private IList<LedSubareaHolder> subareaHolderList = new List<LedSubareaHolder>();

		private System.Drawing.Size normalSize;

		private System.Drawing.Point normalPosition;

		private bool isLoadingParm;

		private DateTime lastDown = DateTime.Now;

		private bool isMaxSize;

		public static bool isInitCityData = false;

		private bool isPre;

		private static string[] productMessage;

		private LedSubareaHolder nowSubareaHolder;

		private bool isSubareaLocationXKeyDown;

		private bool isSubareaLocationYKeyDown;

		private bool isSubareaSizeWidthKeyDown;

		private bool isSubareaSizeHeightKeyDown;

		private bool isSubareaSizeWidthMouseWheel;

		private bool isSubareaSizeHeightMouseWheel;

		private bool return_stop;

		private bool isGenerating;

		private bool bPaint;

		private bool isContentBackgroundSelected;

		private bool isItemBackgroundSelected;

		private int dialTextMode;

		public bool isCloudLogin;

		private bool isCloudSyncing;

		private bool isCloudTerminalMonitorEnabled;

		private bool isCloudTerminalMonitoring;

		private bool isCloudlogouting;

		private bool isSendDataTickPause;

		private List<Thread> threadList;

		private IContainer components;

		private MenuStrip menuStrip1;

		private TreeView ledTree;

		private ToolStripMenuItem fileToolStripMenuItem;

		private ToolStripMenuItem openProjectToolStripMenuItem;

		private ToolStripMenuItem projectSavaAsToolStripMenuItem;

		private ToolStripMenuItem newPorjectToolStripMenuItem;

		private ToolStripMenuItem exitToolStripMenuItem;

		private ToolStripMenuItem editMenuToolStripMenuItem;

		private ToolStripMenuItem addItemToolStripMenuItem;

		private ToolStripMenuItem addMarqueeToolStripMenuItem;

		private ToolStripMenuItem addClockToolStripMenuItem;

		private ToolStripMenuItem addDialToolStripMenuItem;

		private ToolStripMenuItem addLunarToolStripMenuItem;

		private ToolStripMenuItem addMenuToolStripMenuItem;

		private ToolStripMenuItem addTemperatureToolStripMenuItem;

		private ToolStripMenuItem addHumidityToolStripMenuItem;

		private ToolStripMenuItem addNoiseToolStripMenuItem;

		private ToolStripMenuItem deleteSelectionToolStripMenuItem;

		private ToolStripMenuItem setingMenuToolStripMenuItem;

		private ToolStripMenuItem languateSelectToolStripMenuItem;

		private ToolStripMenuItem skinSelectToolStripMenuItem;

		private ToolStripMenuItem helpToolStripMenuItem;

		private ToolStripMenuItem panelSettingToolStripMenuItem;

		private ToolStripMenuItem luminanceSettingToolStripMenuItem;

		private ToolStripMenuItem timingRegulateToolStripMenuItem;

		private ImageList panelTreeNodeImageList;

		private ToolStripMenuItem multiLanguageTemplatetoolStripMenuItem1;

		private ToolStripMenuItem helpdocToolStripMenuItem;

		private ToolStripMenuItem aboutToolStripMenuItem;

		private GroupBox groupBox1;

		private Label label1;

		private Label panelModelInfolabel;

		private Label label7;

		private Label panelCommInfolabel;

		private Label label5;

		private Label panelPanelSizelabel;

		private Label label2;

		private TextBox itemNameTextBox;

		private Label label8;

		private Label panelItemNumlabel;

		private Label label10;

		private Label itemSubareaNumLabel;

		private Label label12;

		private Label label14;

		private CheckBox itemLockedCheckBox;

		private RadioButton itemByAstTimerRadioButton;

		private RadioButton itemByTimeLengthRadioButton;

		private RadioButton itemByNumRadioButton;

		private Label label19;

		private NumericUpDown itemPlayLengthSecond;

		private Label label18;

		private NumericUpDown itemPlayLengthMinute;

		private Label label17;

		private NumericUpDown itemPlayLengthHour;

		private NumericUpDown itemPlayLengthDay;

		private Label label16;

		private Label label20;

		private NumericUpDown subareaLocaltionX;

		private TextBox subareaTitle;

		private Label subareaLabel21;

		private Label subareaLabelHeight;

		private Label subareaLabelWidth;

		private Label subareaLabelY;

		private Label subareaLabelX;

		private NumericUpDown subareaSizeHeight;

		private NumericUpDown subareaLocaltionY;

		private NumericUpDown subareaSizeWidth;

		private Label edgeListLabel;

		private ComboBox edgeListComboBox;

		private Label edgeSpeedLabel;

		private ComboBox edgeSpeedComboBox;

		private Label edgeModeLabel;

		private ComboBox edgeModeComboBox;

		private CheckBox edgeUseEdge;

		private ComboBox effectExitSpeed;

		private Label effectLabelSpeedExitSpeed;

		private ComboBox effectExitType;

		private Label effectLabelSpeedExit;

		private ComboBox effectEntrySpeed;

		private Label effectLabelEntrySpeed;

		private ComboBox effectEntryType;

		private Label effectLabelEntryEntry;

		private ComboBox dialComboBoxHandStyle;

		private Label dialLabelHandStyle;

		private ComboBox dialComboBoxScaleShape;

		private Label dialLabelScaleShape;

		private NumericUpDown dialNumberSecondHandPlus;

		private NumericUpDown dialNumberMinuteHandPlus;

		private NumericUpDown dialNumberHourHandPlus;

		private Label dialLabelScaleCrossPlus;

		private Label dialLabelScaleHourPlus;

		private Label dialLabelScaleMinutePlus;

		private NumericUpDown dialNumberScaleCrossPlus;

		private NumericUpDown dialNumberScaleHourPlus;

		private NumericUpDown dialNumnberScaleMinutePlus;

		private Label dialLabelSecondHandPlus;

		private Label dialLabelMinuteHandPlus;

		private Label dialLabelHourHandPlus;

		private FontDialog fontDialog1;

		private Label counterLabelElementsSetting;

		private ComboBox temperatureAlarmOutput;

		private Label temperaturelabel65;

		private ComboBox temperatureAlarmType;

		private Label temperaturelabel66;

		private NumericUpDown temperatureMinDegreeNumericUpDown;

		private Label temperaturelabel62;

		private NumericUpDown temperatureMaxDegreeNumericUpDown;

		private Label temperaturelabel61;

		private ListBox marqueeContentListBox;

		private Button marqueeConPicture;

		private Button marqueeConFlash;

		private Button marqueeConWord;

		private Button marqueeConGrid;

		private Button marqueeConGif;

		private Button marqueeConText;

		private CheckBox counterOptionSecond;

		private Label counterLabelOption;

		private CheckBox counterOptionMinute;

		private CheckBox counterOptionHour;

		private CheckBox counterOptionDay;

		private GroupBox groupBox11;

		private ListBox panelItemslistBox;

		private Button panelItemsDownbutton;

		private Button panelItemsUpbutton;

		private ContextMenuStrip contextMenuStripPanel;

		private ToolStripMenuItem addItemContentToolStripMenuItem;

		private ContextMenuStrip contextMenuStripItem;

		private ToolStripMenuItem addSubareaContentToolStripMenuItem;

		private ContextMenuStrip contextMenuStripSubarea;

		private ToolStripMenuItem addMarqueeContentToolStripMenuItem;

		private ToolStripMenuItem addClockContentToolStripMenuItem;

		private ContextMenuStrip contextMenuStripContent;

		private ToolStripMenuItem deleteItemContentToolStripMenuItem;

		private ToolStripMenuItem addDialContentToolStripMenuItem;

		private ToolStripMenuItem addCounterContentToolStripMenuItem;

		private ToolStripMenuItem addLunarContentToolStripMenuItem;

		private ToolStripMenuItem addTemperatureContentToolStripMenuItem;

		private ToolStripMenuItem addHumidityContentToolStripMenuItem;

		private ToolStripMenuItem addNoiseContentToolStripMenuItem;

		private ToolStripMenuItem dropItemContentToolStripMenuItem;

		private ToolStripMenuItem deleteContentContentToolStripMenuItem;

		private ToolStripMenuItem exportDataToolStripMenuItem;

		private ToolStripMenuItem exportDataToolStripMenuItem1;

		private Panel screenPanelMain;

		private ToolStrip panelToolStrip;

		private Panel panelCover;

		private Button marqueeConCounter;

		private Button marqueeConDial;

		private Button marqueeConClock;

		private Button marqueeConNoise;

		private Button marqueeConHumidity;

		private Button marqueeConTemperature;

		private Button marqueeConLunar;

		private ToolStripButton toolAlignRightLeft;

		private ToolStripButton toolAlignTopBottom;

		private ToolStripButton toolAlignLeft;

		private ToolStripButton toolAlignRight;

		private ToolStripButton toolAlignTop;

		private ToolStripButton toolAlignBottom;

		private ToolStripButton toolPrevousPage;

		private ToolStripButton toolNextPage;

		private ToolStripButton toolUpAdjustButton;

		private ToolStripButton toolDownAdjustButton;

		private ToolStripButton toolNarrowButton;

		private ToolStripButton maginfyToolsPanel;

		private ToolStripButton minifyToolsPanel;

		private CheckBox itemByPeroidCheckBox;

		private CheckBox itemClosedCheckBox;

		private Label label3;

		private NumericUpDown itemPlaySeetingPlayNum;

		private Panel itemPlayTimerByDatePanel;

		private Label label9;

		private DateTimePicker itemTimerEndDate;

		private DateTimePicker itemTimerStartDate;

		private Label label_Item_DateTo;

		private DateTimePicker itemTimerEndTime;

		private DateTimePicker itemTimerStartTime;

		private Panel itemPlayTimerByWeekPanel;

		private CheckBox itemTimerWeekThursdayCheckBox;

		private CheckBox itemTimerWeekMondayCheckBox;

		private CheckBox itemTimerWeekTuesdayCheckBox;

		private CheckBox itemTimerWeekWednesdayCheckBox;

		private CheckBox itemTimerWeekFridayCheckBox;

		private CheckBox itemTimerWeekSaturdayCheckBox;

		private CheckBox itemTimerWeekSundayCheckBox;

		private RadioButton itemPlayTimerEverydayRadioButton;

		private RadioButton itemPlayTimerByDateRadioButton;

		private RadioButton itemPlayTimerByWeekRadioButton;

		private Panel itemByTimeLengthPanel;

		private Panel itemByNumPanel;

		private CheckBox itemTimerNoGap;

		private System.Windows.Forms.Timer timerSubareaRefresh;

		private RadioButton counterTypeDown;

		private RadioButton counterTypeUp;

		private Label dialLabelSecondHandWidthPlus;

		private Label dialLabelMinuteHandSizePlus;

		private Label dialLabelHourHandSizePlus;

		private NumericUpDown dialNumberSecondHandWidthPlus;

		private NumericUpDown dialNumberMinuteHandWidthPlus;

		private NumericUpDown dialNumberHourHandWidthPlus;

		private Label label11;

		private DateTimePicker dialTimeJetPicker;

		private Label counterLabelTargetDay;

		private NumericUpDown counterTargetDay;

		private Label counterLabelTargetMonth;

		private NumericUpDown counterTargetMonth;

		private Label counterLabelTargetYear;

		private NumericUpDown counterTargetYear;

		private NumericUpDown counterTargetHour;

		private ToolStripButton originalZoonToolsPanel;

		private ToolStripSeparator toolStripSeparator6;

		private ToolStripLabel zoonToolsPanel;

		private ToolStripLabel toolStripLabelPageNumber;

		private ToolStripSeparator toolStripSeparator7;

		private ToolStripLabel MarqueeOffsetYValue;

		private ToolStripSeparator toolStripSeparator9;

		private ToolStripButton toolStretchButton;

		private ToolStripLabel StretchLabel;

		private ToolStripSeparator toolStripSeparator8;

		private Label itemEdgeSpeedLabel;

		private ComboBox itemEdgeSpeed;

		private Label itemEdgeModeLabel;

		private ComboBox itemEdgeMode;

		private CheckBox itemUseEdge;

		private Label itemEdgeListLabel;

		private ComboBox itemEdgeList;

		private Panel panelEdgeTop;

		private Panel panelEdgeBottom;

		private Panel panelEdgeRight;

		private Panel panelEdgeLeft;

		private System.Windows.Forms.Timer marqueeTimerRefresh;

		private OpenFileDialog openFileDialog1;

		private ToolStripMenuItem autoStartAndCloseToolStripMenuItem;

		private Label label21;

		private ComboBox itemBackgroundSpeed;

		private Label label22;

		private CheckBox itemBackgroundIsUse;

		private Button itemBackgroundSelectButton;

		private Label label23;

		private ComboBox itemBackgroundSizeModel;

		private ToolStripMenuItem configToolStripMenuItem;

		private ToolStripMenuItem testStripMenuItem;

		private Label label24;

		private CheckBox checkBox2;

		private CheckBox checkBox1;

		private ComboBox effectStay;

		private Button marqueeConRichText;

		private PictureBox pictureBox_LeftTop;

		private PictureBox pictureBox_RightTop;

		private Panel panel_Top;

		private PictureBox pictureBox_Close;

		private PictureBox pictureBox_Max;

		private PictureBox pictureBox_Min;

		private Panel panel_BorderLeft;

		private PictureBox pictureBox_BorderLeftBottom;

		private PictureBox pictureBox_BorderRightBottom;

		private Panel panel_BorderRight;

		private Panel panel_BorderBottom;

		private PictureBox pictureBox_BorderRightTop;

		private PictureBox pictureBox_BorderLeftTop;

		private Panel panel_Nagivator;

		private Panel panel_BordertTop;

		private ZhGroupBox zhGroupBox_Panel;

		private Panel panel_Item;

		private ZhGroupBox zhGroupBox_Tree;

		private ZhGroupBox zhGroupBox_PanelAttribute;

		private ZhGroupBox ItemAttribute;

		private ZhGroupBox itemPlaySettingGroupBox;

		private ZhGroupBox itemByPeroidGroupBox;

		private ZhGroupBox itemEdgeSettingGroupBox;

		private ZhGroupBox itemBackgroundSettingGroupBox;

		private Panel itemByAstTimerPanel;

		private ZhGroupBox subareaAttribute;

		private ZhGroupBox subareaEffectSetting;

		private ZhGroupBox subareaEdgeSetting;

		private ZhGroupBox dialAttributeBox;

		private ZhGroupBox marqueeAttributeBox;

		private ZhGroupBox clockAttributeBox;

		private ZhGroupBox temperatureAttributeBox;

		private ZhGroupBox counterAttributeBox;

		private ToolStripMenuItem Skin_DefaultToolStripMenuItem;

		private ToolStripMenuItem skin1ToolStripMenuItem;

		private PictureBox pictureBox_ChangeSize;

		private ZhToolStripSeparator toolStripSeparator1;

		private ZhToolStripSeparator zhtssSetting1;

		private TextEditor textEditor1;

		private ToolStripMenuItem addTextToolStripMenuItem;

		private ToolStripMenuItem addSubtitleToolStripMenuItem;

		private ComboBox itemBackgroundGradation;

		private ComboBox effectLoop;

		private Label label25;

		private ZhGroupBox contentBackgroundSettingGroupBox;

		private Label label27;

		private CheckBox contentBackgroundIsUse;

		private ComboBox contentBackgroundSize;

		private ComboBox contentBackgroundGradition;

		private Button contentBackgroundSelect;

		private Label label28;

		private Label label29;

		private ComboBox contentBackgroundSpeed;

		private ZhGroupBox animationAttributeBox;

		private AnimationEditor animationEditor1;

		private ZhGroupBox AnimationEffectSettingzhGroupBox;

		private AnimationEffect animationEffect1;

		private ZhGroupBox animationPreviewZhGroupBox;

		private ToolStripMenuItem getSetting;

		private ToolStripMenuItem TestToolStripMenuItem;

		private ComboBox itemBackgroundEffectComboBox;

		private Label label26;

		private ComboBox contentBackgroundEffectComboBox;

		private Label label30;

		private ZhGroupBox generateAnimationZhGroupBox;

		private CheckBox itemBackgroundUseGif;

		private CheckBox contentBackgroundUseGif;

		private ToolStripMenuItem skinClassic1ToolStripMenuItem;

		private ToolStripMenuItem skinClassic2ToolStripMenuItem;

		private ToolStripMenuItem skinClassic3ToolStripMenuItem;

		private ToolStripMenuItem skinXPBlueToolStripMenuItem;

		private ToolStripMenuItem skinXPSilverToolStripMenuItem;

		private ToolStripMenuItem skinXPOliveGreenToolStripMenuItem;

		private ToolStripMenuItem turnOfToolStripMenuItem2;

		private ToolStripMenuItem turnOnToolStripMenuItem1;

		private ToolStripMenuItem serialTestToolStripMenuItem3;

		private ZhToolStripSeparator zhtssSetting2;

		private TextBox clockNewContentTextBox;

		private CheckBox clockNewTimeIsShowCheckBox;

		private CheckBox clockNewWeekIsShowCheckBox;

		private CheckBox clockNewContentIsShowCheckBox;

		private CheckBox clockNewDateIsShowCheckBox;

		private Button clockNewUnderlineButton;

		private Button clockNewItalicButton;

		private Label clockNewTextLable;

		private Label clockNewFontFamilyLable;

		private Button clockNewBoldButton;

		private ComboBox clockNewLineModel;

		private ComboBox clockNewFontSize;

		private Label clockNewSizeLable;

		private ComboBox clockNewFontFamily;

		private ComboBox clockNewTimeColorComboBox;

		private ComboBox clockNewTimeStyleComboBox;

		private ComboBox clockNewWeekColorComboBox;

		private ComboBox clockNewWeekStyleComboBox;

		private ComboBox clockNewContentColorComboBox;

		private ComboBox clockNewDateColorComboBox;

		private ComboBox clockNewDateStyleComboBox;

		private Label label31;

		private Label label32;

		private Label label33;

		private ComboBox dialHandColorSecond;

		private ComboBox dialHandColorMinute;

		private ComboBox dialHandColorHour;

		private ComboBox dialHandColorScaleMinute;

		private ComboBox dialHandColorScaleColorHour;

		private ComboBox dialHandColorScale369;

		private CheckBox dialLeftAndRightTextCheckBox;

		private CheckBox dialConnerTextCheckBox;

		private CheckBox dialAreaTextCheckBox;

		private TextBox dialLeftTextTextBox;

		private TextBox dialAreaTextTextBox;

		private Button dialUnderlineBoldButton;

		private Button dialItalicBoldButton;

		private Label dialLabelFont;

		private Button dialFontBoldButton;

		private ComboBox dialFontSizeComboBox;

		private Label dialLabelFontSize;

		private ComboBox dialFontComboBox;

		private PictureBox dialElementLeftDown;

		private PictureBox dialElementUp;

		private PictureBox dialElementRight;

		private PictureBox dialElementLeft;

		private ComboBox dialTimeJetType;

		private ComboBox dialFontColorComboBox;

		private ComboBox dialConnerTextTextBox;

		private TextBox dialRightTextTextBox;

		private ToolTip toolTip1;

		private FolderBrowserDialog folderBrowserDialog1;

		private Button marqueDeleteButton;

		private Button marqueeConentDown;

		private Button marqueeConentUp;

		private Button counterNewUnderline;

		private Button counterNewItalic;

		private Button counterNewBlod;

		private ComboBox counterNewSize;

		private ComboBox counterNewFont;

		private ComboBox counterNewLineModel;

		private Label counterLabelStartTime;

		private CheckBox counterOptionYear;

		private Label counterLabelTargetSecond;

		private Label counterLabelCounterModel;

		private Label counterLabelTargetMinute;

		private NumericUpDown counterTargetMinute;

		private ComboBox counterNewColor;

		private CheckBox counterNewContentCheckBox;

		private ComboBox counterNewContentColorComboBox;

		private TextBox CounterNewContentTextBox;

		private Label counternewlabel34;

		private ComboBox counterNewSecondUnit;

		private ComboBox counterNewMinuteUnit;

		private ComboBox counterNewHourUnit;

		private ComboBox counterNewYearUnit;

		private ComboBox counterNewDayUnit;

		private ComboBox temperatureColorComboBox;

		private Button temperatureUnderline;

		private Button temperatureItalic;

		private Button temperatureBold;

		private ComboBox temperatureSizeComboBox;

		private ComboBox temperatureFontComboBox;

		private ComboBox temperatureLineModelComboBox;

		private Label temperaturelabel6;

		private CheckBox temperatureIsUseContentCheckBox;

		private TextBox temperatureContentTextBox;

		private Label temperaturelabel13;

		private ComboBox temperatureDegreeUnitComboBox;

		private Label label_TemperatuUnit;

		private ToolStripMenuItem uSBUpdateToolStripMenuItem;

		private Label label_Logo;

		private PictureBox pictureBox_Spliter2;

		private PictureBox pictureBox_Spliter1;

		private PictureBox zhToolButton_Open;

		private PictureBox zhToolButton_Save;

		private PictureBox zhToolButton_Item;

		private PictureBox zhToolButton_Text;

		private PictureBox zhToolButton_Marquee;

		private PictureBox zhToolButton_Animation;

		private PictureBox zhToolButton_Clock;

		private PictureBox zhToolButton_Score;

		private PictureBox zhToolButton_Noise;

		private PictureBox zhToolButton_Humidity;

		private PictureBox zhToolButton_Temperature;

		private PictureBox zhToolButton_Lunar;

		private PictureBox zhToolButton_Counter;

		private PictureBox zhToolButton_Dial;

		private PictureBox zhToolButton_Usb;

		private PictureBox zhToolButton_Send;

		private PictureBox zhToolButton_Play;

		private PictureBox zhToolButton_FindDevice;

		private PictureBox zhToolButton_Delete;

		private Label zhToolButton_Open_Text;

		private Label zhToolButton_Usb_Text;

		private Label zhToolButton_Send_Text;

		private Label zhToolButton_Play_Text;

		private Label zhToolButton_FindDevice_Text;

		private Label zhToolButton_Delete_Text;

		private Label zhToolButton_Score_Text;

		private Label zhToolButton_Noise_Text;

		private Label zhToolButton_Humidity_Text;

		private Label zhToolButton_Temperature_Text;

		private Label zhToolButton_Lunar_Text;

		private Label zhToolButton_Counter_Text;

		private Label zhToolButton_Dial_Text;

		private Label zhToolButton_Clock_Text;

		private Label zhToolButton_Marquee_Text;

		private Label zhToolButton_Animation_Text;

		private Label zhToolButton_Text_Text;

		private Label zhToolButton_Item_Text;

		private Label zhToolButton_Save_Text;

		private ContextMenuStrip contextMenuStrip1_Marquee;

		private ToolStripMenuItem marqueeReverseToolStripMenuItem;

		private ToolStripMenuItem deleteMarqueeToolStripMenuItem;

		private ToolStripSeparator toolStripSeparator4;

		private ToolStripMenuItem Add_Marquee_Text_ToolStripMenuItem;

		private ToolStripMenuItem Add_Marquee_Richtext_ToolStripMenuItem;

		private ToolStripMenuItem Add_Marquee_Animation_ToolStripMenuItem;

		private ToolStripMenuItem Add_Marquee_Grid_ToolStripMenuItem;

		private ToolStripSeparator toolStripSeparator5;

		private ToolStripMenuItem Add_Marquee_Gif_ToolStripMenuItem;

		private ToolStripMenuItem Add_Marquee_Image_ToolStripMenuItem;

		private ToolStripMenuItem SendAll_ReSend_ToolStripMenuItem;

		private Button marqueeConExcel;

		private ToolStripMenuItem gPRSManagementToolStripMenuItem;

		public Panel panel_Waitting;

		private Label label_Waitting_Picture;

		private PictureBox pictureBox2;

		private ToolStripMenuItem gprsSendToolStripMenuItem;

		private CheckBox counterShowUnit;

		private ToolStripMenuItem saveWifiDataToolStripMenuItemToolStripMenuItem;

		private PictureBox zhToolButton_FindDeviceWifi;

		private Label zhToolButton_FindDeviceWifi_Text;

		private Button marqueePublicText;

		private ToolStripMenuItem addAnimationContentToolStripMenuItem;

		private ToolStripMenuItem addAnimationToolStripMenuItem;

		private ToolStripMenuItem ethernetUpdateToolStripMenuItem;

		private ToolTip toolTip_picture_formain;

		private ToolStripMenuItem timeSequenceToolStripMenuItem;

		private ZhGroupBox lunarAttributeBox;

		private LunarEditor lunarEditor1;

		private ToolStripMenuItem EditPublicTextToolStripMenuItem;

		private ImageList imageListCountry;

		private ZhToolStripSeparator zhToolStripSeparator2;

		private ZhToolStripSeparator zhToolStripSeparator3;

		private PictureBox zhToolButton_Weather;

		private Label zhToolButton_Weather_Text;

		private ToolStripMenuItem addWeatherToolStripMenuItem;

		private ToolStripMenuItem addWeatherContentToolStripMenuItem;

		private ZhGroupBox weatherAttributeBox;

		private WeatherEditor weatherEditor1;

		private ZhGroupBox WeatherEffectSettingzhGroupBox;

		private ComboBox cmbWeatherStay;

		private ComboBox cmbWeatherEntrySpeed;

		private ComboBox cmbWeatherEntryMode;

		private Label lblWeatherStay;

		private Label lblWeatherEntrySpeed;

		private Label lblWeatherEntryMode;

		private ZhGroupBox zhGroupBoxContentBackground;

		private ZhGroupBox zhGroupBoxItemBackground;

		private Button marqueeEdit;

		private ColorfulBackground colorfulBackgroundItem;

		private ColorfulBackground colorfulBackgroundContent;

		private ZhGroupBox textAttributeBox;

		private ToolStripMenuItem softwareUpdateToolStripMenuItem;

		private ZhToolStripSeparator zhtssHelp1;

		private ZhToolStripSeparator zhtssHelp2;

		private Label panelNamelabel;

		private PictureBox zhToolButton_String;

		private Label zhToolButton_String_Text;

		private ToolStripMenuItem addStringToolStripMenuItem;

		private ToolStripMenuItem addStringContentToolStripMenuItem;

		private ZhGroupBox stringAttributeBox;

		private StringEditor stringEditor1;

		private ZhGroupBox StringEffectSettingzhGroupBox;

		private ComboBox cmbStringStay;

		private ComboBox cmbStringEntrySpeed;

		private ComboBox cmbStringEntryMode;

		private Label lblStringStay;

		private Label lblStringEntrySpeed;

		private Label lblStringEntryMode;

		private ToolStripMenuItem EditStringLibraryToolStripMenuItem;

		private ToolStripSeparator toolStripSeparatorSubarea1;

		private ToolStripMenuItem copyItemContentToolStripMenuItem;

		private ToolStripSeparator toolStripSeparatorSubarea2;

		private ToolStripMenuItem buttonFunctionConfigurationToolStripMenuItem;

		private ToolStripMenuItem shareItemContentToolStripMenuItem;

		private ToolStripSeparator toolStripSeparatorSubarea3;

		private ContextMenuStrip contextMenuStripSharedSource;

		private ContextMenuStrip contextMenuStripShared;

		private ToolStripMenuItem tsmissAddSubtitle;

		private ToolStripMenuItem tsmisEditSharedItem;

		private ToolStripMenuItem tsmisUnsharedItem;

		private ToolStripSeparator tsss1;

		private ToolStripMenuItem tsmisDeleteItem;

		private ToolStripMenuItem tsmissAddAnimation;

		private ToolStripMenuItem tsmissAddPictureText;

		private ToolStripMenuItem tsmissAddTime;

		private ToolStripMenuItem tsmissAddDial;

		private ToolStripMenuItem tsmissAddCounter;

		private ToolStripMenuItem tsmissAddLunar;

		private ToolStripMenuItem tsmissAddTemperature;

		private ToolStripMenuItem tsmissAddWeather;

		private ToolStripMenuItem tsmissAddString;

		private ToolStripSeparator tssss2;

		private ToolStripMenuItem tsmissUnsharedItem;

		private ToolStripSeparator tssss3;

		private ToolStripMenuItem tsmissDeleteItem;

		private ToolStripMenuItem tsmissCopyItem;

		private ToolStripSeparator tssss1;

		private ZhToolStripSeparator zhtssSetting4;

		private ZhToolStripSeparator zhtssSetting5;

		private ToolStripMenuItem tsmiGroup;

		private ToolStripMenuItem tsmiLocalServerSetting;

		private ZhToolStripSeparator zhtssGroup1;

		private ToolStripMenuItem tsmiCloudLogin;

		private ToolStripMenuItem tsmiCloudLogout;

		private ToolStripMenuItem tsmiCloudRegister;

		private ToolStripMenuItem tsmiCloudQueryReview;

		private ToolStripMenuItem tsmiCloudManagement;

		private ToolStripMenuItem tsmiGroupLuminance;

		private ToolStripMenuItem tsmiGroupTiming;

		private ToolStripMenuItem tsmiGroupPowerOff;

		private ToolStripMenuItem tsmiGroupPowerOn;

		private ToolStripMenuItem tsmiGroupTimerSwitch;

		private ToolStripMenuItem tsmiGroupSending;

		private ZhToolStripSeparator zhtssGroup2;

		private ZhToolStripSeparator zhtssGroup3;

		private Label lblCloudLoginInfo;

		private PictureBox picCloudLoginInfo;

		private Label panelDeviceIDLabel;

		private Label label6;

		private ToolStripMenuItem copyPanelItemsContentToolStripMenuItem;

		private ToolStripSeparator toolStripSeparatorPanel1;

		private ToolStripMenuItem queryPanelStateToolStripMenuItem;

		private ToolStripSeparator toolStripSeparatorPanel2;

		private ToolStripMenuItem queryStateContentToolStripMenuItem;

		private PictureBox picLogo;

		private ToolStripMenuItem tsmiEthernetSettings;

		private ToolStripMenuItem tsmiGPRSSettings;

		private ZhToolStripSeparator zhtssSetting3;

		private Label lblRunMode;

		private ToolStripMenuItem EditDataSourceToolStripMenuItem;

		public static string LanguagePath
		{
			get
			{
				return formMain.languagePath;
			}
			set
			{
				formMain.languagePath = value;
			}
		}

		public static LedProject Ledsys
		{
			get
			{
				return formMain.ledsys;
			}
			set
			{
				formMain.ledsys = value;
			}
		}

		public static string[] MovieBackgroundParamXML
		{
			get
			{
				return formMain.movieBackgroundParamXML;
			}
			set
			{
				formMain.movieBackgroundParamXML = value;
			}
		}

		public static string[] MovieBackgroundparamName
		{
			get
			{
				return formMain.movieBackgroundparamName;
			}
			set
			{
				formMain.movieBackgroundparamName = value;
			}
		}

		public static string[] MovieBackgroundParamValue
		{
			get
			{
				return formMain.movieBackgroundParamValue;
			}
			set
			{
				formMain.movieBackgroundParamValue = value;
			}
		}

		public static MulitLanguageFresher ML
		{
			get
			{
				return formMain.mulitLanguage;
			}
			set
			{
				formMain.mulitLanguage = value;
			}
		}

		public static string FormID
		{
			get
			{
				return formMain.formID;
			}
		}

		public static string DesktopPath
		{
			get
			{
				return Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
			}
		}

		public static void ReleasePicture(PictureBox pPic, System.Drawing.Bitmap pBit)
		{
			if (pPic.Image == null)
			{
				pPic.Image = (System.Drawing.Bitmap)pBit.Clone();
				pPic.Refresh();
				return;
			}
			try
			{
				System.Drawing.Bitmap bitmap = (System.Drawing.Bitmap)pPic.Image;
				pPic.Image = (System.Drawing.Bitmap)pBit.Clone();
				bitmap.Dispose();
				pPic.Refresh();
			}
			catch
			{
			}
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, ref formMain.TVITEM lParam);

		public static void HideCheckBox(TreeView tvw, TreeNode node)
		{
			formMain.TVITEM tVITEM = default(formMain.TVITEM);
			tVITEM.hItem = node.Handle;
			tVITEM.mask = 8;
			tVITEM.stateMask = 61440;
			tVITEM.state = 0;
			formMain.SendMessage(tvw.Handle, 4415, IntPtr.Zero, ref tVITEM);
		}

		private static void GetLangPath()
		{
			if (Directory.Exists(Application.StartupPath + "\\Language"))
			{
				formMain.languagePath = Application.StartupPath + "\\Language\\";
				return;
			}
			DirectoryInfo directoryInfo = new DirectoryInfo(Application.StartupPath);
			formMain.languagePath = directoryInfo.Parent.Parent.FullName.ToString() + "\\Language\\";
		}

		private void SetConfig(string pLanguage)
		{
			try
			{
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.Load("LedConfig.Xml");
				XmlNodeList xmlNodeList = xmlDocument.SelectNodes("//Root//Record");
				xmlNodeList[0].InnerText = pLanguage;
				xmlNodeList[0].Attributes["NumberOfStarts"].Value = "1";
				xmlDocument.Save("LedConfig.Xml");
			}
			catch
			{
                //KKK
			}
		}

		private void SetConfigNumberOfStarts(int num)
		{
			try
			{
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.Load("LedConfig.Xml");
				XmlNodeList xmlNodeList = xmlDocument.SelectNodes("//Root//Record");
				xmlNodeList[0].Attributes["NumberOfStarts"].Value = num.ToString();
				xmlDocument.Save("LedConfig.Xml");
			}
			catch
			{
			}
		}

		public static string ReadConfig()
		{
			string result;
			try
			{
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.Load("LedConfig.Xml");
				XmlNodeList xmlNodeList = xmlDocument.SelectNodes("//Root//Record");
				string text = xmlNodeList[0].InnerText.Trim();
				if (int.Parse(xmlNodeList[0].Attributes["NumberOfStarts"].Value.ToString()) == 0)
				{
					formMain.IsFirstStart = true;
				}
				else
				{
					formMain.IsFirstStart = false;
				}
				if (text.Length > 1)
				{
					result = text;
				}
				else
				{
					result = "";
				}
			}
			catch
			{
				result = "";
			}
			return result;
		}

		[DllImport("user32.dll")]
		public static extern bool ReleaseCapture();

		[DllImport("user32.dll")]
		public static extern bool SendMessage(IntPtr hwnd, int wMsg, int wParam, int lParam);

		private void gPanelTitleBack_MouseDown(object sender, MouseEventArgs e)
		{
			if (e.Button == MouseButtons.Left)
			{
				DateTime now = DateTime.Now;
				TimeSpan timeSpan = now - this.lastDown;
				this.lastDown = DateTime.Now;
				if (timeSpan.TotalMilliseconds < 350.0)
				{
					this.pictureBox_Max_Click(null, null);
				}
				formMain.ReleaseCapture();
				formMain.SendMessage(base.Handle, 274, 61458, 0);
			}
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern int GetWindowLong(HandleRef hWnd, int nIndex);

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern IntPtr SetWindowLong(HandleRef hWnd, int nIndex, int dwNewLong);

		public formMain()
		{

            this.threadList = new List<Thread>();
			this.CheckDataDir();
			if (!Global.isLoadFinish && this.isShowStartForm)
			{
				try
				{
					this.starter = new formStart();
					this.starter.Show();
				}
				catch (Exception ex)
				{
					try
					{
						string text = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\";
						string str = Application.StartupPath + "\\";
						string str2 = "Flash32_11_8_800_168.ocx";
						string text2 = "regocx.bat";
						string str3 = "unregocx.bat";
						string text3 = str + str2;
						string text4 = str + text2;
						string text5 = str + str3;
						if (File.Exists(text3) && !File.Exists(text + str2))
						{
							File.Copy(text3, text + str2, true);
						}
						if (File.Exists(text4))
						{
							File.Copy(text4, text + text2, true);
						}
						if (File.Exists(text5))
						{
							File.Copy(text5, text + str3, true);
						}
						if (File.Exists(text + str2) && File.Exists(text + text2))
						{
							Process process = new Process();
							process.StartInfo.WorkingDirectory = text;
							process.StartInfo.UseShellExecute = false;
							process.StartInfo.RedirectStandardError = true;
							process.StartInfo.RedirectStandardOutput = true;
							process.StartInfo.FileName = text2;
							process.Start();
							process.StandardOutput.ReadToEnd();
							process.StandardError.ReadToEnd();
						}
						MessageBox.Show(ex.Message);
					}
					catch (Exception ex2)
					{
						MessageBox.Show(ex2.Message);
					}
				}
			}
			try
			{
				Template.TemplatePath = Application.StartupPath + "\\Template\\";
				Template.Load(Settings.Default.Template);
			}
			catch
			{
			}
			try
			{
				this.InitializeComponent();
				if (Program.IsforeignTradeMode)
				{
					base.Icon = Resources.AppIconV5;
				}
				else
				{
					base.Icon = Resources.AppIcon;
				}
				this.Text = string.Format("{0} {1}", formMain.ledTitle, formMain.ledTitleVersion);
				this.effectEntrySpeed.Items.Clear();
				this.effectExitSpeed.Items.Clear();
				for (int i = 0; i < 128; i++)
				{
					this.effectEntrySpeed.Items.Add(i + 1);
					this.effectExitSpeed.Items.Add(i + 1);
				}
			}
			catch (Exception ex3)
			{
				MessageBox.Show(ex3.Message);
			}
			formMain.GetLangPath();
			string text6 = Settings.Default.Language;
			this.ShowMessage(text6);
			text6 = this.DetectionSystemLanguagePack(formMain.ReadConfig());
			if (text6 != "")
			{
				Settings.Default.Language = text6;
			}
			else if (formMain.IsforeignTradeMode)
			{
				text6 = (Settings.Default.Language = formMain.LanguageEnglish);
			}
			else
			{
				text6 = (Settings.Default.Language = formMain.LanguageChineseSimplified);
			}
			this.SetConfig(text6);
			string text7 = string.Concat(new string[]
			{
				formMain.languagePath,
				text6,
				"\\",
				text6,
				".xml"
			});
			formMain.isUseGroup = Settings.Default.UseGroup;
			if (formMain.isUseGroup)
			{
				this.levelGroup = 0;
				this.levelPanel = 1;
				this.levelItem = 2;
				this.levelSubarea = 3;
				this.levelContent = 4;
			}
			else
			{
				this.levelGroup = -1;
				this.levelPanel = 0;
				this.levelItem = 1;
				this.levelSubarea = 2;
				this.levelContent = 3;
			}
			formMain.ML = new MulitLanguageFresher(text7);
			formMain.mulitLanguage.NowLanguage = text6;
			this.ShowTemplate();
			if (Settings.Default.Language == formMain.LanguageChineseSimplified || Settings.Default.Language == formMain.LanguageChineseTraditional)
			{
				this.UpdateButtonText();
			}
			else
			{
				this.ButtonText_set_visible();
			}
			formMain.mulitLanguage.NowFormID = formMain.formID;
			if (text6 == formMain.LanguageChineseSimplified)
			{
				this.LoadProductMessage();
				return;
			}
			if (!File.Exists(text7))
			{
				return;
			}
			formMain.ML.ReadLanguageXMLResourse(text7);
			formMain.ML.Routing_xml_scans();
			if (MulitLanguageFresher.Language_Display.Count != 0)
			{
				this.Display_changeLanguage();
			}
			this.LoadProductMessage();
		}

		private void InitIPCServer()
		{
			try
			{
				this.isIPCServerOK = false;
				formMain.IServer = new call();
				formMain.IServer.DO_CMD_TIME_OUT = 3;
				formMain.IServer.TCP_DEFAULT_LISTEN_PORT = formMain.ledsys.LocalServerIPPort;
				formMain.IServer.IS_FOREIGNTRADE_MODE = formMain.IsforeignTradeMode;
				formMain.deviceInfoDict = formMain.IServer.init(this);
				call.OnIPCReadyOK += new EventHandler<EventArgs>(this.OnIPCReady);
				call.OnAutoFoundDevice += new EventHandler<AutoFoundDeviceEventArgs>(this.OnReceivedHeartbeat);
				formMain.IServer.enable_ipc_comm_async();
				ProcessStartInfo processStartInfo = new ProcessStartInfo();
				processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
				if (formMain.isGreen)
				{
					processStartInfo.Arguments = "LED_System_TcpUdpRsServer.exe";
					processStartInfo.FileName = "LCSVM.exe";
				}
				else
				{
					if (formMain.IsforeignTradeMode)
					{
						processStartInfo.Arguments = "-i";
					}
					processStartInfo.FileName = "LED_System_TcpUdpRsServer.exe";
				}
				Process.Start(processStartInfo);
			}
			catch
			{
			}
		}

		public void RestartIPCServer()
		{
			try
			{
				Process[] processes = Process.GetProcesses();
				int i = 0;
				while (i < processes.Length)
				{
					Process process = processes[i];
					if (process.ProcessName == "LED_System_TcpUdpRsServer")
					{
						if (process.MainModule == null)
						{
							break;
						}
						string fileName = process.MainModule.FileName;
						if (string.IsNullOrEmpty(fileName))
						{
							break;
						}
						FileInfo fileInfo = new FileInfo(fileName);
						if (fileInfo == null)
						{
							break;
						}
						string name = fileInfo.Name;
						if (name.Equals("LED_System_TcpUdpRsServer.exe"))
						{
							process.Kill();
							break;
						}
						break;
					}
					else if (process.ProcessName == "LCSVM")
					{
						Process currentProcess = Process.GetCurrentProcess();
						if (process.Id != currentProcess.Id)
						{
							process.Kill();
							break;
						}
						break;
					}
					else
					{
						i++;
					}
				}
				if (formMain.ledsys != null && formMain.ledsys.Panels != null)
				{
					foreach (LedPanel current in formMain.ledsys.Panels)
					{
						if (current.PortType == LedPortType.Ethernet && current.EthernetCommunicaitonMode == LedEthernetCommunicationMode.LocalServer)
						{
							current.State = LedPanelState.Offline;
						}
					}
					base.Invoke(new MethodInvoker(delegate
					{
						foreach (TreeNode treeNode in this.ledTree.Nodes)
						{
							if (treeNode != null && treeNode.Nodes != null && treeNode.Nodes.Count != 0)
							{
								foreach (TreeNode treeNode2 in treeNode.Nodes)
								{
									if (treeNode2 != null && treeNode2.Tag != null && !(treeNode2.Tag.GetType() != typeof(LedPanel)))
									{
										LedPanel ledPanel = (LedPanel)treeNode2.Tag;
										if (ledPanel.PortType == LedPortType.Ethernet && ledPanel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.LocalServer)
										{
											ledPanel.State = LedPanelState.Offline;
											treeNode2.ImageIndex = 2;
											treeNode2.SelectedImageIndex = 2;
											treeNode2.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Offline") + ledPanel.GetDescription();
										}
									}
								}
							}
						}
					}));
				}
				call.OnIPCReadyOK -= new EventHandler<EventArgs>(this.OnIPCReady);
				call.OnAutoFoundDevice -= new EventHandler<AutoFoundDeviceEventArgs>(this.OnReceivedHeartbeat);
				if (formMain.IServer != null)
				{
					formMain.IServer.uninit();
				}
				formMain.IServer = null;
				this.InitIPCServer();
			}
			catch
			{
			}
		}

		public bool IsAllPanelOnline()
		{
			bool result = true;
			if (formMain.ledsys != null && formMain.ledsys.Panels != null)
			{
				foreach (LedPanel current in formMain.ledsys.Panels)
				{
					if (current.State == LedPanelState.Offline)
					{
						result = false;
						break;
					}
				}
			}
			return result;
		}

		private void OnIPCReady(object sender, EventArgs arg)
		{
			if (!this.isIPCServerOK)
			{
				this.AddPanelToIPCServer();
				this.isIPCServerOK = true;
			}
		}

		private void OnReceivedHeartbeat(object sender, AutoFoundDeviceEventArgs arg)
		{
			if (arg.cmd_id == 4342)
			{
				return;
			}
			bool flag = false;
			if (this.ledTree.Nodes != null && this.ledTree.Nodes.Count > 0)
			{
				foreach (TreeNode treeNode in this.ledTree.Nodes)
				{
					if (treeNode != null && treeNode.Nodes != null && treeNode.Nodes.Count != 0)
					{
						foreach (TreeNode treeNode2 in treeNode.Nodes)
						{
							if (treeNode2 != null && treeNode2.Tag != null && !(treeNode2.Tag.GetType() != typeof(LedPanel)))
							{
								LedPanel ledPanel = (LedPanel)treeNode2.Tag;
								if (ledPanel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.LocalServer && ledPanel.NetworkID == arg.net_id && ledPanel.ProductID == arg.product_id)
								{
									if ((byte)(arg.state & DEVICE_STATE.ST_ONLINE) == 1)
									{
										ledPanel.State = LedPanelState.Online;
										treeNode2.ImageIndex = 1;
										treeNode2.SelectedImageIndex = 1;
										treeNode2.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Online") + ledPanel.GetDescription();
									}
									else
									{
										ledPanel.State = LedPanelState.Offline;
										treeNode2.ImageIndex = 2;
										treeNode2.SelectedImageIndex = 2;
										treeNode2.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Offline") + ledPanel.GetDescription();
									}
									flag = true;
									break;
								}
							}
						}
						if (flag)
						{
							break;
						}
					}
				}
			}
			if (!flag)
			{
				this.newDeviceProductIDs.Add(arg.product_id);
				base.Invoke(new MethodInvoker(delegate
				{
					new ToolTip
					{
						IsBalloon = true,
						UseAnimation = true
					}.Show(string.Concat(new string[]
					{
						formMain.ML.GetStr("NETCARD_message_New_Network_Device"),
						"<",
						arg.net_id,
						">. ",
						formMain.ML.GetStr("NETCARD_message_Add_manually")
					}), this.menuStrip1, 5000);
				}));
			}
		}

		public void ShowMessage(string pMsg, int pParam)
		{
		}

		public void ShowMessage(string pMsg)
		{
		}

		private void MaxWind()
		{
			if (this.isMaxSize)
			{
				this.isMaxSize = false;
				base.Size = this.normalSize;
				base.Location = this.normalPosition;
			}
			else
			{
				this.isMaxSize = true;
				this.normalSize = base.Size;
				base.Size = Screen.PrimaryScreen.WorkingArea.Size;
				this.normalPosition = base.Location;
				base.Location = new System.Drawing.Point(0, 0);
			}
			this.ResetPanelToolStrip();
			this.ResetRunMode();
			this.ResetCloudInfo();
		}

		private void ShowTemplate()
		{
			this.pictureBox_LeftTop.Image = Template.Main_LeftTop;
			this.pictureBox_RightTop.Image = Template.Main_RightTop;
			this.panel_Top.BackgroundImage = Template.Main_TopBackground;
			this.pictureBox_Close.Image = Template.Main_Close;
			this.pictureBox_Max.Image = Template.Main_Max;
			this.pictureBox_Min.Image = Template.Main_Min;
			this.ledTree.BackColor = Template.GroupBox_BackColor;
			this.ledTree.Font = Template.TreeviewFont;
			this.ledTree.ForeColor = Template.TreeViewColor;
			this.pictureBox_BorderLeftBottom.Image = Template.Main_Border_LeftBottom;
			this.pictureBox_BorderLeftTop.Image = Template.Main_Border_LeftTop;
			this.pictureBox_BorderRightBottom.Image = Template.Main_Border_RightBottom;
			this.pictureBox_BorderRightTop.Image = Template.Main_Border_RightTop;
			this.panel_BorderBottom.BackgroundImage = Template.Main_Border_Bottom;
			this.panel_BorderLeft.BackgroundImage = Template.Main_Border_Left;
			this.panel_BorderRight.BackgroundImage = Template.Main_Border_Right;
			this.panel_BordertTop.BackgroundImage = Template.Main_Border_Top;
			this.panel_Nagivator.BackgroundImage = Template.Navigator_Background;
			this.BackColor = Template.MainForm_BackColor;
			this.pictureBox_Spliter1.Image = Template.Navigator_Spliter;
			this.pictureBox_Spliter2.Image = Template.Navigator_Spliter;
			this.zhToolButton_Open.Image = Template.ToolButton_Open;
			this.zhToolButton_Save.Image = Template.ToolButton_Save;
			this.zhToolButton_Item.Image = Template.ToolButton_Item;
			this.zhToolButton_Clock.Image = Template.ToolButton_Clock;
			this.zhToolButton_Counter.Image = Template.ToolButton_Counter;
			this.zhToolButton_Dial.Image = Template.ToolButton_Dial;
			this.zhToolButton_FindDevice.Image = Template.ToolButton_FindDevice;
			this.zhToolButton_FindDeviceWifi.Image = Template.ToolButton_FindDeviceWifi;
			this.zhToolButton_Humidity.Image = Template.ToolButton_Humidity;
			this.zhToolButton_Lunar.Image = Template.ToolButton_Lunar;
			this.zhToolButton_Text.Image = Template.ToolButton_Text;
			this.zhToolButton_Animation.Image = Template.ToolButton_Animation;
			this.zhToolButton_Marquee.Image = Template.ToolButton_Marquee;
			this.zhToolButton_Noise.Image = Template.ToolButton_Noise;
			this.zhToolButton_Play.Image = Template.ToolButton_Play;
			this.zhToolButton_Score.Image = Template.ToolButton_Score;
			this.zhToolButton_Send.Image = Template.ToolButton_Send;
			this.zhToolButton_Temperature.Image = Template.ToolButton_Temperature;
			this.zhToolButton_Weather.Image = Template.ToolButton_Weather;
			this.zhToolButton_String.Image = Template.ToolButton_String;
			this.zhToolButton_Usb.Image = Template.ToolButton_USB;
			this.zhToolButton_Delete.Image = Template.ToolButton_Delete;
			this.menuStrip1.ForeColor = Template.MenuForecolor;
			this.menuStrip1.Font = Template.MenuFont;
			foreach (ToolStripMenuItem toolStripMenuItem in this.menuStrip1.Items)
			{
				foreach (ToolStripItem toolStripItem in toolStripMenuItem.DropDownItems)
				{
					toolStripItem.Font = Template.MenuFont;
					toolStripItem.ForeColor = Template.MenuForecolor;
					toolStripItem.BackColor = Template.MenuItemBackcolor;
				}
			}
		}

		private void zhToolbutton_location_ZH_CN()
		{
			this.zhToolButton_Open.Location = new System.Drawing.Point(this.zhToolButton_Open.Location.X, 0);
			this.zhToolButton_Save.Location = new System.Drawing.Point(this.zhToolButton_Save.Location.X, 0);
			this.zhToolButton_Item.Location = new System.Drawing.Point(this.zhToolButton_Item.Location.X, 0);
			this.zhToolButton_Clock.Location = new System.Drawing.Point(this.zhToolButton_Clock.Location.X, 0);
			this.zhToolButton_Counter.Location = new System.Drawing.Point(this.zhToolButton_Counter.Location.X, 0);
			this.zhToolButton_Dial.Location = new System.Drawing.Point(this.zhToolButton_Dial.Location.X, 0);
			this.zhToolButton_FindDevice.Location = new System.Drawing.Point(this.zhToolButton_FindDevice.Location.X, 0);
			this.zhToolButton_FindDeviceWifi.Location = new System.Drawing.Point(this.zhToolButton_FindDeviceWifi.Location.X, 0);
			this.zhToolButton_Humidity.Location = new System.Drawing.Point(this.zhToolButton_Humidity.Location.X, 0);
			this.zhToolButton_Lunar.Location = new System.Drawing.Point(this.zhToolButton_Lunar.Location.X, 0);
			this.zhToolButton_Marquee.Location = new System.Drawing.Point(this.zhToolButton_Marquee.Location.X, 0);
			this.zhToolButton_Noise.Location = new System.Drawing.Point(this.zhToolButton_Noise.Location.X, 0);
			this.zhToolButton_Play.Location = new System.Drawing.Point(this.zhToolButton_Play.Location.X, 0);
			this.zhToolButton_Score.Location = new System.Drawing.Point(this.zhToolButton_Score.Location.X, 0);
			this.zhToolButton_Send.Location = new System.Drawing.Point(this.zhToolButton_Send.Location.X, 0);
			this.zhToolButton_Temperature.Location = new System.Drawing.Point(this.zhToolButton_Temperature.Location.X, 0);
			this.zhToolButton_Weather.Location = new System.Drawing.Point(this.zhToolButton_Weather.Location.X, 0);
			this.zhToolButton_String.Location = new System.Drawing.Point(this.zhToolButton_String.Location.X, 0);
			this.zhToolButton_Text.Location = new System.Drawing.Point(this.zhToolButton_Text.Location.X, 0);
			this.zhToolButton_Animation.Location = new System.Drawing.Point(this.zhToolButton_Animation.Location.X, 0);
			this.zhToolButton_Usb.Location = new System.Drawing.Point(this.zhToolButton_Usb.Location.X, 0);
			this.zhToolButton_Delete.Location = new System.Drawing.Point(this.zhToolButton_Delete.Location.X, 0);
		}

		private void zhToolbutton_location_OtherLanguage()
		{
			this.zhToolButton_Open.Location = new System.Drawing.Point(this.zhToolButton_Open.Location.X, 10);
			this.zhToolButton_Save.Location = new System.Drawing.Point(this.zhToolButton_Save.Location.X, 10);
			this.zhToolButton_Item.Location = new System.Drawing.Point(this.zhToolButton_Item.Location.X, 10);
			this.zhToolButton_Clock.Location = new System.Drawing.Point(this.zhToolButton_Clock.Location.X, 10);
			this.zhToolButton_Counter.Location = new System.Drawing.Point(this.zhToolButton_Counter.Location.X, 10);
			this.zhToolButton_Dial.Location = new System.Drawing.Point(this.zhToolButton_Dial.Location.X, 10);
			this.zhToolButton_FindDevice.Location = new System.Drawing.Point(this.zhToolButton_FindDevice.Location.X, 10);
			this.zhToolButton_FindDeviceWifi.Location = new System.Drawing.Point(this.zhToolButton_FindDeviceWifi.Location.X, 10);
			this.zhToolButton_Humidity.Location = new System.Drawing.Point(this.zhToolButton_Humidity.Location.X, 10);
			this.zhToolButton_Lunar.Location = new System.Drawing.Point(this.zhToolButton_Lunar.Location.X, 10);
			this.zhToolButton_Marquee.Location = new System.Drawing.Point(this.zhToolButton_Marquee.Location.X, 10);
			this.zhToolButton_Noise.Location = new System.Drawing.Point(this.zhToolButton_Noise.Location.X, 10);
			this.zhToolButton_Play.Location = new System.Drawing.Point(this.zhToolButton_Play.Location.X, 10);
			this.zhToolButton_Score.Location = new System.Drawing.Point(this.zhToolButton_Score.Location.X, 10);
			this.zhToolButton_Send.Location = new System.Drawing.Point(this.zhToolButton_Send.Location.X, 10);
			this.zhToolButton_Temperature.Location = new System.Drawing.Point(this.zhToolButton_Temperature.Location.X, 10);
			this.zhToolButton_Weather.Location = new System.Drawing.Point(this.zhToolButton_Weather.Location.X, 10);
			this.zhToolButton_String.Location = new System.Drawing.Point(this.zhToolButton_String.Location.X, 10);
			this.zhToolButton_Text.Location = new System.Drawing.Point(this.zhToolButton_Text.Location.X, 10);
			this.zhToolButton_Animation.Location = new System.Drawing.Point(this.zhToolButton_Animation.Location.X, 10);
			this.zhToolButton_Usb.Location = new System.Drawing.Point(this.zhToolButton_Usb.Location.X, 10);
			this.zhToolButton_Delete.Location = new System.Drawing.Point(this.zhToolButton_Delete.Location.X, 10);
		}

		private void ButtonText_set_visible()
		{
			this.zhToolButton_Open_Text.Visible = false;
			this.zhToolButton_Save_Text.Visible = false;
			this.zhToolButton_Item_Text.Visible = false;
			this.zhToolButton_Clock_Text.Visible = false;
			this.zhToolButton_Counter_Text.Visible = false;
			this.zhToolButton_Dial_Text.Visible = false;
			this.zhToolButton_FindDevice_Text.Visible = false;
			this.zhToolButton_FindDeviceWifi_Text.Visible = false;
			this.zhToolButton_Lunar_Text.Visible = false;
			this.zhToolButton_Marquee_Text.Visible = false;
			this.zhToolButton_Play_Text.Visible = false;
			this.zhToolButton_Send_Text.Visible = false;
			this.zhToolButton_Temperature_Text.Visible = false;
			this.zhToolButton_Weather_Text.Visible = false;
			this.zhToolButton_String_Text.Visible = false;
			this.zhToolButton_Text_Text.Visible = false;
			this.zhToolButton_Animation_Text.Visible = false;
			this.zhToolButton_Usb_Text.Visible = false;
			this.zhToolButton_Delete_Text.Visible = false;
			this.zhToolbutton_location_OtherLanguage();
			this.toolTip_picture_formain.InitialDelay = 100;
			this.toolTip_picture_formain.ReshowDelay = 100;
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Open, formMain.ML.GetStr("UpdateButton_Open"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Save, formMain.ML.GetStr("UpdateButton_Save"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Item, formMain.ML.GetStr("UpdateButton_Display_Item"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Clock, formMain.ML.GetStr("UpdateButton_Time"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Counter, formMain.ML.GetStr("UpdateButton_Counter"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Dial, formMain.ML.GetStr("UpdateButton_Dial"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_FindDevice, formMain.ML.GetStr("UpdateButton_FindDevice"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_FindDeviceWifi, formMain.ML.GetStr("UpdateButton_FindDeviceWifi"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Humidity, formMain.ML.GetStr("UpdateButton_Humidity"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Lunar, formMain.ML.GetStr("UpdateButton_Lunar"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Marquee, formMain.ML.GetStr("UpdateButton_PictureText"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Noise, formMain.ML.GetStr("UpdateButton_Noise"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Play, formMain.ML.GetStr("UpdateButton_Preview"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Score, formMain.ML.GetStr("UpdateButton_Score"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Send, formMain.ML.GetStr("UpdateButton_Send"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Temperature, formMain.ML.GetStr("UpdateButton_Temperature"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Weather, formMain.ML.GetStr("UpdateButton_Weather"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_String, formMain.ML.GetStr("UpdateButton_String"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Text, formMain.ML.GetStr("UpdateButton_Subtitle"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Animation, formMain.ML.GetStr("UpdateButton_Animation"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Usb, formMain.ML.GetStr("UpdateButton_USB"));
			this.toolTip_picture_formain.SetToolTip(this.zhToolButton_Delete, formMain.ML.GetStr("UpdateButton_Delete"));
		}

		private void UpdateButtonText()
		{
			this.toolTip_picture_formain.RemoveAll();
			this.zhToolButton_Open_Text.Visible = true;
			this.zhToolButton_Item_Text.Visible = true;
			this.zhToolButton_Clock_Text.Visible = true;
			this.zhToolButton_Counter_Text.Visible = true;
			this.zhToolButton_Dial_Text.Visible = true;
			this.zhToolButton_FindDeviceWifi_Text.Visible = true;
			this.zhToolButton_Lunar_Text.Visible = !formMain.IsforeignTradeMode;
			this.zhToolButton_Marquee_Text.Visible = true;
			this.zhToolButton_Play_Text.Visible = true;
			this.zhToolButton_Send_Text.Visible = true;
			this.zhToolButton_Temperature_Text.Visible = true;
			this.zhToolButton_Weather_Text.Visible = !formMain.IsforeignTradeMode;
			this.zhToolButton_String_Text.Visible = (!formMain.IsforeignTradeMode && formMain.stringSubareaEnabled);
			this.zhToolButton_Text_Text.Visible = true;
			this.zhToolButton_Animation_Text.Visible = true;
			this.zhToolButton_Usb_Text.Visible = true;
			this.zhToolButton_Delete_Text.Visible = true;
			this.zhToolbutton_location_ZH_CN();
			this.zhToolButton_Open_Text.Text = formMain.ML.GetStr("UpdateButton_Open");
			this.zhToolButton_Save_Text.Text = formMain.ML.GetStr("UpdateButton_Save");
			this.zhToolButton_Item_Text.Text = formMain.ML.GetStr("UpdateButton_Display_Item");
			this.zhToolButton_Clock_Text.Text = formMain.ML.GetStr("UpdateButton_Time");
			this.zhToolButton_Counter_Text.Text = formMain.ML.GetStr("UpdateButton_Counter");
			this.zhToolButton_Dial_Text.Text = formMain.ML.GetStr("UpdateButton_Dial");
			this.zhToolButton_FindDevice_Text.Text = formMain.ML.GetStr("UpdateButton_FindDevice");
			this.zhToolButton_FindDeviceWifi_Text.Text = formMain.ML.GetStr("UpdateButton_FindDeviceWifi");
			this.zhToolButton_Humidity_Text.Text = formMain.ML.GetStr("UpdateButton_Humidity");
			this.zhToolButton_Lunar_Text.Text = formMain.ML.GetStr("UpdateButton_Lunar");
			this.zhToolButton_Marquee_Text.Text = formMain.ML.GetStr("UpdateButton_PictureText");
			this.zhToolButton_Noise_Text.Text = formMain.ML.GetStr("UpdateButton_Noise");
			this.zhToolButton_Play_Text.Text = formMain.ML.GetStr("UpdateButton_Preview");
			this.zhToolButton_Score_Text.Text = formMain.ML.GetStr("UpdateButton_Score");
			this.zhToolButton_Send_Text.Text = formMain.ML.GetStr("UpdateButton_Send");
			this.zhToolButton_Temperature_Text.Text = formMain.ML.GetStr("UpdateButton_Temperature");
			this.zhToolButton_Weather_Text.Text = formMain.ML.GetStr("UpdateButton_Weather");
			this.zhToolButton_String_Text.Text = formMain.ML.GetStr("UpdateButton_String");
			this.zhToolButton_Text_Text.Text = formMain.ML.GetStr("UpdateButton_Subtitle");
			this.zhToolButton_Animation_Text.Text = formMain.ML.GetStr("UpdateButton_Animation");
			this.zhToolButton_Usb_Text.Text = formMain.ML.GetStr("UpdateButton_USB");
			this.zhToolButton_Delete_Text.Text = formMain.ML.GetStr("UpdateButton_Delete");
		}

		private void SetComboxDropStyle()
		{
			this.edgeListComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.edgeSpeedComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.edgeModeComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.effectExitSpeed.DropDownStyle = ComboBoxStyle.DropDownList;
			this.effectExitType.DropDownStyle = ComboBoxStyle.DropDownList;
			this.effectEntrySpeed.DropDownStyle = ComboBoxStyle.DropDownList;
			this.effectEntryType.DropDownStyle = ComboBoxStyle.DropDownList;
			this.cmbWeatherEntryMode.DropDownStyle = ComboBoxStyle.DropDownList;
			this.cmbWeatherEntrySpeed.DropDownStyle = ComboBoxStyle.DropDownList;
			this.cmbStringEntryMode.DropDownStyle = ComboBoxStyle.DropDownList;
			this.cmbStringEntrySpeed.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialComboBoxHandStyle.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialComboBoxScaleShape.DropDownStyle = ComboBoxStyle.DropDownList;
			this.temperatureAlarmOutput.DropDownStyle = ComboBoxStyle.DropDownList;
			this.temperatureAlarmType.DropDownStyle = ComboBoxStyle.DropDownList;
			this.itemEdgeSpeed.DropDownStyle = ComboBoxStyle.DropDownList;
			this.itemEdgeMode.DropDownStyle = ComboBoxStyle.DropDownList;
			this.itemEdgeList.DropDownStyle = ComboBoxStyle.DropDownList;
			this.itemBackgroundSpeed.DropDownStyle = ComboBoxStyle.DropDownList;
			this.itemBackgroundSizeModel.DropDownStyle = ComboBoxStyle.DropDownList;
			this.effectStay.DropDownStyle = ComboBoxStyle.DropDownList;
			this.itemBackgroundGradation.DropDownStyle = ComboBoxStyle.DropDownList;
			this.effectLoop.DropDownStyle = ComboBoxStyle.DropDownList;
			this.contentBackgroundSize.DropDownStyle = ComboBoxStyle.DropDownList;
			this.contentBackgroundGradition.DropDownStyle = ComboBoxStyle.DropDownList;
			this.contentBackgroundSpeed.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewLineModel.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewFontSize.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewFontFamily.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewTimeColorComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewTimeStyleComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewWeekColorComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewWeekStyleComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewContentColorComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewDateColorComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.clockNewDateStyleComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialHandColorSecond.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialHandColorMinute.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialHandColorHour.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialHandColorScaleMinute.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialHandColorScaleColorHour.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialHandColorScale369.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialFontSizeComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialFontComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialTimeJetType.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialFontColorComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dialConnerTextTextBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewSize.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewFont.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewLineModel.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewColor.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewContentColorComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewSecondUnit.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewMinuteUnit.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewHourUnit.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewYearUnit.DropDownStyle = ComboBoxStyle.DropDownList;
			this.counterNewDayUnit.DropDownStyle = ComboBoxStyle.DropDownList;
			this.temperatureColorComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.temperatureSizeComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.temperatureFontComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.temperatureLineModelComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
			this.temperatureDegreeUnitComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
		}

		private void CheckOcxReg()
		{
			if (!this.CheckRegistredOcx("CLSID\\{D27CDB70-AE6D-11cf-96B8-444553540000}"))
			{
				Process process = new Process();
				process.StartInfo.WorkingDirectory = Application.StartupPath;
				process.StartInfo.FileName = "regocx.bat";
				process.StartInfo.UseShellExecute = false;
				process.StartInfo.RedirectStandardError = true;
				process.StartInfo.RedirectStandardOutput = true;
				process.Start();
				process.StandardOutput.ReadToEnd();
				process.StandardError.ReadToEnd();
			}
		}

		private void CheckDataDir()
		{
			if (File.Exists(Application.StartupPath + "\\Config.ini"))
			{
				formMain.isGreen = true;
				Settings.Default.ProjectDir = Application.StartupPath + "\\LedData";
			}
			else
			{
				formMain.isGreen = false;
				Settings.Default.ProjectDir = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\LedControlSystem Files\\" + formMain.ledTitleVersion;
				if (!Directory.Exists(Settings.Default.ProjectDir))
				{
					Directory.CreateDirectory(Settings.Default.ProjectDir);
				}
			}
			if (string.IsNullOrEmpty(Settings.Default.ProjectName))
			{
				Settings.Default.ProjectName = "led.zhled";
			}
			if (string.IsNullOrEmpty(Settings.Default.ProjectCloudName))
			{
				Settings.Default.ProjectCloudName = "ledcloud.zhledcloud";
			}
			if (Settings.Default.Template == "")
			{
				Settings.Default.Template = "Classic1";
			}
			Settings.Default.Save();
			LedCommonConst.ProjectSaveDirectory = Settings.Default.ProjectDir;
		}

		private void InitForm()
		{
			LedGlobal.CloudServerAccessMode = LedCloudServerAccessMode.Domain;
			LedGlobal.CloudServerIPAddress = string.Empty;
			LedGlobal.CloudServerDomainName = "shc.zhonghangled.com";
			switch (Settings.Default.RunMode)
			{
			case 0:
				LedGlobal.CloudServerAccessMode = LedCloudServerAccessMode.Ip;
				LedGlobal.CloudServerIPAddress = "123.56.112.5";
				LedGlobal.CloudServerDomainName = string.Empty;
				CommonConst.CloudServer = "http://123.56.112.5";
				CommonConst.WeatherServer = "http://123.56.112.5";
				CommonConst.Weather_Forecast7d = "/zcc/api/1.0/weather/forecast7d";
				CommonConst.Weather_Observe = "/zcc/api/1.0/weather/observe";
				CommonConst.Weather_Weatherindex = "/zcc/api/1.0/weather/weatherindex";
				CommonConst.Weather_Air = "/zcc/api/1.0/weather/air";
				CommonConst.Weather_AQI = "/zcc/api/1.0/weather/aqi";
				CommonConst.Weather_Alarminfo = "/zcc/api/1.0/weather/alarminfo";
				CommonConst.Weather_Citylist = "/zcc/api/1.0/weather/cities";
				break;
			case 1:
				LedGlobal.CloudServerAccessMode = LedCloudServerAccessMode.Domain;
				LedGlobal.CloudServerIPAddress = string.Empty;
				LedGlobal.CloudServerDomainName = "shc.zhonghangled.com";
				CommonConst.CloudServer = "http://shc.zhonghangled.com";
				CommonConst.WeatherServer = "http://shc.zhonghangled.com";
				CommonConst.Weather_Forecast7d = "/zcc/api/1.0/weather/forecast7d";
				CommonConst.Weather_Observe = "/zcc/api/1.0/weather/observe";
				CommonConst.Weather_Weatherindex = "/zcc/api/1.0/weather/weatherindex";
				CommonConst.Weather_Air = "/zcc/api/1.0/weather/air";
				CommonConst.Weather_AQI = "/zcc/api/1.0/weather/aqi";
				CommonConst.Weather_Alarminfo = "/zcc/api/1.0/weather/alarminfo";
				CommonConst.Weather_Citylist = "/zcc/api/1.0/weather/cities";
				break;
			default:
				Settings.Default.RunMode = 1;
				Settings.Default.Save();
				break;
			}
			LedGlobal.IsWiFiProductionTest = Settings.Default.WiFiProductionTest;
			LedGlobal.IsBmpSaveToFile = true;
			this.InitModeInfo();
			this.RegulateContentAttribute();
			if (Screen.PrimaryScreen.Bounds.Width >= 1024 && Screen.PrimaryScreen.Bounds.Height >= 768)
			{
				base.Size = new System.Drawing.Size(1004, 668);
			}
			formMain.projectDir = Settings.Default.ProjectDir;
			formMain.projectName = Settings.Default.ProjectName;
			formMain.projectCloudName = Settings.Default.ProjectCloudName;
			formMain.projectPath = formMain.projectDir + "\\" + formMain.projectName;
			formMain.projectCloudPath = formMain.projectDir + "\\Cloud\\{0}\\" + formMain.projectCloudName;
			formMain.languagePath = Application.StartupPath + "\\Language\\";
			if (!File.Exists(formMain.projectPath))
			{
				formMain.projectName = (Settings.Default.ProjectName = "led.zhled");
				formMain.projectPath = formMain.projectDir + "\\" + formMain.projectName;
				Settings.Default.Save();
			}
			this.LoadEdge();
			this.InitParam();
			if (this.LoadProjectVersion(formMain.projectPath) == 0 && MessageBox.Show(this, string.Format(formMain.ML.GetStr("Prompt_VersionIncompatible_ContinueOrNot"), "\r\n", MessageBoxManager.Yes, MessageBoxManager.No), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
			{
				Application.Exit();
			}
			this.LoadProject();
			this.marqueeTextEditor.VisibleChanged += new EventHandler(this.marqueeTextEditor_VisibleChanged);
			this.marqueeTextEditor.UpdateEvent += new LedGlobal.LedContentEvent(this.marqueeTextEditor_UpdateEvent);
			this.textEditor1.UpdateEvent += new LedGlobal.LedContentEvent(this.textEditor1_UpdateEvent);
			this.lunarEditor1.UpdateEvent += new LedGlobal.LedContentEvent(this.textEditor1_UpdateEvent);
			this.weatherEditor1.UpdateEvent += new LedGlobal.LedContentEvent(this.textEditor1_UpdateEvent);
			this.stringEditor1.UpdateEvent += new LedGlobal.LedContentEvent(this.textEditor1_UpdateEvent);
			this.subareaLocaltionX.Controls[1].TextChanged += new EventHandler(this.subareaLocaltionX_TextChanged);
			this.subareaLocaltionY.Controls[1].TextChanged += new EventHandler(this.subareaLocaltionY_TextChanged);
			this.subareaSizeWidth.Controls[1].TextChanged += new EventHandler(this.subareaSizeWidth_TextChanged);
			this.subareaSizeHeight.Controls[1].TextChanged += new EventHandler(this.subareaSizeHeight_TextChanged);
			this.subareaLocaltionX.MouseWheel += new MouseEventHandler(this.subareaLocaltionX_MouseWheel);
			this.subareaLocaltionY.MouseWheel += new MouseEventHandler(this.subareaLocaltionY_MouseWheel);
			this.subareaSizeWidth.MouseWheel += new MouseEventHandler(this.subareaSizeWidth_MouseWheel);
			this.subareaSizeHeight.MouseWheel += new MouseEventHandler(this.subareaSizeHeight_MouseWheel);
		}

		public void InitMaterialDataList()
		{
			try
			{
				if (!this.MaterialPathStatus())
				{
					this.FillMaterials();
				}
				else
				{
					this.InquireMaterialFile();
				}
			}
			catch
			{
			}
		}

		public void InitEffectDataList()
		{
			try
			{
				Stream serializationStream = new MemoryStream(Resources.eflist);
				LedGlobal.LedEffectsList = (IList<LedEffects>)this.binFor.Deserialize(serializationStream);
			}
			catch
			{
			}
		}

		public void InitCityDataList()
		{
			formMain.isInitCityData = true;
			new Thread(new ThreadStart(this.GetCityDataList))
			{
				IsBackground = true
			}.Start();
		}

		private void GetCityDataList()
		{
			IList<LedProvince> list = formMain.GetProvinceListFromFile();
			IList<LedProvince> list2 = new List<LedProvince>();
			bool flag = false;
			bool flag2 = false;
			if (list != null && list.Count > 0)
			{
				flag = true;
				if (flag && LedGlobal.LedProvinceList == null)
				{
					LedGlobal.LedProvinceList = new List<LedProvince>();
				}
			}
			try
			{
				if (!flag)
				{
					LedGlobal.LedProvinceList = new List<LedProvince>();
					WeatherService weatherService = new WeatherService();
					IList<ProvinceInfo> provinces = weatherService.GetProvinces();
					if (provinces != null && provinces.Count > 0)
					{
						foreach (ProvinceInfo current in provinces)
						{
							string iD = current.ID;
							string name = current.Name;
							IList<LedCity> list3 = new List<LedCity>();
							foreach (CityInfo current2 in current.CityInfos)
							{
								string iD2 = current2.ID;
								string name2 = current2.Name;
								IList<LedDistrict> list4 = new List<LedDistrict>();
								foreach (DistrictInfo current3 in current2.DistrictInfos)
								{
									string iD3 = current3.ID;
									string name3 = current3.Name;
									list4.Add(new LedDistrict
									{
										ID = iD3,
										Name = name3
									});
								}
								list3.Add(new LedCity
								{
									ID = iD2,
									Name = name2,
									Districts = list4
								});
							}
							list2.Add(new LedProvince
							{
								ID = iD,
								Name = name,
								Cities = list3
							});
						}
					}
					if (list2 != null && list2.Count > 0)
					{
						flag = true;
						flag2 = true;
					}
				}
			}
			catch
			{
				flag = false;
			}
			finally
			{
				if (!flag)
				{
					try
					{
						Stream serializationStream = new MemoryStream(Resources.provincelist);
						list2 = (IList<LedProvince>)this.binFor.Deserialize(serializationStream);
					}
					catch
					{
					}
				}
				if (list == null || list.Count == 0)
				{
					if (list2 != null && list2.Count > 0)
					{
						for (int i = 0; i < list2.Count; i++)
						{
							LedProvince ledProvince = new LedProvince();
							ledProvince.Copy(list2[i]);
							LedGlobal.LedProvinceList.Add(ledProvince);
						}
					}
				}
				else if (list2 == null || list2.Count == 0)
				{
					for (int j = 0; j < list.Count; j++)
					{
						LedProvince ledProvince2 = new LedProvince();
						ledProvince2.Copy(list[j]);
						LedGlobal.LedProvinceList.Add(ledProvince2);
					}
				}
				else
				{
					((List<LedProvince>)list).AddRange(list2);
					for (int k = 0; k < list.Count; k++)
					{
						LedProvince ledProvince3 = list[k];
						bool flag3 = false;
						foreach (LedProvince current4 in LedGlobal.LedProvinceList)
						{
							if (current4.ID == ledProvince3.ID)
							{
								flag3 = true;
								break;
							}
						}
						if (!flag3)
						{
							LedProvince ledProvince4 = new LedProvince();
							ledProvince4.Copy(ledProvince3);
							LedGlobal.LedProvinceList.Add(ledProvince4);
						}
					}
				}
			}
			if (list2 != null)
			{
				for (int l = 0; l < list2.Count; l++)
				{
					list2[l].Dispose();
					list2[l] = null;
				}
				list2.Clear();
				list2 = null;
			}
			if (list != null)
			{
				for (int m = 0; m < list.Count; m++)
				{
					list[m].Dispose();
					list[m] = null;
				}
				list.Clear();
				list = null;
			}
			if (flag2)
			{
				formMain.SaveProvinceListToFile();
			}
			formMain.isInitCityData = false;
			base.Invoke(new MethodInvoker(delegate
			{
				if (formMain.updateWeatherProvinceEvent != null)
				{
					formMain.updateWeatherProvinceEvent();
				}
			}));
		}

		public static IList<LedProvince> GetProvinceListFromResource()
		{
			IList<LedProvince> result = null;
			try
			{
				Stream serializationStream = new MemoryStream(Resources.provincelist);
				BinaryFormatter binaryFormatter = new BinaryFormatter();
				result = (IList<LedProvince>)binaryFormatter.Deserialize(serializationStream);
			}
			catch
			{
				result = null;
			}
			return result;
		}

		public static IList<LedProvince> GetProvinceListFromFile()
		{
			IList<LedProvince> result = null;
			try
			{
				string text = Application.StartupPath + "\\provinces";
				if (File.Exists(text))
				{
					FileInfo fileInfo = new FileInfo(text);
					if ((DateTime.Now - fileInfo.LastWriteTime).TotalDays < 90.0)
					{
						StreamReader streamReader = new StreamReader(text);
						BinaryFormatter binaryFormatter = new BinaryFormatter();
						result = (IList<LedProvince>)binaryFormatter.Deserialize(streamReader.BaseStream);
						streamReader.Close();
					}
				}
			}
			catch
			{
				result = null;
			}
			return result;
		}

		public static void SaveProvinceListToFile()
		{
			try
			{
				if (LedGlobal.LedProvinceList != null && LedGlobal.LedProvinceList.Count != 0)
				{
					BinaryFormatter binaryFormatter = new BinaryFormatter();
					StreamWriter streamWriter = new StreamWriter(Application.StartupPath + "\\provinces");
					binaryFormatter.Serialize(streamWriter.BaseStream, LedGlobal.LedProvinceList);
					streamWriter.Close();
				}
			}
			catch
			{
			}
		}

		public static bool GetColorComboBoxEnable(bool pEnable)
		{
			if (pEnable)
			{
				return formMain.ledsys.SelectedPanel.ColorMode != (LedColorMode)0;
			}
			return pEnable;
		}

		private void textEditor1_UpdateEvent(LedContentEventType type, object sender)
		{
			this.RedrawSubarea();
		}

		public void SetWaittingPanelVisable(bool pBool)
		{
			if (base.Controls != null && base.Controls.Count > 0)
			{
				foreach (Control control in base.Controls)
				{
					if (control != null && control.Name != "panel_Waitting")
					{
						control.Enabled = !pBool;
					}
				}
			}
			if (pBool)
			{
				this.panel_Waitting.Location = new System.Drawing.Point((base.Width - this.panel_Waitting.Width) / 2, (base.Height - this.panel_Waitting.Height) / 2);
				this.panel_Waitting.Visible = true;
				this.panel_Waitting.BringToFront();
				this.panel_Waitting.Refresh();
				return;
			}
			this.panel_Waitting.Visible = false;
			this.panel_Waitting.SendToBack();
		}

		private void mainForm_Load(object sender, EventArgs e)
		{
			if (Program.IsforeignTradeMode)
			{
				this.picLogo.Image = Resources.AppIconV5.ToBitmap();
			}
			else
			{
				this.picLogo.Image = Resources.AppIcon.ToBitmap();
			}
			MessageBoxManager.OK = formMain.ML.GetStr("Global_Messagebox_OK");
			MessageBoxManager.Cancel = formMain.ML.GetStr("Global_Messagebox_Cancel");
			MessageBoxManager.Yes = formMain.ML.GetStr("Global_Messagebox_Yes");
			MessageBoxManager.No = formMain.ML.GetStr("Global_Messagebox_No");
			MessageBoxManager.Register();
			this.ShowMessage("15");
			if (Program.IsforeignTradeMode)
			{
				base.Icon = Resources.AppIconV5;
			}
			else
			{
				base.Icon = Resources.AppIcon;
			}
			this.ShowMessage("16");
			this.SetComboxDropStyle();
			this.ShowMessage("17");
			base.Controls.Add(this.panel_Waitting);
			this.ShowMessage("18");
			this.LoadLanguage();
			this.ShowMessage("19");
			this.marqueeTextEditor = new formText();
			this.ShowMessage("20");
			base.MouseWheel += new MouseEventHandler(this.formMain_MouseWheel);
			this.ShowMessage("21");
			this.MenuMouseEvent();
			this.ShowMessage("22");
			formMain.movieBackgroundparamName = Resources.movieBackgroundName.Split(new char[]
			{
				','
			});
			this.ShowMessage("23");
			formMain.movieBackgroundParamValue = Resources.movieBackgroundParamAndValue.Split(new string[]
			{
				"/******"
			}, StringSplitOptions.RemoveEmptyEntries);
			this.ShowMessage("24");
			formMain.MovieBackgroundParamXML = Resources.movieBackgroundXML.Split(new string[]
			{
				"/******"
			}, StringSplitOptions.RemoveEmptyEntries);
			this.ShowMessage("25");
			if (Global.isLoadFinish)
			{
				this.ShowMessage("26");
			}
			this.ShowMessage("27");
			this.ShowMessage("28");
			this.InitForm();
			this.ShowMessage("29");
			this.ShowMessage("33");
			int num = 524288;
			this.ShowMessage("34");
			int windowLong = formMain.GetWindowLong(new HandleRef(this, base.Handle), -16);
			this.ShowMessage("35");
			formMain.SetWindowLong(new HandleRef(this, base.Handle), -16, windowLong | num);
			this.ShowMessage("36");
			base.MaximizedBounds = Screen.PrimaryScreen.WorkingArea;
			this.ShowMessage("37");
			this.ShowMessage("38");
			formMain.FrameRate = Settings.Default.FrameRate;
			this.ShowMessage("39");
			this.ShowMessage("40");
			this.InitEffectDataList();
			this.ShowMessage("41");
			this.InitCityDataList();
			this.InitMaterialDataList();
			this.ShowMessage("41.5");
			this.animationEditor1.Event += new AnimationEvent(this.animationEditor1_Event);
			this.ShowMessage("42");
			this.animationEffect1.Event += new AnimationEvent(this.animationEditor1_Event);
			this.ShowMessage("43");
			this.ButtonList.Add(this.zhToolButton_Open);
			this.ShowMessage("44");
			this.ButtonList.Add(this.zhToolButton_Save);
			this.ShowMessage("45");
			this.ButtonList.Add(this.zhToolButton_Item);
			this.ShowMessage("46");
			this.ButtonList.Add(this.zhToolButton_Text);
			this.ButtonList.Add(this.zhToolButton_Animation);
			this.ButtonList.Add(this.zhToolButton_Marquee);
			this.ButtonList.Add(this.zhToolButton_Clock);
			this.ButtonList.Add(this.zhToolButton_Dial);
			this.ButtonList.Add(this.zhToolButton_Counter);
			this.ButtonList.Add(this.zhToolButton_Lunar);
			this.ButtonList.Add(this.zhToolButton_Temperature);
			this.ButtonList.Add(this.zhToolButton_Weather);
			this.ButtonList.Add(this.zhToolButton_String);
			this.ButtonList.Add(this.zhToolButton_Delete);
			this.ButtonList.Add(this.zhToolButton_FindDevice);
			this.ButtonList.Add(this.zhToolButton_FindDeviceWifi);
			this.ButtonList.Add(this.zhToolButton_Play);
			this.ButtonList.Add(this.zhToolButton_Send);
			this.ButtonList.Add(this.zhToolButton_Usb);
			this.ShowMessage("47");
			this.ButtonTextList.Add(this.zhToolButton_Open_Text);
			this.ButtonTextList.Add(this.zhToolButton_Save_Text);
			this.ButtonTextList.Add(this.zhToolButton_Item_Text);
			this.ButtonTextList.Add(this.zhToolButton_Text_Text);
			this.ButtonTextList.Add(this.zhToolButton_Animation_Text);
			this.ButtonTextList.Add(this.zhToolButton_Marquee_Text);
			this.ButtonTextList.Add(this.zhToolButton_Clock_Text);
			this.ButtonTextList.Add(this.zhToolButton_Dial_Text);
			this.ButtonTextList.Add(this.zhToolButton_Counter_Text);
			this.ButtonTextList.Add(this.zhToolButton_Lunar_Text);
			this.ButtonTextList.Add(this.zhToolButton_Temperature_Text);
			this.ButtonTextList.Add(this.zhToolButton_Weather_Text);
			this.ButtonTextList.Add(this.zhToolButton_String_Text);
			this.ButtonTextList.Add(this.zhToolButton_Delete_Text);
			this.ButtonTextList.Add(this.zhToolButton_FindDevice_Text);
			this.ButtonTextList.Add(this.zhToolButton_FindDeviceWifi_Text);
			this.ButtonTextList.Add(this.zhToolButton_Play_Text);
			this.ButtonTextList.Add(this.zhToolButton_Send_Text);
			this.ButtonTextList.Add(this.zhToolButton_Usb_Text);
			this.ShowMessage("48");
			this.SetLabelAttri(this.zhToolButton_Open_Text);
			this.SetLabelAttri(this.zhToolButton_Save_Text);
			this.SetLabelAttri(this.zhToolButton_Item_Text);
			this.SetLabelAttri(this.zhToolButton_Text_Text);
			this.SetLabelAttri(this.zhToolButton_Animation_Text);
			this.SetLabelAttri(this.zhToolButton_Marquee_Text);
			this.SetLabelAttri(this.zhToolButton_Clock_Text);
			this.SetLabelAttri(this.zhToolButton_Dial_Text);
			this.SetLabelAttri(this.zhToolButton_Counter_Text);
			this.SetLabelAttri(this.zhToolButton_Lunar_Text);
			this.SetLabelAttri(this.zhToolButton_Temperature_Text);
			this.SetLabelAttri(this.zhToolButton_Weather_Text);
			this.SetLabelAttri(this.zhToolButton_String_Text);
			this.SetLabelAttri(this.zhToolButton_Delete_Text);
			this.SetLabelAttri(this.zhToolButton_FindDevice_Text);
			this.SetLabelAttri(this.zhToolButton_FindDeviceWifi_Text);
			this.SetLabelAttri(this.zhToolButton_Play_Text);
			this.SetLabelAttri(this.zhToolButton_Send_Text);
			this.SetLabelAttri(this.zhToolButton_Usb_Text);
			this.zhToolButton_Humidity_Text.Visible = false;
			this.zhToolButton_Noise_Text.Visible = false;
			this.zhToolButton_Score_Text.Visible = false;
			this.ShowMessage("49");
			this.zhToolButton_Open.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Save.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Item.BackColor = System.Drawing.Color.Transparent;
			this.ShowMessage("50");
			this.zhToolButton_Text.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Animation.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Marquee.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Clock.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Dial.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Counter.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Lunar.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Temperature.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Weather.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_String.BackColor = System.Drawing.Color.Transparent;
			this.ShowMessage("51");
			this.zhToolButton_Delete.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_FindDevice.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_FindDeviceWifi.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Play.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Send.BackColor = System.Drawing.Color.Transparent;
			this.zhToolButton_Usb.BackColor = System.Drawing.Color.Transparent;
			this.ShowMessage("52");
			this.zhToolButton_Lunar.Visible = !formMain.IsforeignTradeMode;
			this.zhToolButton_FindDevice.Visible = false;
			this.zhToolButton_Weather.Visible = !formMain.IsforeignTradeMode;
			this.zhToolButton_String.Visible = (!formMain.IsforeignTradeMode && formMain.stringSubareaEnabled);
			this.addLunarToolStripMenuItem.Visible = !formMain.IsforeignTradeMode;
			this.addWeatherToolStripMenuItem.Visible = !formMain.IsforeignTradeMode;
			this.addStringToolStripMenuItem.Visible = (!formMain.IsforeignTradeMode && formMain.stringSubareaEnabled);
			this.EditStringLibraryToolStripMenuItem.Visible = (!formMain.IsforeignTradeMode && formMain.stringSubareaEnabled);
			this.addLunarContentToolStripMenuItem.Visible = !formMain.IsforeignTradeMode;
			this.addWeatherContentToolStripMenuItem.Visible = !formMain.IsforeignTradeMode;
			this.addStringContentToolStripMenuItem.Visible = (!formMain.IsforeignTradeMode && formMain.stringSubareaEnabled);
			this.tsmissAddLunar.Visible = !formMain.IsforeignTradeMode;
			this.tsmissAddWeather.Visible = !formMain.IsforeignTradeMode;
			this.tsmissAddString.Visible = (!formMain.IsforeignTradeMode && formMain.stringSubareaEnabled);
			this.ButtonVisibleList.Add(this.zhToolButton_Open.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Save.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Item.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Text.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Animation.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Marquee.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Clock.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Dial.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Counter.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Lunar.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Temperature.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Weather.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_String.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Delete.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_FindDevice.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_FindDeviceWifi.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Play.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Send.Visible);
			this.ButtonVisibleList.Add(this.zhToolButton_Usb.Visible);
			this.ShowMessage("53");
			string text = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec";
			string[] array = text.Split(new char[]
			{
				','
			});
			DateTime now = DateTime.Now;
			this.ShowMessage("55");
			this.clockNewDateStyleComboBox.Items.Clear();
			this.clockNewWeekStyleComboBox.Items.Clear();
			this.clockNewTimeStyleComboBox.Items.Clear();
			this.counterNewYearUnit.Items.Clear();
			this.counterNewDayUnit.Items.Clear();
			this.counterNewHourUnit.Items.Clear();
			this.counterNewMinuteUnit.Items.Clear();
			this.counterNewSecondUnit.Items.Clear();
			this.temperatureDegreeUnitComboBox.Items.Clear();
			if (!formMain.IsforeignTradeMode)
			{
				ComboBox.ObjectCollection arg_C52_0 = this.clockNewDateStyleComboBox.Items;
				string[] array2 = new string[6];
				string[] arg_BFD_0 = array2;
				int arg_BFD_1 = 0;
				int num2 = now.Year;
				arg_BFD_0[arg_BFD_1] = num2.ToString("d4");
				array2[1] = "年";
				array2[2] = now.Month.ToString("d2");
				array2[3] = "月";
				array2[4] = now.Day.ToString("d2");
				array2[5] = "日";
				arg_C52_0.Add(string.Concat(array2));
				this.clockNewDateStyleComboBox.Items.Add(string.Concat(new string[]
				{
					(now.Year % 100).ToString("d2"),
					"年",
					now.Month.ToString("d2"),
					"月",
					now.Day.ToString("d2"),
					"日"
				}));
				this.clockNewDateStyleComboBox.Items.Add(string.Concat(new string[]
				{
					now.Year.ToString("d4"),
					"/",
					now.Month.ToString("d2"),
					"/",
					now.Day.ToString("d2")
				}));
				this.clockNewDateStyleComboBox.Items.Add(string.Concat(new string[]
				{
					(now.Year % 100).ToString("d2"),
					"/",
					now.Month.ToString("d2"),
					"/",
					now.Day.ToString("d2")
				}));
				this.clockNewDateStyleComboBox.Items.Add(string.Concat(new string[]
				{
					now.Month.ToString("d2"),
					"/",
					now.Day.ToString("d2"),
					"/",
					now.Year.ToString("d4")
				}));
				this.clockNewDateStyleComboBox.Items.Add(string.Concat(new string[]
				{
					now.Year.ToString("d4"),
					"-",
					now.Month.ToString("d2"),
					"-",
					now.Day.ToString("d2")
				}));
				this.clockNewDateStyleComboBox.Items.Add(string.Concat(new string[]
				{
					(now.Year % 100).ToString("d2"),
					"-",
					now.Month.ToString("d2"),
					"-",
					now.Day.ToString("d2")
				}));
				this.clockNewDateStyleComboBox.Items.Add(string.Concat(new string[]
				{
					now.Month.ToString("d2"),
					"-",
					now.Day.ToString("d2"),
					"-",
					now.Year.ToString("d4")
				}));
				this.clockNewDateStyleComboBox.Items.Add(now.Year.ToString("d4") + now.Month.ToString("d2") + now.Day.ToString("d2"));
				this.clockNewDateStyleComboBox.Items.Add((now.Year % 100).ToString("d2") + now.Month.ToString("d2") + now.Day.ToString("d2"));
				this.clockNewDateStyleComboBox.Items.Add(now.Month.ToString("d2") + now.Day.ToString("d2") + now.Year.ToString("d4"));
				this.clockNewDateStyleComboBox.Items.Add(string.Concat(new string[]
				{
					array[now.Month - 1],
					" ",
					now.Day.ToString("d2"),
					" ",
					now.Year.ToString("d4")
				}));
				ComboBox.ObjectCollection arg_11BA_0 = this.clockNewDateStyleComboBox.Items;
				string[] array3 = new string[5];
				array3[0] = array[now.Month - 1];
				array3[1] = " ";
				array3[2] = now.Day.ToString("d2");
				array3[3] = " ";
				string[] arg_11B2_0 = array3;
				int arg_11B2_1 = 4;
				num2 = now.Year % 100;
				arg_11B2_0[arg_11B2_1] = num2.ToString("d2");
				arg_11BA_0.Add(string.Concat(array3));
				ComboBox.ObjectCollection arg_122D_0 = this.clockNewDateStyleComboBox.Items;
				string[] array4 = new string[5];
				string[] arg_11EB_0 = array4;
				int arg_11EB_1 = 0;
				num2 = now.Day;
				arg_11EB_0[arg_11EB_1] = num2.ToString("d2");
				array4[1] = " ";
				array4[2] = array[now.Month - 1];
				array4[3] = " ";
				string[] arg_1225_0 = array4;
				int arg_1225_1 = 4;
				num2 = now.Year;
				arg_1225_0[arg_1225_1] = num2.ToString("d4");
				arg_122D_0.Add(string.Concat(array4));
				this.clockNewWeekStyleComboBox.Items.Add("星期一");
				this.clockNewWeekStyleComboBox.Items.Add("周一");
				this.clockNewWeekStyleComboBox.Items.Add("Monday");
				this.clockNewWeekStyleComboBox.Items.Add("MON");
				this.clockNewWeekStyleComboBox.SelectedIndex = 2;
				this.clockNewTimeStyleComboBox.Items.Add("HH:MM");
				this.clockNewTimeStyleComboBox.Items.Add("HH:MM:SS");
				this.clockNewTimeStyleComboBox.Items.Add("HH时MM分SS秒");
				this.counterNewYearUnit.Items.Add("年");
				this.counterNewYearUnit.Items.Add("Y");
				this.counterNewYearUnit.Items.Add("Year");
				this.counterNewDayUnit.Items.Add("天");
				this.counterNewDayUnit.Items.Add("D");
				this.counterNewDayUnit.Items.Add("Day");
				this.counterNewHourUnit.Items.Add("时");
				this.counterNewHourUnit.Items.Add("小时");
				this.counterNewHourUnit.Items.Add("H");
				this.counterNewHourUnit.Items.Add("Hour");
				this.counterNewMinuteUnit.Items.Add("分");
				this.counterNewMinuteUnit.Items.Add("分钟");
				this.counterNewMinuteUnit.Items.Add("M");
				this.counterNewMinuteUnit.Items.Add("Minute");
				this.counterNewSecondUnit.Items.Add("秒");
				this.counterNewSecondUnit.Items.Add("秒钟");
				this.counterNewSecondUnit.Items.Add("S");
				this.counterNewSecondUnit.Items.Add("Second");
				this.temperatureDegreeUnitComboBox.Items.Add("℃");
				this.temperatureDegreeUnitComboBox.Items.Add("度");
				this.temperatureDegreeUnitComboBox.Items.Add("°");
				this.dialConnerTextCheckBox.Visible = true;
				this.dialConnerTextTextBox.Visible = true;
				this.dialLeftAndRightTextCheckBox.Visible = true;
				this.dialLeftTextTextBox.Visible = true;
				this.dialRightTextTextBox.Visible = true;
			}
			else
			{
				ComboBox.ObjectCollection arg_155F_0 = this.clockNewDateStyleComboBox.Items;
				string[] array4 = new string[5];
				string[] arg_1513_0 = array4;
				int arg_1513_1 = 0;
				int num2 = now.Year;
				arg_1513_0[arg_1513_1] = num2.ToString("d4");
				array4[1] = "/";
				string[] arg_1535_0 = array4;
				int arg_1535_1 = 2;
				num2 = now.Month;
				arg_1535_0[arg_1535_1] = num2.ToString("d2");
				array4[3] = "/";
				string[] arg_1557_0 = array4;
				int arg_1557_1 = 4;
				num2 = now.Day;
				arg_1557_0[arg_1557_1] = num2.ToString("d2");
				arg_155F_0.Add(string.Concat(array4));
				ComboBox.ObjectCollection arg_15DF_0 = this.clockNewDateStyleComboBox.Items;
				array4 = new string[5];
				string[] arg_1593_0 = array4;
				int arg_1593_1 = 0;
				num2 = now.Year % 100;
				arg_1593_0[arg_1593_1] = num2.ToString("d2");
				array4[1] = "/";
				string[] arg_15B5_0 = array4;
				int arg_15B5_1 = 2;
				num2 = now.Month;
				arg_15B5_0[arg_15B5_1] = num2.ToString("d2");
				array4[3] = "/";
				string[] arg_15D7_0 = array4;
				int arg_15D7_1 = 4;
				num2 = now.Day;
				arg_15D7_0[arg_15D7_1] = num2.ToString("d2");
				arg_15DF_0.Add(string.Concat(array4));
				ComboBox.ObjectCollection arg_165C_0 = this.clockNewDateStyleComboBox.Items;
				array4 = new string[5];
				string[] arg_1610_0 = array4;
				int arg_1610_1 = 0;
				num2 = now.Month;
				arg_1610_0[arg_1610_1] = num2.ToString("d2");
				array4[1] = "/";
				string[] arg_1632_0 = array4;
				int arg_1632_1 = 2;
				num2 = now.Day;
				arg_1632_0[arg_1632_1] = num2.ToString("d2");
				array4[3] = "/";
				string[] arg_1654_0 = array4;
				int arg_1654_1 = 4;
				num2 = now.Year;
				arg_1654_0[arg_1654_1] = num2.ToString("d4");
				arg_165C_0.Add(string.Concat(array4));
				ComboBox.ObjectCollection arg_16D9_0 = this.clockNewDateStyleComboBox.Items;
				array4 = new string[5];
				string[] arg_168D_0 = array4;
				int arg_168D_1 = 0;
				num2 = now.Year;
				arg_168D_0[arg_168D_1] = num2.ToString("d4");
				array4[1] = "-";
				string[] arg_16AF_0 = array4;
				int arg_16AF_1 = 2;
				num2 = now.Month;
				arg_16AF_0[arg_16AF_1] = num2.ToString("d2");
				array4[3] = "-";
				string[] arg_16D1_0 = array4;
				int arg_16D1_1 = 4;
				num2 = now.Day;
				arg_16D1_0[arg_16D1_1] = num2.ToString("d2");
				arg_16D9_0.Add(string.Concat(array4));
				ComboBox.ObjectCollection arg_1759_0 = this.clockNewDateStyleComboBox.Items;
				array4 = new string[5];
				string[] arg_170D_0 = array4;
				int arg_170D_1 = 0;
				num2 = now.Year % 100;
				arg_170D_0[arg_170D_1] = num2.ToString("d2");
				array4[1] = "-";
				string[] arg_172F_0 = array4;
				int arg_172F_1 = 2;
				num2 = now.Month;
				arg_172F_0[arg_172F_1] = num2.ToString("d2");
				array4[3] = "-";
				string[] arg_1751_0 = array4;
				int arg_1751_1 = 4;
				num2 = now.Day;
				arg_1751_0[arg_1751_1] = num2.ToString("d2");
				arg_1759_0.Add(string.Concat(array4));
				ComboBox.ObjectCollection arg_17D6_0 = this.clockNewDateStyleComboBox.Items;
				array4 = new string[5];
				string[] arg_178A_0 = array4;
				int arg_178A_1 = 0;
				num2 = now.Month;
				arg_178A_0[arg_178A_1] = num2.ToString("d2");
				array4[1] = "-";
				string[] arg_17AC_0 = array4;
				int arg_17AC_1 = 2;
				num2 = now.Day;
				arg_17AC_0[arg_17AC_1] = num2.ToString("d2");
				array4[3] = "-";
				string[] arg_17CE_0 = array4;
				int arg_17CE_1 = 4;
				num2 = now.Year;
				arg_17CE_0[arg_17CE_1] = num2.ToString("d4");
				arg_17D6_0.Add(string.Concat(array4));
				ComboBox.ObjectCollection arg_182B_0 = this.clockNewDateStyleComboBox.Items;
				num2 = now.Year;
				string arg_1826_0 = num2.ToString("d4");
				num2 = now.Month;
				string arg_1826_1 = num2.ToString("d2");
				num2 = now.Day;
				arg_182B_0.Add(arg_1826_0 + arg_1826_1 + num2.ToString("d2"));
				ComboBox.ObjectCollection arg_1883_0 = this.clockNewDateStyleComboBox.Items;
				num2 = now.Year % 100;
				string arg_187E_0 = num2.ToString("d2");
				num2 = now.Month;
				string arg_187E_1 = num2.ToString("d2");
				num2 = now.Day;
				arg_1883_0.Add(arg_187E_0 + arg_187E_1 + num2.ToString("d2"));
				ComboBox.ObjectCollection arg_18D8_0 = this.clockNewDateStyleComboBox.Items;
				num2 = now.Month;
				string arg_18D3_0 = num2.ToString("d2");
				num2 = now.Day;
				string arg_18D3_1 = num2.ToString("d2");
				num2 = now.Year;
				arg_18D8_0.Add(arg_18D3_0 + arg_18D3_1 + num2.ToString("d4"));
				ComboBox.ObjectCollection arg_194B_0 = this.clockNewDateStyleComboBox.Items;
				array4 = new string[5];
				array4[0] = array[now.Month - 1];
				array4[1] = " ";
				string[] arg_1921_0 = array4;
				int arg_1921_1 = 2;
				num2 = now.Day;
				arg_1921_0[arg_1921_1] = num2.ToString("d2");
				array4[3] = " ";
				string[] arg_1943_0 = array4;
				int arg_1943_1 = 4;
				num2 = now.Year;
				arg_1943_0[arg_1943_1] = num2.ToString("d4");
				arg_194B_0.Add(string.Concat(array4));
				ComboBox.ObjectCollection arg_19C1_0 = this.clockNewDateStyleComboBox.Items;
				array4 = new string[5];
				array4[0] = array[now.Month - 1];
				array4[1] = " ";
				string[] arg_1994_0 = array4;
				int arg_1994_1 = 2;
				num2 = now.Day;
				arg_1994_0[arg_1994_1] = num2.ToString("d2");
				array4[3] = " ";
				string[] arg_19B9_0 = array4;
				int arg_19B9_1 = 4;
				num2 = now.Year % 100;
				arg_19B9_0[arg_19B9_1] = num2.ToString("d2");
				arg_19C1_0.Add(string.Concat(array4));
				ComboBox.ObjectCollection arg_1A34_0 = this.clockNewDateStyleComboBox.Items;
				array4 = new string[5];
				string[] arg_19F2_0 = array4;
				int arg_19F2_1 = 0;
				num2 = now.Day;
				arg_19F2_0[arg_19F2_1] = num2.ToString("d2");
				array4[1] = " ";
				array4[2] = array[now.Month - 1];
				array4[3] = " ";
				string[] arg_1A2C_0 = array4;
				int arg_1A2C_1 = 4;
				num2 = now.Year;
				arg_1A2C_0[arg_1A2C_1] = num2.ToString("d4");
				arg_1A34_0.Add(string.Concat(array4));
				this.clockNewWeekStyleComboBox.Items.Add("Monday");
				this.clockNewWeekStyleComboBox.Items.Add("MON");
				this.clockNewTimeStyleComboBox.Items.Add("HH:MM");
				this.clockNewTimeStyleComboBox.Items.Add("HH:MM:SS");
				this.counterNewYearUnit.Items.Add("Y");
				this.counterNewYearUnit.Items.Add("Year");
				this.counterNewDayUnit.Items.Add("D");
				this.counterNewDayUnit.Items.Add("Day");
				this.counterNewHourUnit.Items.Add("H");
				this.counterNewHourUnit.Items.Add("Hour");
				this.counterNewMinuteUnit.Items.Add("M");
				this.counterNewMinuteUnit.Items.Add("Minute");
				this.counterNewSecondUnit.Items.Add("S");
				this.counterNewSecondUnit.Items.Add("Second");
				this.temperatureDegreeUnitComboBox.Items.Add("℃");
				this.temperatureDegreeUnitComboBox.Items.Add("°");
				this.dialConnerTextCheckBox.Visible = false;
				this.dialConnerTextTextBox.Visible = false;
				this.dialLeftAndRightTextCheckBox.Visible = false;
				this.dialLeftTextTextBox.Visible = false;
				this.dialRightTextTextBox.Visible = false;
			}
			this.ShowMessage("55");
			try
			{
				IList<string> fontFamilies = new FontFamiliesEx().GetFontFamilies();
				if (fontFamilies != null && fontFamilies.Count > 0)
				{
					foreach (string current in fontFamilies)
					{
						this.clockNewFontFamily.Items.Add(current);
						this.dialFontComboBox.Items.Add(current);
						this.counterNewFont.Items.Add(current);
						this.temperatureFontComboBox.Items.Add(current);
					}
				}
			}
			catch
			{
			}
			this.ShowMessage("56");
			this.ReSetButtonPosition();
			this.ShowMessage("57");
			this.MinimumSize = new System.Drawing.Size(960, 600);
			if (formMain.ledsys.SelectedPanel.Items.Count == 0)
			{
				this.DisplayPanel(this.ledTree.SelectedNode, true);
			}
			this.ShowMessage("58");
			this.AdjustComboBoxDropDownListWidth(this.effectEntryType);
			this.AdjustComboBoxDropDownListWidth(this.effectExitType);
			this.AdjustComboBoxDropDownListWidth(this.cmbWeatherEntryMode);
			this.AdjustComboBoxDropDownListWidth(this.cmbStringEntryMode);
			this.marqueePublicText.Visible = true;
			this.InitIPCServer();
			Thread.Sleep(500);
			if (this.isShowStartForm && this.starter != null)
			{
				this.starter.Close();
			}
			this.ShowMessage("30");
			Thread.Sleep(500);
			this.ShowMessage("31");
			this.ShowMessage("32");
			Global.isLoadFinish = true;
			if (Settings.Default.Language == formMain.LanguageChineseSimplified || Settings.Default.Language == formMain.LanguageChineseTraditional)
			{
				this.zhToolbutton_location_ZH_CN();
			}
			else
			{
				this.zhToolbutton_location_OtherLanguage();
			}
			this.SetPanelPromptLanguage(Settings.Default.Language);
			foreach (ToolStripItem toolStripItem in this.contextMenuStripSubarea.Items)
			{
				string key;
                Dictionary<string, int> keyValuePairs1 = new Dictionary<string, int>(10);

                if (toolStripItem.GetType().Name == "ToolStripMenuItem" && toolStripItem.Tag != null && (key = toolStripItem.Tag.ToString()) != null)
				{
					if (keyValuePairs1 == null)
					{
                        keyValuePairs1 = new Dictionary<string, int>(10)
						{
							{
								"Subtitle",
								0
							},
							{
								"Animation",
								1
							},
							{
								"PictureText",
								2
							},
							{
								"Time",
								3
							},
							{
								"Dial",
								4
							},
							{
								"Counter",
								5
							},
							{
								"Temperature",
								6
							},
							{
								"Lunar",
								7
							},
							{
								"Weather",
								8
							},
							{
								"String",
								9
							}
						};
					}
					int num2;
					if (keyValuePairs1.TryGetValue(key, out num2))
					{
						switch (num2)
						{
						case 0:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[9];
							break;
						case 1:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[10];
							break;
						case 2:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[11];
							break;
						case 3:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[12];
							break;
						case 4:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[13];
							break;
						case 5:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[14];
							break;
						case 6:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[15];
							break;
						case 7:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[16];
							break;
						case 8:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[17];
							break;
						case 9:
							toolStripItem.Image = this.panelTreeNodeImageList.Images[18];
							break;
						}
					}
				}
			}
			foreach (ToolStripItem toolStripItem2 in this.contextMenuStripSharedSource.Items)
			{
				string key;
                Dictionary<string, int> keyValuePairs2 = new Dictionary<string, int>(10);
                if (toolStripItem2.GetType().Name == "ToolStripMenuItem" && toolStripItem2.Tag != null && (key = toolStripItem2.Tag.ToString()) != null)
				{
					if (keyValuePairs2 == null)
					{
                        keyValuePairs2 = new Dictionary<string, int>(10)
						{
							{
								"Subtitle",
								0
							},
							{
								"Animation",
								1
							},
							{
								"PictureText",
								2
							},
							{
								"Time",
								3
							},
							{
								"Dial",
								4
							},
							{
								"Counter",
								5
							},
							{
								"Temperature",
								6
							},
							{
								"Lunar",
								7
							},
							{
								"Weather",
								8
							},
							{
								"String",
								9
							}
						};
					}
					int num2;
					if (keyValuePairs2.TryGetValue(key, out num2))
					{
						switch (num2)
						{
						case 0:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[9];
							break;
						case 1:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[10];
							break;
						case 2:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[11];
							break;
						case 3:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[12];
							break;
						case 4:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[13];
							break;
						case 5:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[14];
							break;
						case 6:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[15];
							break;
						case 7:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[16];
							break;
						case 8:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[17];
							break;
						case 9:
							toolStripItem2.Image = this.panelTreeNodeImageList.Images[18];
							break;
						}
					}
				}
			}
			this.buttonFunctionConfigurationToolStripMenuItem.Visible = formMain.IsforeignTradeMode;
			this.tsmiCloudLogout.Visible = false;
			this.tsmiCloudQueryReview.Visible = false;
			this.tsmiCloudManagement.Visible = false;
			this.picCloudLoginInfo.Visible = false;
			this.lblCloudLoginInfo.Visible = false;
			if (formMain.ledsys.Cloud.LoginState == LedCloudLoginState.Login && !string.IsNullOrEmpty(formMain.ledsys.Cloud.Account.UserName))
			{
				Thread thread = new Thread(new ThreadStart(delegate

                {
					Thread.Sleep(200);
					base.Invoke(new MethodInvoker(delegate
					{
						this.tsmiCloudLogin_Click(null, null);
					}));
				}));
				thread.Start();
			}
			this.ResetRunMode();
		}

		private void formMain_MouseWheel(object sender, MouseEventArgs e)
		{
			if (e.Delta > 0)
			{
				this.maginfyToolsPanel_Click(null, null);
				return;
			}
			this.minifyToolsPanel_Click(null, null);
		}

		private void animationEditor1_Event(AnimationEventType pType)
		{
			switch (pType)
			{
			case AnimationEventType.ChangeEffect:
				if (this.isPre)
				{
					this.animationMaker.ChangeEffect();
					return;
				}
				break;
			case AnimationEventType.Update:
				if (this.isPre)
				{
					this.animationMaker.RefrshAnimation(false);
					return;
				}
				break;
			case AnimationEventType.StartPreview:
			{
				this.isPre = true;
				this.animationPreviewZhGroupBox.BringToFront();
				this.animationPreviewZhGroupBox.Controls.Clear();
				this.animationMaker = new AnimationMaker(this.nowAnimation.GetSize(), this.nowAnimation);
				this.animationMaker.Parent = this.animationPreviewZhGroupBox;
				int x = (this.animationPreviewZhGroupBox.Width - this.animationMaker.Width) / 2;
				int y = (this.animationPreviewZhGroupBox.Height - this.animationMaker.Height) / 2;
				this.animationMaker.Location = new System.Drawing.Point(x, y);
				this.animationMaker.BringToFront();
				return;
			}
			case AnimationEventType.StopPreview:
				this.StopPreview();
				return;
			case AnimationEventType.ReDraw:
				this.RedrawSubarea();
				break;
			default:
				return;
			}
		}

		public static string GetProductMessageByModel(LedCardType pModel, bool IsLSerial)
		{
			string result = "--------";
			string arg_0B_0 = string.Empty;
			string text = pModel.ToString().Replace("_", "-");
			if (IsLSerial)
			{
				string[] array = formMain.productMessage;
				for (int i = 0; i < array.Length; i++)
				{
					string text2 = array[i];
					if (text2.IndexOf(text) > -1)
					{
						return text2;
					}
				}
			}
			string[] array2 = formMain.productMessage;
			int j = 0;
			while (j < array2.Length)
			{
				string text3 = array2[j];
				if (text3.IndexOf(text.Replace("L", "")) > -1)
				{
					if (IsLSerial)
					{
						result = text3.Replace(text.Replace("L", ""), text);
						break;
					}
					result = text3;
					break;
				}
				else
				{
					j++;
				}
			}
			return result;
		}

		private void ChangeLanguage(object sender, EventArgs e)
		{
			try
			{
				ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem)sender;
				string text = (string)toolStripMenuItem.Tag;
				text = text.Replace("MouseIn", "");
				Settings.Default.Language = text;
				Settings.Default.Save();
				this.SetConfig(text);
				this.SetPanelPromptLanguage(text);
				string text2 = string.Concat(new string[]
				{
					formMain.languagePath,
					Settings.Default.Language,
					"\\",
					Settings.Default.Language,
					".xml"
				});
				formMain.ML = new MulitLanguageFresher(text2);
				formMain.mulitLanguage.NowLanguage = Settings.Default.Language;
				this.LoadProductMessage();
				formMain.mulitLanguage.NowFormID = formMain.formID;
				if (File.Exists(text2))
				{
					formMain.ML.ReadLanguageXMLResourse(text2);
					formMain.ML.Routing_xml_scans();
					if (MulitLanguageFresher.Language_Display.Count != 0)
					{
						this.Display_changeLanguage();
					}
					if (Settings.Default.Language == formMain.LanguageChineseSimplified || Settings.Default.Language == formMain.LanguageChineseTraditional)
					{
						this.UpdateButtonText();
					}
					else
					{
						this.ButtonText_set_visible();
					}
					this.RefreshZHGroupBox();
					this.LoadProductMessage();
					this.InitParam();
					this.ChangeLanguageTag();
					this.AdjustComboBoxDropDownListWidth(this.effectEntryType);
					this.AdjustComboBoxDropDownListWidth(this.effectExitType);
					this.AdjustComboBoxDropDownListWidth(this.cmbWeatherEntryMode);
					this.AdjustComboBoxDropDownListWidth(this.cmbStringEntryMode);
					if (this.nowEffectSetting != null)
					{
						this.effectEntryType.SelectedIndex = (int)this.nowEffectSetting.EntryMode;
					}
					if (this.nowEffectSetting != null)
					{
						this.effectExitType.SelectedIndex = (int)this.nowEffectSetting.ExitMode;
					}
					if (this.nowMarquee != null)
					{
						this.MarqueeListContentList();
					}
					TreeNode selectedNode = this.ledTree.SelectedNode;
					if (selectedNode != null)
					{
						int level = selectedNode.Level;
						if (level == this.levelSubarea && formMain.ledsys.SelectedPanel.SelectedItem != null)
						{
							this.DisplaySubarea();
						}
						if (level == this.levelItem && formMain.ledsys.SelectedPanel.SelectedItem != null)
						{
							this.DisplayItem(selectedNode);
						}
					}
				}
			}
			catch
			{
			}
		}

		private void SetPanelPromptLanguage(string language)
		{
			if (formMain.ledsys == null || formMain.ledsys.Panels == null || formMain.ledsys.Panels.Count == 0)
			{
				return;
			}
			for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
			{
				this.SetPanelPromptLanguage(language, formMain.ledsys.Panels[i]);
			}
		}

		public void SetPanelPromptLanguage(string language, LedPanel panel)
		{
			if (panel != null)
			{
				switch (language)
				{
				case "ar":
					panel.PromptLanguage = LedPromptLanguage.Arabic;
					return;
				case "en":
					panel.PromptLanguage = LedPromptLanguage.English;
					return;
				case "es":
					panel.PromptLanguage = LedPromptLanguage.Spanish;
					return;
				case "fr":
					panel.PromptLanguage = LedPromptLanguage.French;
					return;
				case "id":
					panel.PromptLanguage = LedPromptLanguage.Indonesian;
					return;
				case "ja":
					panel.PromptLanguage = LedPromptLanguage.Japanese;
					return;
				case "pt":
					panel.PromptLanguage = LedPromptLanguage.Portuguese;
					return;
				case "ru":
					panel.PromptLanguage = LedPromptLanguage.Russian;
					return;
				case "th":
					panel.PromptLanguage = LedPromptLanguage.Thai;
					return;
				case "tr":
					panel.PromptLanguage = LedPromptLanguage.Turkish;
					return;
				case "he":
					panel.PromptLanguage = LedPromptLanguage.Hebrew;
					return;
				case "hi":
					panel.PromptLanguage = LedPromptLanguage.Hindi;
					return;
				case "zh_CN":
					panel.PromptLanguage = LedPromptLanguage.SimplifiedChinese;
					return;
				case "zh_TW":
					panel.PromptLanguage = LedPromptLanguage.TraditionalChinese;
					return;
				}
				if (!formMain.IsforeignTradeMode)
				{
					panel.PromptLanguage = LedPromptLanguage.SimplifiedChinese;
					return;
				}
				panel.PromptLanguage = LedPromptLanguage.English;
			}
		}

		private string GetLanguageFromSystemBack()
		{
			formMain.DetectionMode = 1;
			string name = CultureInfo.InstalledUICulture.Name;
			string result = string.Empty;
			if (name.Contains("ar-"))
			{
				result = "ar";
			}
			else if (name.Contains("es-"))
			{
				result = "es";
			}
			else if (name.Contains("fr-"))
			{
				result = "fr";
			}
			else if (name.Contains("th-"))
			{
				result = "th";
			}
			else if (name.Contains("tr-"))
			{
				result = "tr";
			}
			else if (name.Contains("zh-"))
			{
				formMain.DetectionMode = 0;
				if (name.Contains("zh-TW") || name.Contains("zh-Hant"))
				{
					result = "zh_TW";
				}
				else
				{
					result = "zh_CN";
				}
			}
			else if (name.Contains("pa-"))
			{
				result = "pa";
			}
			else if (name.Contains("pt-"))
			{
				result = "pt";
			}
			else if (name.Contains("ru-"))
			{
				result = "ru";
			}
			else if (name.Contains("gu-"))
			{
				result = "gu";
			}
			else if (name.Contains("ja-"))
			{
				result = "ja";
			}
			else if (name.Contains("kn-"))
			{
				result = "kn";
			}
			else if (name.Contains("mr-"))
			{
				result = "mr";
			}
			else if (name.Contains("hi-"))
			{
				result = "hi";
			}
			else if (name.Contains("id-"))
			{
				result = "id";
			}
			else if (name.Contains("bn-"))
			{
				result = "bn";
			}
			else if (name.Contains("te-"))
			{
				result = "te";
			}
			else
			{
				result = "en";
			}
			return result;
		}

		public static string GetLanguageFromSystemBackLCID()
		{
			formMain.DetectionMode = 1;
			int lCID = CultureInfo.InstalledUICulture.LCID;
			string result = string.Empty;
			if (lCID == 1)
			{
				result = "ar";
			}
			else if (lCID == 10)
			{
				result = "es";
			}
			else if (lCID == 12)
			{
				result = "fr";
			}
			else if (lCID == 30 || lCID == 1054)
			{
				result = "th";
			}
			else if (lCID == 31 || lCID == 1055)
			{
				result = "tr";
			}
			else if (lCID == 2052)
			{
				result = "zh_CN";
			}
			else if (lCID == 1028)
			{
				result = "zh_TW";
			}
			else if (lCID == 70)
			{
				result = "pa";
			}
			else if (lCID == 22)
			{
				result = "pt";
			}
			else if (lCID == 25 || lCID == 1049)
			{
				result = "ru";
			}
			else if (lCID == 71)
			{
				result = "gu";
			}
			else if (lCID == 17 || lCID == 1041)
			{
				result = "ja";
			}
			else if (lCID == 75)
			{
				result = "kn";
			}
			else if (lCID == 78)
			{
				result = "mr";
			}
			else if (lCID == 57 || lCID == 1081)
			{
				result = "hi";
			}
			else if (lCID == 33 || lCID == 1057)
			{
				result = "id";
			}
			else if (lCID == 2117)
			{
				result = "bn";
			}
			else if (lCID == 74 || lCID == 1098)
			{
				result = "te";
			}
			else
			{
				result = "en";
			}
			return result;
		}

		public string DetectionSystemLanguagePack(string language)
		{
			string result;
			try
			{
				if (formMain.IsFirstStart)
				{
					result = formMain.GetLanguageFromSystemBackLCID();
				}
				else
				{
					result = language;
				}
			}
			catch
			{
				result = formMain.LanguageChineseSimplified;
			}
			return result;
		}

		private void RefreshZHGroupBox()
		{
			this.zhGroupBox_Tree.Refresh();
			this.zhGroupBox_PanelAttribute.Refresh();
			this.ItemAttribute.Refresh();
			this.itemPlaySettingGroupBox.Refresh();
			this.itemByPeroidGroupBox.Refresh();
			this.itemEdgeSettingGroupBox.Refresh();
			this.itemBackgroundSettingGroupBox.Refresh();
			this.zhGroupBoxItemBackground.Refresh();
			this.zhGroupBox_Panel.Refresh();
			this.subareaAttribute.Refresh();
			this.subareaEffectSetting.Refresh();
			this.subareaEdgeSetting.Refresh();
			this.dialAttributeBox.Refresh();
			this.marqueeAttributeBox.Refresh();
			this.clockAttributeBox.Refresh();
			this.temperatureAttributeBox.Refresh();
			this.counterAttributeBox.Refresh();
			this.contentBackgroundSettingGroupBox.Refresh();
			this.zhGroupBoxContentBackground.Refresh();
			this.textAttributeBox.Refresh();
			this.animationAttributeBox.Refresh();
			this.lunarAttributeBox.Refresh();
			this.weatherAttributeBox.Refresh();
			this.stringAttributeBox.Refresh();
			this.WeatherEffectSettingzhGroupBox.Refresh();
			this.StringEffectSettingzhGroupBox.Refresh();
			this.AnimationEffectSettingzhGroupBox.Refresh();
			this.animationPreviewZhGroupBox.Refresh();
		}

		private void LoadProductMessage()
		{
			try
			{
				StreamReader streamReader = new StreamReader(formMain.languagePath + Settings.Default.Language + "\\ProductMessage.txt", Encoding.Default);
				string text = streamReader.ReadToEnd();
				text = text.Replace("/ ****", "/****");
				formMain.productMessage = text.Split(new string[]
				{
					"/****"
				}, StringSplitOptions.RemoveEmptyEntries);
			}
			catch
			{
			}
		}

		public void RedrawSubarea()
		{
			if (this.isLoadingParm)
			{
				return;
			}
			if (this.nowSubareaHolder == null)
			{
				return;
			}
			this.nowSubareaHolder.Redraw();
			this.SaveProject();
		}

		public static string GetStr(string pID)
		{
			return formMain.ML.GetStr(pID);
		}

		private void InitProject()
		{
			string arg_0A_0 = Settings.Default.ProjectDir;
		}

		private void InitModeInfo()
		{
			LedGlobal.LedCardList = new List<LedCard>();
			if (!formMain.IsforeignTradeMode)
			{
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_Un, 32, 4096, 10240, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_Um, 32, 4096, 16384, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_Uc, 48, 4096, 24576, 16, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U0, 32, 4096, 32768, 16, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U1, 48, 4096, 49152, 16, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_UF, 64, 4096, 32768, 16, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U2, 64, 4096, 65536, 16, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U3, 128, 4096, 65536, 32, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U4, 128, 4096, 102400, 32, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U5, 256, 4096, 163840, 64, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U5L, 256, 4096, 163840, 64, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U6, 256, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U6L, 256, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U7, 512, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U7L, 512, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_U8, 512, 8192, 1048576, 256, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
			}
			LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_E1L, 48, 4096, 49152, 16, LedColorMode.RGB, 0, LedProtocolType.V6, true, true, true));
			LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_E3L, 128, 4096, 65536, 32, LedColorMode.RGB, 0, LedProtocolType.V6, false, true, true));
			LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_E5L, 256, 4096, 163840, 64, LedColorMode.RGB, 0, LedProtocolType.V6, true, true, true));
			LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_E6L, 256, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V6, true, true, true));
			LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_E7L, 512, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V6, true, true, true));
			LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_E8L, 512, 8192, 1048576, 256, LedColorMode.RGB, 0, LedProtocolType.V6, true, true, true));
			if (!formMain.IsforeignTradeMode)
			{
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_A1, 48, 4096, 49152, 16, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, false));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_A4, 64, 4096, 65536, 32, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, false));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_Gm, 32, 4096, 16384, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_GmL, 32, 4096, 16384, 8, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G0, 32, 4096, 32768, 16, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G0L, 32, 4096, 32768, 16, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G2, 64, 4096, 65536, 32, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G3, 128, 4096, 65536, 32, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G3L, 128, 4096, 65536, 32, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G4, 128, 4096, 163840, 32, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G4L, 128, 4096, 163840, 32, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G7, 512, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_G7L, 512, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_Wn, 32, 4096, 10240, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_Wm, 32, 4096, 16384, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_Wc, 48, 4096, 24576, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_W0, 32, 4096, 32768, 16, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_W1, 48, 4096, 49152, 16, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_WF, 64, 4096, 32768, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_W2, 64, 4096, 65536, 16, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_W3, 128, 4096, 65536, 32, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_W4, 128, 4096, 102400, 32, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_W5, 256, 4096, 163840, 64, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_W6, 256, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_W7, 512, 4096, 524288, 128, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
			}
			LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_M0L, 64, 4096, 73728, 64, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
			LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_M2L, 128, 4096, 73728, 64, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
			if (!formMain.IsforeignTradeMode)
			{
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_SmL, 32, 1024, 16384, 8, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_S0L, 32, 1024, 32768, 16, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_S1L, 48, 1024, 49152, 16, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_S2L, 64, 1024, 65536, 16, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_PP1, 48, 4096, 49152, 16, LedColorMode.RGB, 0, LedProtocolType.V3, true, false, false));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_YU0, 32, 4096, 32768, 16, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
			}
			if (formMain.IsforeignTradeMode)
			{
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5U1, 16, 8192, 5120, 4, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5U2L, 32, 8192, 10240, 4, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5U2, 32, 8192, 20480, 4, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5U3, 48, 8192, 30720, 16, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5U4, 64, 8192, 40960, 16, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5U8, 128, 8192, 81920, 32, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5U16, 256, 8192, 163840, 64, LedColorMode.RGB, 0, LedProtocolType.V6, true, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5U32, 512, 8192, 1048576, 256, LedColorMode.RGB, 0, LedProtocolType.V6, true, true, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5W1, 16, 8192, 5120, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5W2L, 32, 8192, 10240, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5W2, 32, 8192, 20480, 8, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5W3, 48, 8192, 30720, 16, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5W4, 64, 8192, 40960, 16, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5W8, 128, 8192, 81920, 32, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5W16, 256, 8192, 163840, 64, LedColorMode.RGB, 0, LedProtocolType.V3, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5G2, 32, 8192, 32768, 16, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
				LedGlobal.LedCardList.Add(new LedCard(LedCardType.ZH_5G8, 128, 8192, 81920, 32, LedColorMode.RGB, 0, LedProtocolType.V6, false, false, true));
			}
		}

		private int LoadProjectVersion(string path)
		{
			int result = 1;
			try
			{
				if (formMain.isUseXML)
				{
					if (!File.Exists(path))
					{
						result = -1;
						return result;
					}
					XmlDocument xmlDocument = new XmlDocument();
					xmlDocument.Load(path);
					XmlElement documentElement = xmlDocument.DocumentElement;
					string text = LedProject.ParseXmlVersion(documentElement);
					if (!string.IsNullOrEmpty(text) && !text.Contains(formMain.ledTitleVersion))
					{
						result = 0;
					}
				}
				else
				{
					result = -2;
				}
			}
			catch
			{
				result = -3;
			}
			return result;
		}

		private void LoadProject()
		{
			if (formMain.isUseXML)
			{
				this.DeleteZHD(formMain.projectDir);
				if (!this.LoadFromXML(formMain.projectPath))
				{
					formMain.ledsys = new LedProject();
					formMain.ledsys.Version = formMain.ledVersion;
					LedPanel ledPanel = new LedPanel();
					if (formMain.IsforeignTradeMode)
					{
						ledPanel.CardType = LedCardType.ZH_5U1;
					}
					ledPanel.TextName = formMain.ML.GetStr("Display_PanelAbbr") + "1";
					ledPanel.ValueName = ledPanel.TextName;
					formMain.ledsys.AddPanel(ledPanel);
					this.nowPanel = ledPanel;
					LedItem ledItem = new LedItem();
					ledItem.AddEdge(formMain.NewEdgeData());
					ledItem.TextName = formMain.ML.GetStr("Display_Item") + "1";
					ledItem.ValueName = ledItem.TextName;
					ledItem.No = 1;
					ledPanel.AddItem(ledItem);
					this.nowItem = ledItem;
				}
				this.AddPanelToTree();
				if (formMain.IsforeignTradeMode && !File.Exists(formMain.projectPath))
				{
					foreach (LedPanel current in formMain.Ledsys.Panels)
					{
						current.Zoom = 3m;
					}
				}
				this.DisplayItem(LedDisplayMode.Load);
			}
		}

		private bool LoadFromXML(string pPath)
		{
			if (!File.Exists(pPath))
			{
				return false;
			}
			XmlDocument xmlDocument = new XmlDocument();
			bool result;
			try
			{
				FileInfo fileInfo = new FileInfo(pPath);
				xmlDocument.Load(pPath);
				XmlElement documentElement = xmlDocument.DocumentElement;
				formMain.ledsys = LedProject.ParseXml(documentElement);
				if (!string.IsNullOrEmpty(formMain.ledsys.Version) && !formMain.ledsys.Version.Contains(formMain.ledTitleVersion))
				{
					if (formMain.ledsys.Panels != null)
					{
						for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
						{
							formMain.ledsys.Panels[i].Dispose(true);
						}
						formMain.ledsys.Panels.Clear();
					}
					formMain.ledsys = null;
					result = false;
				}
				else
				{
					if (string.IsNullOrEmpty(formMain.ledsys.Version) || formMain.ledsys.Version != formMain.ledVersion)
					{
						formMain.ledsys.Version = formMain.ledVersion;
					}
					this.DeleteNullDirectory(fileInfo.DirectoryName);
					result = true;
				}
			}
			catch
			{
				result = false;
			}
			return result;
		}

		private bool LoadFromCloudXML(string pPath)
		{
			if (!File.Exists(pPath))
			{
				return false;
			}
			XmlDocument xmlDocument = new XmlDocument();
			bool result;
			try
			{
				FileInfo fileInfo = new FileInfo(pPath);
				xmlDocument.Load(pPath);
				XmlElement documentElement = xmlDocument.DocumentElement;
				formMain.ledsys.ParseCloudXml(documentElement);
				this.DeleteNullDirectory(fileInfo.DirectoryName);
				result = true;
			}
			catch
			{
				result = false;
			}
			return result;
		}

		private void FilterPanelIsforeignTrade()
		{
			if (formMain.IsforeignTradeMode)
			{
				for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
				{
					int cardType = (int)formMain.ledsys.Panels[i].CardType;
					if ((cardType < 242 || cardType > 252) && (cardType < 300 || cardType > 307) && (cardType < 141 || cardType > 148) && (cardType < 282 || cardType > 285) && (cardType < 210 || cardType > 212))
					{
						formMain.ledsys.Panels.Remove(formMain.ledsys.Panels[i]);
					}
				}
			}
			else
			{
				for (int j = 0; j < formMain.ledsys.Panels.Count; j++)
				{
					int cardType2 = (int)formMain.ledsys.Panels[j].CardType;
					if ((cardType2 >= 242 && cardType2 <= 252) || (cardType2 >= 300 && cardType2 <= 307) || (cardType2 >= 282 && cardType2 <= 285))
					{
						formMain.ledsys.Panels.Remove(formMain.ledsys.Panels[j]);
					}
				}
			}
			if (formMain.ledsys.Panels.Count <= 0)
			{
				LedPanel ledPanel = new LedPanel();
				if (formMain.IsforeignTradeMode)
				{
					ledPanel.CardType = LedCardType.ZH_5U1;
					ledPanel.Zoom = 3m;
				}
				ledPanel.TextName = formMain.ML.GetStr("Display_PanelAbbr") + "1";
				ledPanel.ValueName = ledPanel.TextName;
				formMain.ledsys.AddPanel(ledPanel);
				this.nowPanel = ledPanel;
				LedItem ledItem = new LedItem();
				ledItem.AddEdge(formMain.NewEdgeData());
				ledItem.TextName = formMain.ML.GetStr("Display_Item") + "1";
				ledItem.ValueName = ledItem.TextName;
				ledItem.No = 1;
				ledPanel.AddItem(ledItem);
				this.nowItem = ledItem;
			}
		}

		private void DeleteNullDirectory(string dir)
		{
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(dir);
				DirectoryInfo[] directories = directoryInfo.GetDirectories();
				DirectoryInfo[] array = directories;
				for (int i = 0; i < array.Length; i++)
				{
					DirectoryInfo directoryInfo2 = array[i];
					if (directoryInfo2.Name != "Cloud" && !this.IsUseDirectory(directoryInfo2))
					{
						try
						{
							directoryInfo2.Delete(true);
						}
						catch
						{
						}
					}
				}
			}
			catch
			{
			}
		}

		private bool IsUseDirectory(DirectoryInfo pDirectory)
		{
			for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
			{
				if (formMain.ledsys.Panels[i].ID == pDirectory.Name)
				{
					return true;
				}
			}
			return false;
		}

		private void DeleteZHD(string folder)
		{
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(folder);
				DirectoryInfo[] directories = directoryInfo.GetDirectories();
				for (int i = 0; i < directories.Length; i++)
				{
					this.DeleteZHD(directories[i].FullName);
				}
				FileInfo[] files = directoryInfo.GetFiles();
				for (int j = 0; j < files.Length; j++)
				{
					if (files[j].Extension == ".zhd")
					{
						files[j].Delete();
					}
				}
			}
			catch
			{
			}
		}

		private void SaveToXml(string pPath)
		{
			string xml = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n" + formMain.ledsys.ToXml();
			XmlDocument xmlDocument = new XmlDocument();
			xmlDocument.LoadXml(xml);
			xmlDocument.Save(pPath);
		}

		private void SaveToCloudXml(string path)
		{
			string xml = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n" + formMain.ledsys.ToCloudXml();
			XmlDocument xmlDocument = new XmlDocument();
			xmlDocument.LoadXml(xml);
			xmlDocument.Save(path);
		}

		private void SaveProject()
		{
			if (formMain.isUseXML)
			{
				try
				{
					this.SaveToXml(formMain.projectPath);
					if (LedGlobal.CloudAccount != null && !string.IsNullOrEmpty(LedGlobal.CloudAccount.UserName))
					{
						this.SaveToCloudXml(string.Format(formMain.projectCloudPath, LedGlobal.CloudAccount.UserName));
					}
				}
				catch
				{
				}
			}
		}

		private void LoadGroup()
		{
			if (formMain.ledsys.Groups != null && formMain.ledsys.Groups.Count > 0)
			{
				int i = 0;
				while (i < formMain.ledsys.Groups.Count)
				{
					LedGroup ledGroup = formMain.ledsys.Groups[i];
					if ((LedGlobal.CloudAccount != null && !string.IsNullOrEmpty(LedGlobal.CloudAccount.UserName)) || formMain.ledsys.Cloud.LoginState != LedCloudLoginState.Login || string.IsNullOrEmpty(formMain.ledsys.Cloud.Account.UserName) || !(formMain.ledsys.Cloud.Account.UserName == ledGroup.Name) || ledGroup.CreationMethod != LedCreationMethod.Cloud)
					{
						goto IL_11C;
					}
					bool flag = false;
					foreach (LedPanel current in formMain.ledsys.Panels)
					{
						if (current.GetType() == typeof(LedPanel) && current.Group == ledGroup.ID)
						{
							flag = true;
							break;
						}
					}
					if (flag)
					{
						goto IL_11C;
					}
					IL_346:
					i++;
					continue;
					IL_11C:
					TreeNode treeNode = new TreeNode();
					if (ledGroup.CreationMethod == LedCreationMethod.Cloud && LedGlobal.CloudAccount != null && !string.IsNullOrEmpty(LedGlobal.CloudAccount.UserName))
					{
						string arg = string.Empty;
						LedGroupCloud ledGroupCloud = (LedGroupCloud)ledGroup;
						ContextMenuStrip contextMenuStrip = new ContextMenuStrip();
						ToolStripMenuItem toolStripMenuItem = new ToolStripMenuItem(formMain.ML.GetStr("formMain_TreeView_Node_ContextMenuStrip_Item_Cloud_Group_All"));
						if (ledGroupCloud.SelectedIndex == -2)
						{
							toolStripMenuItem.Checked = true;
							arg = toolStripMenuItem.Text;
						}
						toolStripMenuItem.Tag = 0;
						toolStripMenuItem.Click += new EventHandler(this.tsmiGroupCloud_Click);
						contextMenuStrip.Items.Add(toolStripMenuItem);
						ToolStripSeparator value = new ToolStripSeparator();
						contextMenuStrip.Items.Add(value);
						ToolStripMenuItem toolStripMenuItem2 = new ToolStripMenuItem(formMain.ML.GetStr("formMain_TreeView_Node_ContextMenuStrip_Item_Cloud_Group_Ungroup"));
						if (ledGroupCloud.SelectedIndex == -1)
						{
							toolStripMenuItem2.Checked = true;
							arg = toolStripMenuItem2.Text;
						}
						toolStripMenuItem2.Tag = ledGroupCloud.ID;
						toolStripMenuItem2.Click += new EventHandler(this.tsmiGroupCloud_Click);
						contextMenuStrip.Items.Add(toolStripMenuItem2);
						if (ledGroupCloud.Subgroups != null)
						{
							int num = 0;
							foreach (LedGroup current2 in ledGroupCloud.Subgroups)
							{
								if (num == 0)
								{
									ToolStripSeparator value2 = new ToolStripSeparator();
									contextMenuStrip.Items.Add(value2);
								}
								ToolStripMenuItem toolStripMenuItem3 = new ToolStripMenuItem(current2.Name);
								if (ledGroupCloud.SelectedIndex == num)
								{
									toolStripMenuItem3.Checked = true;
									arg = toolStripMenuItem3.Text;
								}
								toolStripMenuItem3.Tag = current2.ID;
								toolStripMenuItem3.Click += new EventHandler(this.tsmiGroupCloud_Click);
								contextMenuStrip.Items.Add(toolStripMenuItem3);
								num++;
							}
						}
						treeNode.Text = string.Format("{0}({1})", ledGroup.Name, arg);
						treeNode.ContextMenuStrip = contextMenuStrip;
					}
					else
					{
						treeNode.Text = ledGroup.Name;
					}
					treeNode.Tag = ledGroup;
					this.ledTree.Nodes.Add(treeNode);
					goto IL_346;
				}
				return;
			}
			LedGroup ledGroup2 = new LedGroup();
			ledGroup2.Name = formMain.ML.GetStr("Display_Panel_NoGroup");
			ledGroup2.Description = ledGroup2.Name;
			formMain.ledsys.AddGroup(ledGroup2);
			this.tnNoGroup = new TreeNode();
			this.tnNoGroup.Text = ledGroup2.Name;
			this.tnNoGroup.Tag = ledGroup2;
			this.ledTree.Nodes.Add(this.tnNoGroup);
		}

		private void InitParam()
		{
			this.effectEntryType.Items.Clear();
			this.effectExitType.Items.Clear();
			this.cmbWeatherEntryMode.Items.Clear();
			this.cmbStringEntryMode.Items.Clear();
			LedGlobal.EntryModeList = new List<byte>();
			LedGlobal.ExitModeList = new List<byte>();
			LedGlobal.WeatherEntryModeList = new List<byte>();
			LedGlobal.StringEntryModeList = new List<byte>();
			try
			{
				foreach (string current in MulitLanguageFresher.Language_Control_List["formMain_ComboBox_Panel_SubareaEffect_EntryModel"])
				{
					string[] array = current.Split(new char[]
					{
						','
					});
					LedGlobal.EntryModeList.Add(byte.Parse(array[0]));
					this.effectEntryType.Items.Add(array[1]);
				}
				foreach (string current2 in MulitLanguageFresher.Language_Control_List["formMain_ComboBox_Panel_SubareaEffect_ExitModel"])
				{
					string[] array = current2.Split(new char[]
					{
						','
					});
					LedGlobal.ExitModeList.Add(byte.Parse(array[0]));
					this.effectExitType.Items.Add(array[1]);
				}
				foreach (string current3 in MulitLanguageFresher.Language_Control_List["formMain_ComboBox_Panel_SubareaWeatherEffect_EntryModel"])
				{
					string[] array = current3.Split(new char[]
					{
						','
					});
					LedGlobal.WeatherEntryModeList.Add(byte.Parse(array[0]));
					this.cmbWeatherEntryMode.Items.Add(array[1]);
				}
				foreach (string current4 in MulitLanguageFresher.Language_Control_List["formMain_ComboBox_Panel_SubareaStringEffect_EntryModel"])
				{
					string[] array = current4.Split(new char[]
					{
						','
					});
					LedGlobal.StringEntryModeList.Add(byte.Parse(array[0]));
					this.cmbStringEntryMode.Items.Add(array[1]);
				}
			}
			catch (Exception)
			{
			}
		}

		public void HeartbeatProcessing(bool enabled)
		{
			if (formMain.IServer != null)
			{
				formMain.IServer.Enable_HEART_Processing(enabled);
			}
			this.isSendDataTickPause = !enabled;
		}

		private void AddPanelToIPCServer()
		{
			if (formMain.deviceInfoDict == null)
			{
				formMain.deviceInfoDict = new Dictionary<string, DEVICE_INFO>();
			}
			formMain.deviceInfoDict.Clear();
			call.m_devList.Clear();
			if (formMain.ledsys.Panels != null)
			{
				for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
				{
					LedPanel panel = formMain.ledsys.Panels[i];
					formMain.AddPanelToIPCServer(panel);
				}
			}
		}

		public static void AddPanelToIPCServer(LedPanel panel)
		{
			DEVICE_INFO add_di = formMain.GenerateDeviceInfo(panel);
			formMain.IServer.add_device_to_list_nocheck(add_di);
		}

		private void DeletePanelFromIPCServer()
		{
			if (formMain.ledsys.Panels != null)
			{
				for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
				{
					LedPanel ledPanel = formMain.ledsys.Panels[i];
					formMain.DeletePanelFromIPCServer(ledPanel.ProductID);
				}
			}
		}

		public static void DeletePanelFromIPCServer(string productID)
		{
			formMain.IServer.del_device_from_list(productID);
		}

		public static void ModifyPanelFromIPCServer(LedPanel panel)
		{
			DEVICE_INFO new_di = formMain.GenerateDeviceInfo(panel);
			formMain.IServer.modi_device_info_nocheck(panel.ProductID, new_di);
		}

		public static void ReplacePanelFromIPCServer(LedPanel oldPanel, LedPanel newPanel)
		{
			formMain.DeletePanelFromIPCServer(oldPanel.ProductID);
			formMain.AddPanelToIPCServer(newPanel);
		}

		public static void SetPanelPasswordToIPCServer(LedPanel panel)
		{
			if (panel == null)
			{
				return;
			}
			formMain.IServer.set_device_pwd(panel.ProductID, panel.AuthorityPassword);
		}

		private static DEVICE_INFO GenerateDeviceInfo(LedPanel panel)
		{
			DEVICE_INFO dEVICE_INFO = new DEVICE_INFO();
			dEVICE_INFO.description = panel.TextName;
			switch (panel.PortType)
			{
			case LedPortType.SerialPort:
				dEVICE_INFO.cur_use_net_mode = 8;
				dEVICE_INFO.dev_net_mode = DEV_NET_MODE.MODE_RS485;
				dEVICE_INFO.device_sflag = DEVICE_SPECIFY_FLAG.com_card;
				goto IL_113;
			case LedPortType.Ethernet:
				if (panel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.Directly)
				{
					dEVICE_INFO.cur_use_net_mode = 4;
					dEVICE_INFO.dev_net_mode = DEV_NET_MODE.MODE_UDP;
					dEVICE_INFO.device_sflag = DEVICE_SPECIFY_FLAG.network_card;
					goto IL_113;
				}
				if (panel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.FixedIP)
				{
					dEVICE_INFO.cur_use_net_mode = 1;
					dEVICE_INFO.dev_net_mode = DEV_NET_MODE.MODE_TCP_FIXED_IP;
					if (!panel.IsLSeries() && !panel.CardType.ToString().Contains("I"))
					{
						dEVICE_INFO.is_enforce_use_UDP_p2p = true;
					}
					dEVICE_INFO.device_sflag = DEVICE_SPECIFY_FLAG.network_card;
					goto IL_113;
				}
				if (panel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.LocalServer)
				{
					dEVICE_INFO.cur_use_net_mode = 2;
					dEVICE_INFO.dev_net_mode = DEV_NET_MODE.MODE_TCP_LOCALE_SERVER;
					dEVICE_INFO.device_sflag = DEVICE_SPECIFY_FLAG.network_card;
					goto IL_113;
				}
				dEVICE_INFO.cur_use_net_mode = 0;
				dEVICE_INFO.dev_net_mode = DEV_NET_MODE.MODE_NONE;
				goto IL_113;
			case LedPortType.WiFi:
				dEVICE_INFO.cur_use_net_mode = 1;
				dEVICE_INFO.dev_net_mode = DEV_NET_MODE.MODE_TCP_FIXED_IP;
				dEVICE_INFO.device_sflag = DEVICE_SPECIFY_FLAG.wifi_card;
				goto IL_113;
			}
			dEVICE_INFO.cur_use_net_mode = 0;
			dEVICE_INFO.dev_net_mode = DEV_NET_MODE.MODE_NONE;
			IL_113:
			dEVICE_INFO.is_have_password = Convert.ToBoolean((int)panel.AuthorityPasswordMode);
			dEVICE_INFO.password = panel.AuthorityPassword;
			dEVICE_INFO.ComPort_name = panel.SerialPortName;
			dEVICE_INFO.BaudRate = panel.BaudRate;
			dEVICE_INFO.Rs485_Adr = (ushort)panel.CardAddress;
			if (panel.PortType == LedPortType.WiFi)
			{
				dEVICE_INFO.FIXED_IP = "10.10.100.1";
				dEVICE_INFO.TCP_out_dst_Port = 8899;
			}
			else
			{
				dEVICE_INFO.FIXED_IP = panel.IPAddress;
				dEVICE_INFO.TCP_out_dst_Port = (ushort)panel.IPPort;
			}
			dEVICE_INFO.MAC = panel.MACAddress;
			dEVICE_INFO.net_id = panel.NetworkID;
			dEVICE_INFO.product_id = panel.ProductID;
			dEVICE_INFO.firmware_comm_ver = panel.ProtocolVersion;
			return dEVICE_INFO;
		}

		private void AddPanelToTree()
		{
			System.Drawing.Color backColor = System.Drawing.Color.FromArgb(51, 153, 255);
			this.ledTree.Nodes.Clear();
			if (formMain.ledsys.Panels.Count == 0)
			{
				LedPanel ledPanel = new LedPanel();
				ledPanel.TextName = formMain.ML.GetStr("Display_PanelAbbr") + "1";
				ledPanel.ValueName = ledPanel.TextName;
				formMain.ledsys.AddPanel(ledPanel);
				this.nowPanel = ledPanel;
			}
			for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
			{
				LedPanel ledPanel2 = formMain.ledsys.Panels[i];
				if (ledPanel2.SizeChangedMode == LedSizeChangedMode.Smaller)
				{
					int j = ledPanel2.Items.Count - 1;
					while (j > -1)
					{
						LedItem ledItem = ledPanel2.Items[j];
						if (ledItem.Shared)
						{
							using (IEnumerator<string> enumerator = ledItem.SharedItemOfPanelIDs.GetEnumerator())
							{
								while (enumerator.MoveNext())
								{
									string current = enumerator.Current;
									foreach (LedPanel current2 in formMain.ledsys.Panels)
									{
										if (current2.ID == current)
										{
											for (int k = current2.Items.Count - 1; k > -1; k--)
											{
												LedItem ledItem2 = current2.Items[k];
												if (ledItem2.ID == ledItem.ID)
												{
													current2.RemoveSharedItem(ledItem2);
												}
											}
										}
									}
								}
								goto IL_23F;
							}
							goto IL_18B;
						}
						goto IL_18B;
						IL_23F:
						j--;
						continue;
						IL_18B:
						if (!(ledItem.GetType() == typeof(LedSharedItem)))
						{
							goto IL_23F;
						}
						ledPanel2.RemoveSharedItem(ledItem);
						if (ledItem.SharedItemOfPanelIDs != null && ledItem.SharedItemOfPanelIDs.Count > 0)
						{
							ledItem.SharedItemOfPanelIDs.Remove(ledPanel2.ID);
						}
						if (ledItem.ParentPanel != null)
						{
							foreach (LedItem current3 in ledItem.ParentPanel.Items)
							{
								if (current3.ID == ledItem.ID)
								{
									if (current3.SharedItemOfPanelIDs.Count == 0)
									{
										current3.Shared = false;
										break;
									}
									break;
								}
							}
							goto IL_23F;
						}
						goto IL_23F;
					}
					ledPanel2.Dispose(false);
					ledPanel2.Items.Clear();
					LedItem ledItem3 = new LedItem();
					ledItem3.AddEdge(formMain.NewEdgeData());
					ledItem3.TextName = formMain.ML.GetStr("Display_Item") + "1";
					ledItem3.ValueName = ledItem3.TextName;
					ledItem3.No = 1;
					ledPanel2.AddItem(ledItem3);
					ledPanel2.SizeChangedMode = LedSizeChangedMode.None;
					this.nowItem = ledItem3;
				}
				else if (ledPanel2.SizeChangedMode == LedSizeChangedMode.Larger)
				{
					for (int l = ledPanel2.Items.Count - 1; l > -1; l--)
					{
						LedItem ledItem4 = ledPanel2.Items[l];
						if (ledItem4.Shared)
						{
							foreach (string current4 in ledItem4.SharedItemOfPanelIDs)
							{
								foreach (LedPanel current5 in formMain.ledsys.Panels)
								{
									if (current5.ID == current4)
									{
										for (int m = current5.Items.Count - 1; m > -1; m--)
										{
											LedItem ledItem5 = current5.Items[m];
											if (ledItem5.ID == ledItem4.ID)
											{
												current5.RemoveSharedItem(ledItem5);
											}
										}
									}
								}
							}
							ledItem4.SharedItemOfPanelIDs.Clear();
							ledItem4.Shared = false;
						}
						else if (ledItem4.GetType() == typeof(LedSharedItem))
						{
							ledPanel2.RemoveSharedItem(ledItem4);
							if (ledItem4.SharedItemOfPanelIDs != null && ledItem4.SharedItemOfPanelIDs.Count > 0)
							{
								ledItem4.SharedItemOfPanelIDs.Remove(ledPanel2.ID);
							}
							if (ledItem4.ParentPanel != null)
							{
								foreach (LedItem current6 in ledItem4.ParentPanel.Items)
								{
									if (current6.ID == ledItem4.ID)
									{
										if (current6.SharedItemOfPanelIDs.Count == 0)
										{
											current6.Shared = false;
											break;
										}
										break;
									}
								}
							}
						}
					}
					ledPanel2.SizeChangedMode = LedSizeChangedMode.None;
					this.nowItem = ledPanel2.SelectedItem;
				}
			}
			if (formMain.isUseGroup)
			{
				this.LoadGroup();
				for (int n = 0; n < formMain.ledsys.Panels.Count; n++)
				{
					LedPanel ledPanel3 = formMain.ledsys.Panels[n];
					if (!this.IsPanelCloud(ledPanel3) || this.isCloudLogin)
					{
						TreeNode treeNode = new TreeNode(ledPanel3.GetDescription());
						if (!Directory.Exists(ledPanel3.GetSaveDirectory()))
						{
							Directory.CreateDirectory(ledPanel3.GetSaveDirectory());
						}
						if (ledPanel3.State == LedPanelState.Online)
						{
							treeNode.ImageIndex = 1;
							treeNode.SelectedImageIndex = 1;
							if ((ledPanel3.PortType == LedPortType.Ethernet && ledPanel3.EthernetCommunicaitonMode == LedEthernetCommunicationMode.LocalServer) || (this.IsPanelCloud(ledPanel3) && ((ledPanel3.PortType == LedPortType.Ethernet && ledPanel3.EthernetCommunicaitonMode == LedEthernetCommunicationMode.CloudServer) || (ledPanel3.PortType == LedPortType.GPRS && ledPanel3.GPRSCommunicaitonMode == LedGPRSCommunicationMode.CloudServer))))
							{
								treeNode.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Online") + ledPanel3.GetDescription();
							}
						}
						else
						{
							treeNode.ImageIndex = 2;
							treeNode.SelectedImageIndex = 2;
							if ((ledPanel3.PortType == LedPortType.Ethernet && ledPanel3.EthernetCommunicaitonMode == LedEthernetCommunicationMode.LocalServer) || (this.IsPanelCloud(ledPanel3) && ((ledPanel3.PortType == LedPortType.Ethernet && ledPanel3.EthernetCommunicaitonMode == LedEthernetCommunicationMode.CloudServer) || (ledPanel3.PortType == LedPortType.GPRS && ledPanel3.GPRSCommunicaitonMode == LedGPRSCommunicationMode.CloudServer))))
							{
								treeNode.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Offline") + ledPanel3.GetDescription();
							}
						}
						treeNode.Tag = formMain.ledsys.Panels[n];
						treeNode.ContextMenuStrip = this.contextMenuStripPanel;
						bool flag = false;
						foreach (TreeNode treeNode2 in this.ledTree.Nodes)
						{
							try
							{
								if (treeNode2.Tag != null)
								{
									if (treeNode2.Tag.GetType() != typeof(LedGroup) && treeNode2.Tag.GetType() != typeof(LedGroupCloud))
									{
										return;
									}
									if (this.IsPanelCloud(ledPanel3))
									{
										LedPanelCloud ledPanelCloud = (LedPanelCloud)ledPanel3;
										if (treeNode2.Tag.GetType() == typeof(LedGroupCloud))
										{
											LedGroupCloud ledGroupCloud = (LedGroupCloud)treeNode2.Tag;
											string text = string.Empty;
											if (ledGroupCloud.SelectedIndex == -1)
											{
												text = ledGroupCloud.ID;
											}
											else if (ledGroupCloud.SelectedIndex > -1 && ledGroupCloud.SelectedGroup != null)
											{
												text = ledGroupCloud.SelectedGroup.ID;
											}
											if (string.IsNullOrEmpty(text) || ledPanelCloud.Group.Contains(text))
											{
												treeNode2.Nodes.Add(treeNode);
												flag = true;
												treeNode2.Expand();
											}
										}
									}
									else if (((LedGroup)treeNode2.Tag).ID.Equals(ledPanel3.Group))
									{
										treeNode2.Nodes.Add(treeNode);
										flag = true;
										treeNode2.Expand();
									}
								}
							}
							catch
							{
							}
						}
						if (!flag)
						{
							if (this.tnNoGroup != null && this.tnNoGroup.Tag != null && this.tnNoGroup.Tag.GetType() == typeof(LedGroup))
							{
								formMain.ledsys.Panels[n].Group = ((LedGroup)this.tnNoGroup.Tag).ID;
							}
							if (this.tnNoGroup != null)
							{
								this.tnNoGroup.Nodes.Add(treeNode);
								this.tnNoGroup.Expand();
							}
						}
						this.AddNodesPanel(treeNode);
						if (formMain.ledsys.SelectedPanel.Equals(formMain.ledsys.Panels[n]))
						{
							if (treeNode.Parent != null)
							{
								treeNode.Parent.BackColor = backColor;
							}
							treeNode.BackColor = backColor;
							if (treeNode.Nodes.Count > 0)
							{
								if (this.nowItem != null)
								{
									IEnumerator enumerator8 = treeNode.Nodes.GetEnumerator();
									try
									{
										while (enumerator8.MoveNext())
										{
											TreeNode treeNode3 = (TreeNode)enumerator8.Current;
											if (treeNode3.Tag == this.nowItem)
											{
												treeNode3.BackColor = backColor;
												this.ledTree.SelectedNode = treeNode3;
												break;
											}
										}
										goto IL_976;
									}
									finally
									{
										IDisposable disposable2 = enumerator8 as IDisposable;
										if (disposable2 != null)
										{
											disposable2.Dispose();
										}
									}
								}
								treeNode.Nodes[0].BackColor = backColor;
								this.ledTree.SelectedNode = treeNode.Nodes[0];
							}
							else
							{
								this.ledTree.SelectedNode = treeNode;
							}
							IL_976:
							if (this.ledTree.SelectedNode == null)
							{
								this.ledTree.SelectedNode = treeNode;
							}
						}
						treeNode.Expand();
					}
				}
				this.nowPanel = formMain.ledsys.SelectedPanel;
				return;
			}
			for (int num = 0; num < formMain.ledsys.Panels.Count; num++)
			{
				LedPanel ledPanel4 = formMain.ledsys.Panels[num];
				if (!this.IsPanelCloud(ledPanel4) || this.isCloudLogin)
				{
					TreeNode treeNode4 = new TreeNode(ledPanel4.GetDescription());
					if (!Directory.Exists(ledPanel4.GetSaveDirectory()))
					{
						Directory.CreateDirectory(ledPanel4.GetSaveDirectory());
					}
					treeNode4.Tag = formMain.ledsys.Panels[num];
					treeNode4.ContextMenuStrip = this.contextMenuStripPanel;
					this.ledTree.Nodes.Add(treeNode4);
					this.AddNodesPanel(treeNode4);
					if (formMain.ledsys.SelectedPanel.Equals(formMain.ledsys.Panels[num]))
					{
						treeNode4.BackColor = backColor;
						if (treeNode4.Nodes.Count > 0)
						{
							if (this.nowItem != null)
							{
								IEnumerator enumerator9 = treeNode4.Nodes.GetEnumerator();
								try
								{
									while (enumerator9.MoveNext())
									{
										TreeNode treeNode5 = (TreeNode)enumerator9.Current;
										if (treeNode5.Tag == this.nowItem)
										{
											treeNode5.BackColor = backColor;
											this.ledTree.SelectedNode = treeNode5;
											break;
										}
									}
									goto IL_B42;
								}
								finally
								{
									IDisposable disposable3 = enumerator9 as IDisposable;
									if (disposable3 != null)
									{
										disposable3.Dispose();
									}
								}
							}
							treeNode4.Nodes[0].BackColor = backColor;
							this.ledTree.SelectedNode = treeNode4.Nodes[0];
						}
						else
						{
							this.ledTree.SelectedNode = treeNode4;
						}
					}
					IL_B42:
					treeNode4.Expand();
				}
			}
			this.nowPanel = formMain.ledsys.SelectedPanel;
		}

		public string GetCommunicationDescription(LedPanel panel)
		{
			if (panel == null)
			{
				return "--";
			}
			string text = panel.PortType.ToString() + "; ";
			if (panel.PortType == LedPortType.SerialPort)
			{
				text += string.Format(formMain.ML.GetStr("formMain_Panel_Description_SerialPort"), panel.SerialPortName, panel.BaudRate, panel.CardAddress);
			}
			else if (panel.PortType == LedPortType.Ethernet)
			{
				if (panel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.Directly)
				{
					text += formMain.ML.GetStr("formpaneledit_radioButton_SendBroadcast");
				}
				else if (panel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.LocalServer)
				{
					text += string.Format(formMain.ML.GetStr("formMain_Panel_Description_LocalServer"), new object[]
					{
						panel.LocalServerIPAddress,
						panel.LocalServerIPPort,
						panel.NetworkID,
						panel.IPAddress,
						panel.IPPort,
						panel.IPNetMask,
						panel.IPGateway
					});
				}
				else if (panel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.CloudServer)
				{
					text += string.Format(formMain.ML.GetStr("formMain_Panel_Description_CloudServer"), new object[]
					{
						panel.CloudServerDomainName,
						panel.CloudServerIPPort,
						panel.IPAddress,
						panel.IPPort,
						panel.IPNetMask,
						panel.IPGateway
					});
				}
				else
				{
					text += string.Format(formMain.ML.GetStr("formMain_Panel_Description_FixedIP"), new object[]
					{
						panel.IPAddress,
						panel.IPPort,
						panel.IPNetMask,
						panel.IPGateway
					});
				}
			}
			return text;
		}

		private void DisplayPanel(TreeNode pNode, bool needDisplayitem = true)
		{
			this.nowPanel = (LedPanel)pNode.Tag;
			this.SetPanelAttributeInfo(this.nowPanel);
			if (this.nowPanel.Equals(formMain.ledsys.SelectedPanel))
			{
				formMain.ledsys.SelectedPanel = this.nowPanel;
				return;
			}
			formMain.ledsys.SelectedPanel = this.nowPanel;
			for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
			{
				if (this.nowPanel.ID == formMain.ledsys.Panels[i].ID)
				{
					formMain.ledsys.SelectedIndex = i;
					break;
				}
			}
			if (this.nowPanel.Items.Count > 0)
			{
				this.nowPanel.SelectedItem = this.nowPanel.Items[0];
			}
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxItemBackground.Visible = true;
				this.zhGroupBoxItemBackground.BringToFront();
			}
			else
			{
				this.itemBackgroundSettingGroupBox.Visible = true;
				this.itemBackgroundSettingGroupBox.BringToFront();
			}
			if (needDisplayitem)
			{
				if (this.nowPanel.Items.Count > 0)
				{
					this.DisplayItem(LedDisplayMode.Load);
					return;
				}
				this.DrawScreenBackground();
			}
		}

		private void DisplayItem(TreeNode pNode)
		{
			LedPanel ledPanel = (LedPanel)pNode.Parent.Tag;
			if (formMain.ledsys.SelectedPanel.Equals(ledPanel))
			{
				this.nowItem = (LedItem)pNode.Tag;
				ledPanel.SelectedItem = this.nowItem;
				this.ShowItemAttribute();
				this.DisplayItem(LedDisplayMode.Load);
				return;
			}
			this.DisplayPanel(pNode.Parent, false);
			this.DisplayItem(pNode);
		}

		private void SetPanelAttributeInfo(LedPanel panel)
		{
			this.panelItemslistBox.Items.Clear();
			this.panelCommInfolabel.Text = "--";
			this.panelNamelabel.Text = "--";
			this.panelItemNumlabel.Text = "--";
			this.panelPanelSizelabel.Text = "--";
			this.panelModelInfolabel.Text = "--";
			this.panelDeviceIDLabel.Text = "--";
			this.panelDeviceIDLabel.Visible = false;
			this.label6.Visible = false;
			if (panel == null)
			{
				return;
			}
			foreach (LedItem current in panel.Items)
			{
				this.panelItemslistBox.Items.Add(current.TextName);
			}
			this.panelCommInfolabel.Text = this.GetCommunicationDescription(panel);
			this.panelNamelabel.Text = panel.TextName;
			this.panelItemNumlabel.Text = panel.Items.Count.ToString();
			this.panelPanelSizelabel.Text = string.Concat(new string[]
			{
				formMain.ML.GetStr("Display_Width"),
				":",
				panel.Width.ToString(),
				",",
				formMain.ML.GetStr("Display_Height"),
				":",
				panel.Height.ToString()
			});
			this.panelModelInfolabel.Text = panel.CardType.ToString().Replace("_", "-");
			if (this.IsPanelCloud(panel))
			{
				this.panelDeviceIDLabel.Text = panel.DeviceID;
				this.panelDeviceIDLabel.Visible = true;
				this.label6.Visible = true;
			}
		}

		private void ShowPanelAttribute()
		{
			this.zhGroupBox_PanelAttribute.BringToFront();
			this.zhGroupBox_PanelAttribute.Visible = true;
		}

		private void ShowItemAttribute()
		{
			this.zhGroupBox_PanelAttribute.Visible = false;
			this.ItemAttribute.Visible = true;
			this.itemPlaySettingGroupBox.Visible = true;
			this.itemByPeroidGroupBox.Visible = true;
			this.itemEdgeSettingGroupBox.Visible = true;
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxItemBackground.Visible = true;
				this.itemBackgroundSettingGroupBox.Visible = false;
				this.zhGroupBoxItemBackground.BringToFront();
			}
			else
			{
				this.itemBackgroundSettingGroupBox.Visible = true;
				this.zhGroupBoxItemBackground.Visible = false;
				this.itemBackgroundSettingGroupBox.BringToFront();
			}
			if (this.nowItem != null)
			{
				bool flag = this.nowItem.GetType() == typeof(LedSharedItem);
				this.ItemAttribute.Enabled = !flag;
				this.itemPlaySettingGroupBox.Enabled = !flag;
				this.itemByPeroidGroupBox.Enabled = !flag;
				this.itemEdgeSettingGroupBox.Enabled = !flag;
				this.zhGroupBoxItemBackground.Enabled = !flag;
				this.itemBackgroundSettingGroupBox.Enabled = !flag;
				this.maginfyToolsPanel.Enabled = !flag;
				this.zoonToolsPanel.Enabled = !flag;
				this.minifyToolsPanel.Enabled = !flag;
				this.originalZoonToolsPanel.Enabled = !flag;
				this.panel_Item.Enabled = !flag;
				this.itemNameTextBox.Enabled = !this.nowItem.Shared;
			}
			this.subareaAttribute.Visible = false;
			this.subareaEffectSetting.Visible = false;
			this.subareaEdgeSetting.Visible = false;
			this.dialAttributeBox.Visible = false;
			this.animationAttributeBox.Visible = false;
			this.marqueeAttributeBox.Visible = false;
			this.clockAttributeBox.Visible = false;
			this.temperatureAttributeBox.Visible = false;
			this.counterAttributeBox.Visible = false;
			this.textAttributeBox.Visible = false;
			this.lunarAttributeBox.Visible = false;
			this.weatherAttributeBox.Visible = false;
			this.stringAttributeBox.Visible = false;
			this.contentBackgroundSettingGroupBox.Visible = false;
			this.zhGroupBoxContentBackground.Visible = false;
			this.WeatherEffectSettingzhGroupBox.Visible = false;
			this.StringEffectSettingzhGroupBox.Visible = false;
			this.AnimationEffectSettingzhGroupBox.Visible = false;
		}

		private void SetGroupBoxInvisual()
		{
			if (this.dialAttributeBox.Visible)
			{
				this.dialAttributeBox.Visible = false;
			}
			if (this.animationAttributeBox.Visible)
			{
				this.animationAttributeBox.Visible = false;
			}
			if (this.marqueeAttributeBox.Visible)
			{
				this.marqueeAttributeBox.Visible = false;
			}
			if (this.clockAttributeBox.Visible)
			{
				this.clockAttributeBox.Visible = false;
			}
			if (this.lunarAttributeBox.Visible)
			{
				this.lunarAttributeBox.Visible = false;
			}
			if (this.stringAttributeBox.Visible)
			{
				this.stringAttributeBox.Visible = false;
			}
			if (this.temperatureAttributeBox.Visible)
			{
				this.temperatureAttributeBox.Visible = false;
			}
			if (this.weatherAttributeBox.Visible)
			{
				this.weatherAttributeBox.Visible = false;
			}
			if (this.counterAttributeBox.Visible)
			{
				this.counterAttributeBox.Visible = false;
			}
		}

		private void ShowSubarealAttribute()
		{
			this.zhGroupBox_PanelAttribute.Visible = false;
			this.ItemAttribute.Visible = false;
			this.itemPlaySettingGroupBox.Visible = false;
			this.itemByPeroidGroupBox.Visible = false;
			this.itemEdgeSettingGroupBox.Visible = false;
			this.itemBackgroundSettingGroupBox.Visible = false;
			this.zhGroupBoxItemBackground.Visible = false;
			this.subareaAttribute.Visible = true;
			this.subareaEffectSetting.Visible = true;
			this.subareaEdgeSetting.Visible = true;
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxContentBackground.Visible = true;
				return;
			}
			this.contentBackgroundSettingGroupBox.Visible = true;
		}

		private void SetToolsButtonEnable(bool pValue)
		{
			this.toolAlignBottom.Enabled = pValue;
			this.toolAlignLeft.Enabled = pValue;
			this.toolAlignRight.Enabled = pValue;
			this.toolAlignRightLeft.Enabled = pValue;
			this.toolAlignTop.Enabled = pValue;
			this.toolAlignTopBottom.Enabled = pValue;
			this.toolPrevousPage.Enabled = pValue;
			this.toolNextPage.Enabled = pValue;
			this.toolUpAdjustButton.Enabled = pValue;
			this.toolDownAdjustButton.Enabled = pValue;
			this.toolStretchButton.Enabled = pValue;
			this.toolNarrowButton.Enabled = pValue;
			this.toolStripLabelPageNumber.Enabled = pValue;
			this.MarqueeOffsetYValue.Enabled = pValue;
			this.StretchLabel.Enabled = pValue;
		}

		private void DisplayItem(LedDisplayMode pDisType)
		{
			if (formMain.ledsys.SelectedPanel.SelectedItem == null)
			{
				this.SetToolsButtonEnable(false);
				this.DrawScreenBackground();
				this.SetPanelAttributeInfo(formMain.ledsys.SelectedPanel);
				return;
			}
			if (pDisType == LedDisplayMode.Load)
			{
				this.SetToolsButtonEnable(false);
				this.zoonToolsPanel.Text = formMain.ledsys.SelectedPanel.Zoom.ToString();
				this.ShowItemAttribute();
				this.DrawScreenBackground();
				this.ItemClearPlaySetting();
				this.ItemShowEdgeParam();
				foreach (LedSubareaHolder current in this.subareaHolderList)
				{
					this.screenPanelMain.Controls.Remove(current);
					current.Enter -= new EventHandler(this.newHolder_Enter);
					current.HolderEvent -= new LedGlobal.LedContentEvent(this.newHolder_HolderEvent);
					current.Dispose();
				}
				this.nowSubareaHolder = null;
				this.subareaHolderList.Clear();
				foreach (LedSubarea current2 in formMain.ledsys.SelectedPanel.SelectedItem.Subareas)
				{
					LedSubareaHolder ledSubareaHolder = new LedSubareaHolder(current2);
					this.subareaHolderList.Add(ledSubareaHolder);
					this.screenPanelMain.Controls.Add(ledSubareaHolder);
					ledSubareaHolder.Enter += new EventHandler(this.newHolder_Enter);
					ledSubareaHolder.HolderEvent += new LedGlobal.LedContentEvent(this.newHolder_HolderEvent);
					ledSubareaHolder.Redraw();
					ledSubareaHolder.Show();
				}
				if (this.nowItem.PlaySetting == null)
				{
					this.nowItem.PlaySetting = new LedPlaySetting();
				}
				bool closed = this.nowItem.PlaySetting.Closed;
				bool locked = this.nowItem.PlaySetting.Locked;
				bool timerPlayed = this.nowItem.PlaySetting.TimerPlayed;
				this.itemClosedCheckBox.Checked = closed;
				this.itemLockedCheckBox.Checked = locked;
				this.itemByPeroidCheckBox.Checked = timerPlayed;
				this.itemClosedCheckBox.Enabled = !locked;
				this.itemLockedCheckBox.Enabled = !closed;
				this.itemByPeroidCheckBox.Enabled = !closed;
				this.itemPlaySettingGroupBox.Enabled = !closed;
				this.itemByPeroidGroupBox.Enabled = (!closed && timerPlayed);
				if (this.nowItem.PlaySetting.ContinuousPlayed)
				{
					this.itemTimerNoGap.Checked = true;
				}
				else
				{
					this.itemTimerNoGap.Checked = false;
				}
				this.itemSubareaNumLabel.Text = this.nowItem.Subareas.Count.ToString();
				this.itemNameTextBox.Text = this.nowItem.TextName;
				switch (this.nowItem.PlaySetting.PlayMode)
				{
				case LedPlayMode.Number:
					this.itemByNumRadioButton.Checked = true;
					break;
				case LedPlayMode.TimeSpan:
					this.itemByTimeLengthRadioButton.Checked = true;
					break;
				case LedPlayMode.AstronomicalClock:
					this.itemByAstTimerRadioButton.Checked = true;
					break;
				}
				switch (this.nowItem.PlaySetting.PlayTimerMode)
				{
				case LedPlayTimerMode.Everyday:
					this.itemPlayTimerEverydayRadioButton.Checked = true;
					break;
				case LedPlayTimerMode.Weekly:
					this.itemPlayTimerByWeekRadioButton.Checked = true;
					break;
				case LedPlayTimerMode.ByDate:
					this.itemPlayTimerByDateRadioButton.Checked = true;
					break;
				}
				this.itemPlaySeetingPlayNum.Value = this.nowItem.PlaySetting.PlayCount;
				this.itemPlayLengthDay.Value = this.nowItem.PlaySetting.PlayDuration / 86400;
				this.itemPlayLengthHour.Value = this.nowItem.PlaySetting.PlayDuration % 86400 / 3600;
				this.itemPlayLengthMinute.Value = this.nowItem.PlaySetting.PlayDuration % 3600 / 60;
				this.itemPlayLengthSecond.Value = this.nowItem.PlaySetting.PlayDuration % 60;
				this.nowBackGround = this.nowItem.Background;
				this.ItemLoadBackgroundParam();
				try
				{
					this.itemTimerStartDate.Value = this.nowItem.PlaySetting.StartDate;
					this.itemTimerEndDate.Value = this.nowItem.PlaySetting.EndDate;
					this.itemTimerStartTime.Value = this.nowItem.PlaySetting.StartTime;
					this.itemTimerEndTime.Value = this.nowItem.PlaySetting.EndTime;
				}
				catch
				{
					this.itemTimerStartDate.Value = DateTime.Now;
					this.itemTimerEndDate.Value = DateTime.Now;
					this.itemTimerStartTime.Value = DateTime.Now;
					this.itemTimerEndTime.Value = DateTime.Now;
				}
				this.itemTimerWeekMondayCheckBox.Checked = this.nowItem.PlaySetting.MondayChecked;
				this.itemTimerWeekTuesdayCheckBox.Checked = this.nowItem.PlaySetting.TuesdayChecked;
				this.itemTimerWeekWednesdayCheckBox.Checked = this.nowItem.PlaySetting.WednesdayChecked;
				this.itemTimerWeekThursdayCheckBox.Checked = this.nowItem.PlaySetting.ThursdayChecked;
				this.itemTimerWeekFridayCheckBox.Checked = this.nowItem.PlaySetting.FridayChecked;
				this.itemTimerWeekSaturdayCheckBox.Checked = this.nowItem.PlaySetting.SaturdayChecked;
				this.itemTimerWeekSundayCheckBox.Checked = this.nowItem.PlaySetting.SundayChecked;
				this.nowItem = this.nowPanel.SelectedItem;
				this.nowSubarea = null;
				return;
			}
			if (pDisType == LedDisplayMode.Resize)
			{
				this.DrawScreenBackground();
				this.zoonToolsPanel.Text = formMain.ledsys.SelectedPanel.Zoom.ToString();
			}
		}

		private void ItemClearPlaySetting()
		{
			this.itemPlaySeetingPlayNum.Value = 0m;
			this.itemPlayLengthDay.Value = 0m;
			this.itemPlayLengthHour.Value = 0m;
			this.itemPlayLengthMinute.Value = 0m;
			this.itemPlayLengthSecond.Value = 0m;
			this.itemTimerNoGap.Checked = false;
			this.itemTimerWeekMondayCheckBox.Checked = false;
			this.itemTimerWeekTuesdayCheckBox.Checked = false;
			this.itemTimerWeekWednesdayCheckBox.Checked = false;
			this.itemTimerWeekThursdayCheckBox.Checked = false;
			this.itemTimerWeekFridayCheckBox.Checked = false;
			this.itemTimerWeekSaturdayCheckBox.Checked = false;
			this.itemTimerWeekSundayCheckBox.Checked = false;
		}

		private void DisplaySubarea(TreeNode pNode)
		{
			try
			{
				LedSubarea ledSubarea = (LedSubarea)pNode.Tag;
				if (!ledSubarea.ParentItem.Equals(formMain.ledsys.SelectedPanel.SelectedItem))
				{
					this.DisplayItem(pNode.Parent);
				}
				formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea = ledSubarea;
				LedItem ledItem = (LedItem)pNode.Parent.Tag;
				LedPanel ledPanel = (LedPanel)pNode.Parent.Parent.Tag;
				if (ledPanel.Equals(formMain.ledsys.SelectedPanel))
				{
					if (!ledItem.Equals(formMain.ledsys.SelectedPanel.SelectedItem))
					{
						this.DisplayItem(pNode.Parent);
					}
				}
				else
				{
					this.DisplayPanel(pNode.Parent.Parent, false);
					this.DisplayItem(pNode.Parent);
				}
				this.ShowSubarealAttribute();
				this.DisplaySubarea();
			}
			catch
			{
			}
		}

		private void DisplaySubarea()
		{
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxContentBackground.Enabled = true;
			}
			else
			{
				this.contentBackgroundSettingGroupBox.Enabled = true;
			}
			this.subareaEdgeSetting.Enabled = true;
			this.subareaEffectSetting.Enabled = true;
			this.marqueDeleteButton.Enabled = true;
			this.marqueeEdit.Enabled = true;
			this.marqueeConentUp.Enabled = true;
			this.marqueeConentDown.Enabled = true;
			LedContent selectedContent = formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea.SelectedContent;
			this.nowLedContent = selectedContent;
			this.nowSubarea = formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea;
			if (this.nowSubarea.SelectedContent != null)
			{
				this.nowSubareaEdgeData = this.nowSubarea.SelectedContent.Edge;
			}
			if ((this.nowSubareaHolder != null && this.nowSubareaHolder.Subarea != this.nowSubarea) || this.nowSubareaHolder == null)
			{
				this.FindNowSubareaHolder();
			}
			this.ShowSubarealAttribute();
			this.SetGroupBoxInvisual();
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxContentBackground.BringToFront();
				if (selectedContent != null)
				{
					this.colorfulBackgroundContent.LoadBackground(selectedContent);
				}
			}
			else
			{
				this.contentBackgroundSettingGroupBox.BringToFront();
			}
			this.subareaEffectSetting.BringToFront();
			switch (this.nowSubarea.Type)
			{
			case LedSubareaType.Subtitle:
				this.nowText = (LedDText)selectedContent;
				this.textAttributeBox.BringToFront();
				this.TextShowParam();
				this.textAttributeBox.Visible = true;
				this.nowBackGround = this.nowText.Background;
				this.nowEffectSetting = this.nowText.EffectsSetting;
				this.SetEffectEnable();
				this.EffectSettingShowParam();
				break;
			case LedSubareaType.Animation:
				this.nowAnimation = (LedAnimation)selectedContent;
				this.animationEditor1.Edit(this.nowAnimation);
				this.animationAttributeBox.BringToFront();
				this.animationAttributeBox.Visible = true;
				this.AnimationEffectSettingzhGroupBox.BringToFront();
				this.AnimationEffectSettingzhGroupBox.Visible = true;
				this.animationEffect1.Edit(this.nowAnimation);
				this.nowBackGround = this.nowAnimation.Background;
				this.SetEffectEnable();
				break;
			case LedSubareaType.PictureText:
				this.nowMarquee = this.nowSubarea;
				this.MarqueeListContentList();
				this.marqueeAttributeBox.Visible = true;
				this.marqueeAttributeBox.BringToFront();
				if (this.nowMarquee.Contents.Count == 0)
				{
					if (this.nowPanel.IsMSeries())
					{
						this.zhGroupBoxContentBackground.Enabled = false;
						this.colorfulBackgroundContent.SetBackNotShown();
					}
					else
					{
						this.contentBackgroundSettingGroupBox.Enabled = false;
					}
					this.subareaEdgeSetting.Enabled = false;
					this.subareaEffectSetting.Enabled = false;
					this.marqueDeleteButton.Enabled = false;
					this.marqueeEdit.Enabled = false;
					this.marqueeConentUp.Enabled = false;
					this.marqueeConentDown.Enabled = false;
				}
				else
				{
					this.nowBackGround = this.nowMarquee.SelectedContent.Background;
					this.nowMarqueeContent = (LedPictureText)this.nowMarquee.SelectedContent;
					if (this.nowMarqueeContent.PictureTextType != LedPictureTextType.Null)
					{
						this.nowEffectSetting = this.nowMarqueeContent.EffectsSetting;
						this.MarqueeChangeContent(this.nowMarquee.SelectedIndex);
						this.marqueeContentListBox.SelectedIndex = this.nowMarquee.SelectedIndex;
					}
				}
				break;
			case LedSubareaType.Time:
				this.nowTime = (LedTime)selectedContent;
				this.clockAttributeBox.Visible = true;
				this.clockAttributeBox.BringToFront();
				this.ClockShowParam();
				this.nowBackGround = this.nowTime.Background;
				break;
			case LedSubareaType.Dial:
				this.nowDial = (LedDial)selectedContent;
				this.dialAttributeBox.BringToFront();
				this.DialShowParam();
				this.dialAttributeBox.Visible = true;
				this.nowBackGround = this.nowDial.Background;
				break;
			case LedSubareaType.Counter:
				this.nowCounter = (LedCounter)selectedContent;
				this.counterTargetDay.Value = this.nowCounter.TargetTimeDay;
				this.counterAttributeBox.BringToFront();
				this.CounterShowParam();
				this.counterAttributeBox.Visible = true;
				this.nowBackGround = this.nowCounter.Background;
				break;
			case LedSubareaType.Lunar:
				this.nowLunar = (LedLunar)selectedContent;
				this.lunarAttributeBox.BringToFront();
				this.LunarShowParam();
				this.lunarAttributeBox.Visible = true;
				this.nowBackGround = this.nowLunar.Background;
				break;
			case LedSubareaType.Temperature:
				this.nowTemperature = (LedTemperature)selectedContent;
				this.temperatureAttributeBox.BringToFront();
				this.TemperatureShowParam();
				this.temperatureAttributeBox.Visible = true;
				this.nowBackGround = this.nowTemperature.Background;
				break;
			case LedSubareaType.String:
				this.nowString = (LedString)selectedContent;
				this.stringAttributeBox.BringToFront();
				this.StringShowParam();
				this.stringAttributeBox.Visible = true;
				this.StringEffectSettingzhGroupBox.BringToFront();
				this.StringEffectSettingzhGroupBox.Visible = true;
				this.nowBackGround = this.nowString.Background;
				this.StringEffectSettingShowParam();
				break;
			case LedSubareaType.Weather:
				this.nowWeather = (LedWeather)selectedContent;
				this.weatherAttributeBox.BringToFront();
				this.WeatherShowParam();
				this.weatherAttributeBox.Visible = true;
				this.WeatherEffectSettingzhGroupBox.BringToFront();
				this.WeatherEffectSettingzhGroupBox.Visible = true;
				this.nowBackGround = this.nowWeather.Background;
				this.WeatherEffectSettingShowParam();
				break;
			}
			this.ContentLoadBackgroundParam();
			this.SubareaShowParam();
			this.EdgeShowSubareaParam();
			this.Subarea_FindActiveSubarea();
			this.SetToolsButtonEnable(true);
			this.SetPanelToolStrip();
			this.isLoadingParm = false;
		}

		private void SetPanelToolStrip()
		{
			if (this.nowSubarea == null)
			{
				return;
			}
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			if (this.nowSubarea.Type == LedSubareaType.Subtitle)
			{
				LedDText ledDText = (LedDText)this.nowSubarea.SelectedContent;
				num = ledDText.EDText.PageNumber;
				num2 = ledDText.EDText.VerticalStretch;
				num3 = ledDText.EDText.VerticalOffset;
			}
			else if (this.nowSubarea.Type == LedSubareaType.PictureText)
			{
				LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.SelectedContent;
				if (ledPictureText != null)
				{
					if (ledPictureText.PictureTextType == LedPictureTextType.Text)
					{
						LedDText ledDText2 = (LedDText)ledPictureText;
						num = ledDText2.EDText.PageNumber;
						num2 = ledDText2.EDText.VerticalStretch;
						num3 = ledDText2.EDText.VerticalOffset;
					}
					else if (ledPictureText.PictureTextType == LedPictureTextType.MultilineText)
					{
						LedMText ledMText = (LedMText)ledPictureText;
						num = ledMText.EMText.PageNumber;
						num2 = ledMText.EMText.VerticalStretch;
						num3 = ledMText.EMText.VerticalOffset;
					}
					else if (ledPictureText.PictureTextType == LedPictureTextType.GIF)
					{
						LedGIF ledGIF = (LedGIF)ledPictureText;
						num = ledGIF.EGIF.PageNumber;
					}
					else if (ledPictureText.PictureTextType == LedPictureTextType.PublicText)
					{
						LedPText ledPText = (LedPText)ledPictureText;
						num = ledPText.EPText.PageNumber;
						num2 = ledPText.EPText.VerticalStretch;
						num3 = ledPText.EPText.VerticalOffset;
					}
				}
			}
			else if (this.nowSubarea.Type == LedSubareaType.Weather)
			{
				LedWeather ledWeather = (LedWeather)this.nowSubarea.SelectedContent;
				num = ledWeather.PageNumber;
			}
			this.toolStripLabelPageNumber.Text = (num + 1).ToString("D3");
			this.MarqueeOffsetYValue.Text = num3.ToString("D3");
			this.StretchLabel.Text = num2.ToString("D3");
		}

		private void FindNowSubareaHolder()
		{
			foreach (LedSubareaHolder current in this.subareaHolderList)
			{
				if (current.Subarea.Equals(this.nowSubarea))
				{
					this.nowSubareaHolder = current;
					break;
				}
			}
		}

		private void SetEffectEnable()
		{
			this.effectExitType.Enabled = true;
			this.effectExitSpeed.Enabled = true;
			this.effectEntryType.Enabled = true;
			this.effectEntrySpeed.Enabled = true;
		}

		private void SetEffectDisable()
		{
			this.effectExitType.Enabled = false;
			this.effectExitSpeed.Enabled = false;
			this.effectEntryType.Enabled = false;
			this.effectEntrySpeed.Enabled = false;
		}

		private void ParamSet()
		{
			this.StopPreview();
			foreach (string current in this.newDeviceProductIDs)
			{
				formMain.DeletePanelFromIPCServer(current);
			}
			this.newDeviceProductIDs.Clear();
			Dictionary<string, object[]> dictionary = new Dictionary<string, object[]>();
			for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
			{
				LedPanel ledPanel = formMain.ledsys.Panels[i];
				dictionary.Add(ledPanel.ID, new object[]
				{
					ledPanel.IsMSeries(),
					new System.Drawing.Size(ledPanel.Width, ledPanel.Height),
					ledPanel.ColorMode
				});
			}
			formPanelEdit formPanelEdit = new formPanelEdit(this);
			formPanelEdit.ShowDialog();
			for (int j = 0; j < formMain.ledsys.Panels.Count; j++)
			{
				LedPanel ledPanel2 = formMain.ledsys.Panels[j];
				foreach (KeyValuePair<string, object[]> current2 in dictionary)
				{
					if (ledPanel2.ID == current2.Key)
					{
						object[] value = current2.Value;
						if (value.Length == 3)
						{
							bool flag = (bool)value[0];
							System.Drawing.Size size = (System.Drawing.Size)value[1];
							LedColorMode ledColorMode = (LedColorMode)value[2];
							if (ledPanel2.IsMSeries() != flag)
							{
								ledPanel2.SizeChangedMode = LedSizeChangedMode.Smaller;
							}
							else
							{
								if (size.Width > ledPanel2.Width || size.Height > ledPanel2.Height)
								{
									ledPanel2.SizeChangedMode = LedSizeChangedMode.Smaller;
								}
								else if (size.Width < ledPanel2.Width || size.Height < ledPanel2.Height)
								{
									ledPanel2.SizeChangedMode = LedSizeChangedMode.Larger;
								}
								if (ledColorMode != ledPanel2.ColorMode)
								{
									ledPanel2.SizeChangedMode = LedSizeChangedMode.Smaller;
								}
							}
						}
					}
				}
			}
			this.AddPanelToTree();
			this.DisplayItem(LedDisplayMode.Load);
		}

		private void panelSettingToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formCheckCode formCheckCode = new formCheckCode();
			if (formCheckCode.Check("168", false))
			{
				this.ParamSet();
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void mainForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			this.ledTree.Dispose();
			this.SaveProject();
			this.SetConfigNumberOfStarts(1);
			call.OnIPCReadyOK -= new EventHandler<EventArgs>(this.OnIPCReady);
			call.OnAutoFoundDevice -= new EventHandler<AutoFoundDeviceEventArgs>(this.OnReceivedHeartbeat);
			if (formMain.IServer != null)
			{
				DateTime now = DateTime.Now;
				DateTime now2 = DateTime.Now;
				TimeSpan timeSpan = now2 - now;
				while (!formMain.IServer.Is_server_IDLE() && timeSpan.TotalMilliseconds < 500.0)
				{
					Thread.Sleep(200);
					now2 = DateTime.Now;
					timeSpan = now2 - now;
				}
				formMain.IServer.uninit();
			}
			Process.GetCurrentProcess().Kill();
			Application.Exit();
		}

		private void StopPreview()
		{
			try
			{
				this.animationPreviewZhGroupBox.SendToBack();
				if (this.animationMaker != null)
				{
					this.animationMaker.Dis();
					this.animationMaker.Dispose();
				}
				this.isPre = false;
				this.animationEditor1.StopPreview();
			}
			catch
			{
			}
		}

		private void AddNodesPanel(TreeNode pPanelNode)
		{
			try
			{
				pPanelNode.Nodes.Clear();
				LedPanel ledPanel = (LedPanel)pPanelNode.Tag;
				foreach (LedItem current in ledPanel.Items)
				{
					TreeNode treeNode = new TreeNode();
					treeNode.Checked = current.Enabled;
					treeNode.Text = current.TextName;
					treeNode.Tag = current;
					if (current.Shared)
					{
						treeNode.ContextMenuStrip = this.contextMenuStripSharedSource;
						if (current.PlaySetting.Locked)
						{
							treeNode.ImageIndex = 6;
							treeNode.SelectedImageIndex = 6;
						}
						else
						{
							treeNode.ImageIndex = 5;
							treeNode.SelectedImageIndex = 5;
						}
					}
					else if (current.GetType().Name == "LedSharedItem")
					{
						treeNode.ContextMenuStrip = this.contextMenuStripShared;
						if (current.PlaySetting.Locked)
						{
							treeNode.ImageIndex = 8;
							treeNode.SelectedImageIndex = 8;
						}
						else
						{
							treeNode.ImageIndex = 7;
							treeNode.SelectedImageIndex = 7;
						}
					}
					else
					{
						treeNode.ContextMenuStrip = this.contextMenuStripSubarea;
						if (current.PlaySetting.Locked)
						{
							treeNode.ImageIndex = 4;
							treeNode.SelectedImageIndex = 4;
						}
						else
						{
							treeNode.ImageIndex = 3;
							treeNode.SelectedImageIndex = 3;
						}
					}
					pPanelNode.Nodes.Add(treeNode);
					this.AddNodesItem(treeNode);
					if (current.Equals(formMain.ledsys.SelectedPanel.SelectedItem))
					{
						treeNode.Expand();
					}
				}
			}
			catch
			{
			}
		}

		private void AddNodesItem(TreeNode pItemNode)
		{
			pItemNode.Nodes.Clear();
			if (pItemNode.Tag == null || pItemNode.Tag.GetType() == typeof(LedSharedItem))
			{
				return;
			}
			LedItem ledItem = (LedItem)pItemNode.Tag;
			foreach (LedSubarea current in ledItem.Subareas)
			{
				TreeNode treeNode = new TreeNode();
				treeNode.Text = current.Name;
				treeNode.ContextMenuStrip = this.contextMenuStripContent;
				treeNode.Tag = current;
				string key;
				switch (key = current.Type.ToString())
				{
				case "Subtitle":
					treeNode.ImageIndex = 9;
					treeNode.SelectedImageIndex = 9;
					break;
				case "Animation":
					treeNode.ImageIndex = 10;
					treeNode.SelectedImageIndex = 10;
					break;
				case "PictureText":
					treeNode.ImageIndex = 11;
					treeNode.SelectedImageIndex = 11;
					break;
				case "Time":
					treeNode.ImageIndex = 12;
					treeNode.SelectedImageIndex = 12;
					break;
				case "Dial":
					treeNode.ImageIndex = 13;
					treeNode.SelectedImageIndex = 13;
					break;
				case "Counter":
					treeNode.ImageIndex = 14;
					treeNode.SelectedImageIndex = 14;
					break;
				case "Temperature":
					treeNode.ImageIndex = 15;
					treeNode.SelectedImageIndex = 15;
					break;
				case "Lunar":
					treeNode.ImageIndex = 16;
					treeNode.SelectedImageIndex = 16;
					break;
				case "Weather":
					treeNode.ImageIndex = 17;
					treeNode.SelectedImageIndex = 17;
					break;
				case "String":
					treeNode.ImageIndex = 18;
					treeNode.SelectedImageIndex = 18;
					break;
				}
				pItemNode.Nodes.Add(treeNode);
			}
		}

		private TreeNode GetNowPanel()
		{
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode == null)
			{
				return null;
			}
			if (selectedNode.Level == this.levelGroup)
			{
				return null;
			}
			if (selectedNode.Level == this.levelPanel)
			{
				return selectedNode;
			}
			if (selectedNode.Level == this.levelItem)
			{
				return selectedNode.Parent;
			}
			if (selectedNode.Level == this.levelSubarea)
			{
				return selectedNode.Parent.Parent;
			}
			return null;
		}

		private void addItemToolStripMenuItem_Click(object sender, EventArgs e)
		{
			System.Drawing.Color color = System.Drawing.Color.FromArgb(51, 153, 255);
			System.Drawing.Color groupBox_BackColor = Template.GroupBox_BackColor;
			TreeNode treeNode = this.GetNowPanel();
			if (treeNode == null)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_PleaseSelectPanel"));
				return;
			}
			LedItem ledItem = new LedItem();
			TreeNode treeNode2 = new TreeNode();
			if (formMain.ledsys.SelectedPanel.Items == null)
			{
				formMain.ledsys.SelectedPanel.Items = new List<LedItem>();
				ledItem.TextName = formMain.ML.GetStr("Display_Item") + "1";
				ledItem.No = 1;
				formMain.ledsys.SelectedPanel.AddItem(ledItem);
			}
			else
			{
				int num = formMain.ledsys.SelectedPanel.Items.Count;
				foreach (LedItem current in formMain.ledsys.SelectedPanel.Items)
				{
					if (num < current.No)
					{
						num = current.No;
					}
				}
				num++;
				ledItem.TextName = formMain.ML.GetStr("Display_Item") + num;
				ledItem.No = num;
				formMain.ledsys.SelectedPanel.AddItem(ledItem);
			}
			ledItem.ValueName = ledItem.TextName;
			ledItem.AddEdge(formMain.NewEdgeData());
			treeNode2.Text = ledItem.TextName;
			treeNode2.Checked = ledItem.Enabled;
			treeNode2.Tag = ledItem;
			treeNode2.ContextMenuStrip = this.contextMenuStripSubarea;
			treeNode2.ImageIndex = 3;
			treeNode2.SelectedImageIndex = 3;
			treeNode2.BackColor = color;
			foreach (TreeNode treeNode3 in treeNode.Nodes)
			{
				if (treeNode3.Nodes.Count > 0)
				{
					foreach (TreeNode treeNode4 in treeNode3.Nodes)
					{
						if (treeNode4.Nodes.Count > 0)
						{
							foreach (TreeNode treeNode5 in treeNode4.Nodes)
							{
								if (LedGraphics.EqualsColor(treeNode5.BackColor, color))
								{
									treeNode5.BackColor = groupBox_BackColor;
								}
							}
						}
						if (LedGraphics.EqualsColor(treeNode4.BackColor, color))
						{
							treeNode4.BackColor = groupBox_BackColor;
						}
					}
				}
				if (LedGraphics.EqualsColor(treeNode3.BackColor, color))
				{
					treeNode3.BackColor = groupBox_BackColor;
				}
			}
			treeNode.Nodes.Add(treeNode2);
			this.ledTree.SelectedNode = treeNode2;
			this.DisplayItem(LedDisplayMode.Load);
		}

		private void multiLanguageTemplatetoolStripMenuItem1_Click(object sender, EventArgs e)
		{
			formMultiLanguage formMultiLanguage = new formMultiLanguage();
			formMultiLanguage.Show();
		}

		private void LoadEdge()
		{
			try
			{
				this.edgeListComboBox.Items.Clear();
				Stream serializationStream = new MemoryStream(Resources.Edges);
				BinaryFormatter binaryFormatter = new BinaryFormatter();
				LedGlobal.LedEdgeList = (IList<System.Drawing.Bitmap>)binaryFormatter.Deserialize(serializationStream);
				for (int i = 0; i < LedGlobal.LedEdgeList.Count; i++)
				{
					this.edgeListComboBox.Items.Add(i);
					this.itemEdgeList.Items.Add(i);
				}
			}
			catch
			{
			}
		}

		private void RegulateContentAttribute()
		{
			base.Size = new System.Drawing.Size(800, 600);
			int height = 200;
			int x = 6;
			int num = this.subareaAttribute.Location.Y;
			int num2 = base.Height - 194 - 13 - num;
			num = base.Height - 194 - 13;
			this.subareaAttribute.Location = new System.Drawing.Point(this.subareaAttribute.Location.X, num);
			System.Drawing.Point location = new System.Drawing.Point(x, num);
			System.Drawing.Size size = new System.Drawing.Size(792, height);
			this.zhGroupBox_PanelAttribute.Location = location;
			this.zhGroupBox_PanelAttribute.Size = size;
			this.ItemAttribute.Location = location;
			this.ItemAttribute.Size = new System.Drawing.Size(194, size.Height);
			this.itemPlaySettingGroupBox.Size = new System.Drawing.Size(312, 95);
			this.itemPlaySettingGroupBox.Location = new System.Drawing.Point(206, num);
			this.itemByPeroidGroupBox.Size = new System.Drawing.Size(312, 95);
			this.itemByPeroidGroupBox.Location = new System.Drawing.Point(206, num + 95 + 10);
			this.itemBackgroundSettingGroupBox.Location = new System.Drawing.Point(523, location.Y);
			this.itemBackgroundSettingGroupBox.Size = new System.Drawing.Size(131, size.Height);
			this.zhGroupBoxItemBackground.Location = new System.Drawing.Point(523, location.Y);
			this.zhGroupBoxItemBackground.Size = new System.Drawing.Size(131, size.Height);
			this.itemEdgeSettingGroupBox.Location = new System.Drawing.Point(662, location.Y);
			this.itemEdgeSettingGroupBox.Size = new System.Drawing.Size(131, size.Height);
			System.Drawing.Size size2 = new System.Drawing.Size(374, height);
			System.Drawing.Point location2 = new System.Drawing.Point(138, num);
			this.subareaAttribute.Size = new System.Drawing.Size(126, height);
			this.marqueeAttributeBox.Size = new System.Drawing.Size(235, size2.Height);
			this.marqueeAttributeBox.Location = location2;
			this.dialAttributeBox.Size = size2;
			this.dialAttributeBox.Location = location2;
			this.clockAttributeBox.Size = size2;
			this.clockAttributeBox.Location = location2;
			this.counterAttributeBox.Size = size2;
			this.counterAttributeBox.Location = location2;
			this.temperatureAttributeBox.Size = size2;
			this.temperatureAttributeBox.Location = location2;
			this.textAttributeBox.Size = new System.Drawing.Size(235, size2.Height);
			this.textAttributeBox.Location = location2;
			this.animationAttributeBox.Size = new System.Drawing.Size(235, size2.Height);
			this.animationAttributeBox.Location = location2;
			this.lunarAttributeBox.Size = size2;
			this.lunarAttributeBox.Location = location2;
			this.weatherAttributeBox.Size = new System.Drawing.Size(235, size2.Height);
			this.weatherAttributeBox.Location = location2;
			this.stringAttributeBox.Size = new System.Drawing.Size(235, size2.Height);
			this.stringAttributeBox.Location = location2;
			this.itemByNumPanel.Location = new System.Drawing.Point(3, 38);
			this.itemByNumPanel.Size = new System.Drawing.Size(460, 40);
			this.itemByTimeLengthPanel.Location = this.itemByNumPanel.Location;
			this.itemByTimeLengthPanel.Size = this.itemByNumPanel.Size;
			this.itemByAstTimerPanel.Location = this.itemByNumPanel.Location;
			this.itemByAstTimerPanel.Size = this.itemByNumPanel.Size;
			System.Drawing.Size size3 = new System.Drawing.Size(131, height);
			this.subareaEffectSetting.Size = size3;
			this.subareaEffectSetting.Location = new System.Drawing.Point(381, num);
			this.subareaEdgeSetting.Size = size3;
			this.subareaEdgeSetting.Location = new System.Drawing.Point(662, num);
			this.contentBackgroundSettingGroupBox.Location = new System.Drawing.Point(523, num);
			this.contentBackgroundSettingGroupBox.Size = size3;
			this.zhGroupBoxContentBackground.Location = new System.Drawing.Point(523, num);
			this.zhGroupBoxContentBackground.Size = size3;
			this.WeatherEffectSettingzhGroupBox.Location = new System.Drawing.Point(381, num);
			this.WeatherEffectSettingzhGroupBox.Size = size3;
			this.StringEffectSettingzhGroupBox.Location = new System.Drawing.Point(381, num);
			this.StringEffectSettingzhGroupBox.Size = size3;
			this.AnimationEffectSettingzhGroupBox.Location = new System.Drawing.Point(381, num);
			this.AnimationEffectSettingzhGroupBox.Size = size3;
			this.animationPreviewZhGroupBox.Location = this.zhGroupBox_Panel.Location;
			this.animationPreviewZhGroupBox.SendToBack();
			this.generateAnimationZhGroupBox.Location = this.zhGroupBox_Panel.Location;
			this.generateAnimationZhGroupBox.SendToBack();
			if (num2 > 0)
			{
				this.zhGroupBox_Tree.Height = this.zhGroupBox_Tree.Height + num2;
				this.zhGroupBox_Panel.Height = this.zhGroupBox_Panel.Height + num2;
			}
			this.animationEditor1.Height = 170;
			this.animationEditor1.Content.Anchor = (AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right);
			this.animationEditor1.Content.Height = 142;
		}

		private void SetLabelAttri(Label pLabel)
		{
			pLabel.BackColor = System.Drawing.Color.Transparent;
			pLabel.ForeColor = System.Drawing.Color.White;
			pLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			pLabel.Font = this.zhToolButton_Open_Text.Font;
		}

		private void ReSetButtonPosition()
		{
			int num = 0;
			int num2 = 0;
			for (int i = 0; i < this.ButtonList.Count; i++)
			{
				if (this.ButtonVisibleList[i])
				{
					this.ButtonList[i].Location = new System.Drawing.Point(num, num2);
					this.ButtonTextList[i].Location = new System.Drawing.Point(num - 1, num2 + 48);
					num += this.ButtonList[i].Width + 6;
					this.ButtonTextList[i].BackColor = System.Drawing.Color.Transparent;
					if (this.ButtonList[i].Name == "zhToolButton_Item")
					{
						this.pictureBox_Spliter1.Location = new System.Drawing.Point(num, num2);
						num += 5;
					}
					if (this.ButtonList[i].Name == "zhToolButton_Delete")
					{
						this.pictureBox_Spliter2.Location = new System.Drawing.Point(num, num2);
						num += 5;
					}
				}
				else
				{
					this.ButtonTextList[i].Visible = false;
					this.ButtonTextList[i].BackColor = System.Drawing.Color.Transparent;
				}
			}
		}

		public void CheckSubareaSize(LedItem pItem)
		{
			int height = pItem.Edge.Height;
			for (int i = 0; i < pItem.Subareas.Count; i++)
			{
				LedSubarea ledSubarea = pItem.Subareas[i];
				bool flag = false;
				if (ledSubarea.X + ledSubarea.Width > pItem.ParentPanel.Width - height * 2)
				{
					ledSubarea.Width = pItem.ParentPanel.Width - height * 2 - ledSubarea.X;
					flag = true;
				}
				if (ledSubarea.Y + ledSubarea.Height > pItem.ParentPanel.Height - height * 2)
				{
					ledSubarea.Height = pItem.ParentPanel.Height - height * 2 - ledSubarea.Y;
					flag = true;
				}
				if (flag)
				{
					if (ledSubarea.Type == LedSubareaType.Animation)
					{
						LedAnimation ledAnimation = (LedAnimation)ledSubarea.SelectedContent;
						ledAnimation.Changed = true;
					}
					else
					{
						if (ledSubarea.Type == LedSubareaType.PictureText)
						{
							using (IEnumerator<LedContent> enumerator = ledSubarea.Contents.GetEnumerator())
							{
								while (enumerator.MoveNext())
								{
									LedPictureText ledPictureText = (LedPictureText)enumerator.Current;
									ledPictureText.Draw();
								}
								goto IL_107;
							}
						}
						ledSubarea.Draw();
					}
					IL_107:
					this.BackgroundChangeSize(ledSubarea, this.nowPanel.IsMSeries());
				}
			}
		}

		private void newHolder_HolderEvent(LedContentEventType type, object sender)
		{
			if (this.nowItem == null)
			{
				return;
			}
			LedSubareaHolder ledSubareaHolder = (LedSubareaHolder)sender;
			LedSubarea subarea = ledSubareaHolder.Subarea;
			switch (type)
			{
			case LedContentEventType.Active:
				this.nowSubareaHolder = ledSubareaHolder;
				this.nowItem.SelectedSubarea = subarea;
				this.DisplaySubarea();
				this.FindNowSubareaNode(this.nowSubarea);
				return;
			case LedContentEventType.ChangeSize:
				this.SubareaShowParam();
				if (this.nowSubarea.Type == LedSubareaType.Animation)
				{
					LedAnimation ledAnimation = (LedAnimation)this.nowSubarea.SelectedContent;
					ledAnimation.Changed = true;
					this.BackgroundChangeSize(ledAnimation.Background);
					return;
				}
				if (this.nowSubarea.Type == LedSubareaType.PictureText)
				{
					for (int i = 0; i < this.nowSubarea.Contents.Count; i++)
					{
						LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.Contents[i];
						if (ledPictureText.PictureTextType == LedPictureTextType.Animation)
						{
							LedAnimation ledAnimation2 = (LedAnimation)ledPictureText;
							ledAnimation2.Changed = true;
							this.BackgroundChangeSize(ledAnimation2.Background);
						}
						else if (this.nowPanel.IsMSeries())
						{
							for (int j = 0; j < ledPictureText.Backgrounds.Count; j++)
							{
								this.BackgroundChangeSize(ledPictureText.Backgrounds[j]);
							}
						}
						else
						{
							this.BackgroundChangeSize(ledPictureText.Background);
						}
					}
					return;
				}
				if (this.nowPanel.IsMSeries())
				{
					for (int k = 0; k < this.nowSubarea.SelectedContent.Backgrounds.Count; k++)
					{
						this.BackgroundChangeSize(this.nowSubarea.SelectedContent.Backgrounds[k]);
					}
					return;
				}
				this.BackgroundChangeSize(this.nowSubarea.SelectedContent.Background);
				return;
			case LedContentEventType.Delete:
				this.nowItem.RemoveSubarea(subarea);
				this.RemoveNowSubareaNode(subarea);
				this.subareaHolderList.Remove(ledSubareaHolder);
				ledSubareaHolder.Dispose();
				return;
			case LedContentEventType.Hide:
			case LedContentEventType.Refresh:
			case LedContentEventType.Text:
			case LedContentEventType.Redraw:
			case LedContentEventType.MouseDown:
			case LedContentEventType.MouseUp:
				break;
			case LedContentEventType.Moving:
				if (this.nowSubarea == null || this.nowSubarea != subarea)
				{
					this.DisplaySubarea();
				}
				this.SubareaShowParam();
				break;
			default:
				return;
			}
		}

		private void BackgroundChangeSize(LedBackground pBackground)
		{
			if (pBackground == null)
			{
				return;
			}
			if (pBackground.CustomChecked)
			{
				pBackground.Draw(new System.Drawing.Size(this.nowSubarea.Width, this.nowSubarea.Height));
				return;
			}
			pBackground.Changed = true;
		}

		private void BackgroundChangeSize(LedSubarea subarea, bool IsMSeries)
		{
			if (IsMSeries)
			{
				for (int i = 0; i < subarea.Contents.Count; i++)
				{
					for (int j = 0; j < subarea.Contents[i].Backgrounds.Count; j++)
					{
						if (subarea.Contents[i].Backgrounds[j] != null && subarea.Contents[i].Backgrounds[j].Enabled)
						{
							subarea.Contents[i].Backgrounds[j].Changed = true;
						}
					}
				}
				return;
			}
			for (int k = 0; k < subarea.Contents.Count; k++)
			{
				if (subarea.Contents[k].Background != null && subarea.Contents[k].Background.Enabled)
				{
					subarea.Contents[k].Background.Changed = true;
				}
			}
		}

		private void RemoveNowSubareaNode(LedSubarea subarea)
		{
			System.Drawing.Color backColor = System.Drawing.Color.FromArgb(51, 153, 255);
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode == null)
			{
				return;
			}
			int level = selectedNode.Level;
			if (level != this.levelSubarea)
			{
				return;
			}
			TreeNode parent = selectedNode.Parent;
			TreeNode prevNode = selectedNode.PrevNode;
			TreeNode nextNode = selectedNode.NextNode;
			if (selectedNode.Tag != null && selectedNode.Tag == subarea)
			{
				if (parent != null)
				{
					if (this.nowItem.Subareas.Count == 0)
					{
						this.DisplayItem(parent);
						this.LedTreeELocation = parent.Bounds.Location;
						this.ledTree.SelectedNode = parent;
					}
					else
					{
						TreeNode treeNode = null;
						if (nextNode != null)
						{
							treeNode = nextNode;
						}
						else if (prevNode != null)
						{
							treeNode = prevNode;
						}
						if (treeNode != null)
						{
							treeNode.BackColor = backColor;
							this.LedTreeELocation = treeNode.Bounds.Location;
							this.ledTree.SelectedNode = treeNode;
							this.DisplaySubarea(treeNode);
						}
					}
				}
				selectedNode.Remove();
			}
		}

		private void FindNowSubareaNode(LedSubarea pSubarea)
		{
			System.Drawing.Color groupBox_BackColor = Template.GroupBox_BackColor;
			System.Drawing.Color backColor = System.Drawing.Color.FromArgb(51, 153, 255);
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode == null)
			{
				return;
			}
			int level = selectedNode.Level;
			if (level == this.levelSubarea)
			{
				selectedNode.BackColor = groupBox_BackColor;
				TreeNodeCollection nodes = selectedNode.Parent.Nodes;
				foreach (TreeNode treeNode in nodes)
				{
					if (treeNode.Tag.Equals(pSubarea))
					{
						treeNode.BackColor = backColor;
						if (treeNode.Parent != null && !treeNode.Parent.IsExpanded)
						{
							treeNode.Parent.Expand();
						}
						this.ledTree.SelectedNode = treeNode;
						break;
					}
				}
			}
			if (level == this.levelItem)
			{
				TreeNodeCollection nodes2 = selectedNode.Nodes;
				foreach (TreeNode treeNode2 in nodes2)
				{
					if (treeNode2.Tag.Equals(pSubarea))
					{
						treeNode2.BackColor = backColor;
						this.ledTree.SelectedNode = treeNode2;
						break;
					}
				}
				if (!selectedNode.IsExpanded)
				{
					selectedNode.Expand();
				}
			}
			if (level == this.levelPanel)
			{
				TreeNodeCollection nodes3 = selectedNode.Nodes;
				foreach (TreeNode treeNode3 in nodes3)
				{
					if (treeNode3.Tag.Equals(pSubarea.ParentItem))
					{
						treeNode3.BackColor = backColor;
						TreeNodeCollection nodes4 = treeNode3.Nodes;
						foreach (TreeNode treeNode4 in nodes4)
						{
							if (treeNode4.Tag.Equals(pSubarea))
							{
								treeNode4.BackColor = backColor;
								this.ledTree.SelectedNode = treeNode4;
								break;
							}
						}
						if (!treeNode3.IsExpanded)
						{
							treeNode3.Expand();
							break;
						}
						break;
					}
				}
				if (!selectedNode.IsExpanded)
				{
					selectedNode.Expand();
				}
			}
			if (level == this.levelGroup)
			{
				TreeNodeCollection nodes5 = selectedNode.Nodes;
				foreach (TreeNode treeNode5 in nodes5)
				{
					if (treeNode5.Tag.Equals(formMain.ledsys.SelectedPanel))
					{
						treeNode5.BackColor = backColor;
						TreeNodeCollection nodes6 = treeNode5.Nodes;
						foreach (TreeNode treeNode6 in nodes6)
						{
							if (treeNode6.Tag.Equals(pSubarea.ParentItem))
							{
								treeNode6.BackColor = backColor;
								TreeNodeCollection nodes7 = treeNode6.Nodes;
								foreach (TreeNode treeNode7 in nodes7)
								{
									if (treeNode7.Tag.Equals(pSubarea))
									{
										treeNode7.BackColor = backColor;
										this.ledTree.SelectedNode = treeNode7;
										break;
									}
								}
								if (!treeNode6.IsExpanded)
								{
									treeNode6.Expand();
									break;
								}
								break;
							}
						}
						if (!treeNode5.IsExpanded)
						{
							treeNode5.Expand();
							break;
						}
						break;
					}
				}
				if (!selectedNode.IsExpanded)
				{
					selectedNode.Expand();
				}
			}
		}

		private void addSubareaContentToolStripMenuItem_Click(object sender, EventArgs e)
		{
			LedSubarea ledSubarea = new LedSubarea();
			if (formMain.ledsys.SelectedPanel.SelectedItem.Subareas == null)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.Subareas = new List<LedSubarea>();
			}
			formMain.ledsys.SelectedPanel.SelectedItem.Subareas.Add(ledSubarea);
			ledSubarea.Name = "分区";
			TreeNode treeNode = new TreeNode();
			treeNode.Text = ledSubarea.Name;
			treeNode.ContextMenuStrip = this.contextMenuStripSubarea;
			treeNode.Tag = ledSubarea;
			this.ledTree.SelectedNode.Nodes.Add(treeNode);
			formMain.HideCheckBox(this.ledTree, treeNode);
		}

		private void DrawEmptyBackground()
		{
			foreach (LedSubareaHolder current in this.subareaHolderList)
			{
				current.Dispose();
			}
			this.subareaHolderList.Clear();
			System.Drawing.Size size = new System.Drawing.Size(0, 0);
			this.panelEdgeTop.Size = size;
			this.panelEdgeBottom.Size = size;
			this.panelEdgeLeft.Size = size;
			this.panelEdgeRight.Size = size;
			int value = 0;
			decimal zoom = formMain.ledsys.SelectedPanel.Zoom;
			this.panelCover.Size = new System.Drawing.Size((int)(formMain.ledsys.SelectedPanel.Width * zoom) + formMain.ScreenCoverWidth * 2, (int)(formMain.ledsys.SelectedPanel.Height * zoom) + formMain.ScreenCoverWidth * 2);
			this.screenPanelMain.Size = new System.Drawing.Size((int)(formMain.ledsys.SelectedPanel.Width * zoom) - (int)(value * zoom * 2m), (int)(formMain.ledsys.SelectedPanel.Height * zoom) - (int)(value * zoom * 2m));
			this.screenPanelMain.Location = new System.Drawing.Point(formMain.ScreenCoverWidth, formMain.ScreenCoverWidth);
			this.screenPanelMain.BackgroundImage = formMain.GetScreenBackImage();
			this.ShowPanelAttribute();
		}

		private void DrawScreenBackground()
		{
			if (this.nowPanel == null)
			{
				return;
			}
			if (this.nowPanel.SelectedItem == null)
			{
				this.DrawEmptyBackground();
				this.ResetPanelToolStrip();
				this.ResetPanelToolStrip();
				return;
			}
			this.nowItem = this.nowPanel.SelectedItem;
			if (this.nowPanel.IsMSeries())
			{
				this.colorfulBackgroundItem.LoadBackground(this.nowItem);
			}
			if (this.nowItem.Edge == null)
			{
				this.nowItem.AddEdge(formMain.NewEdgeData());
			}
			decimal zoom = this.nowPanel.Zoom;
			int num = 0;
			System.Drawing.Bitmap pBit = LedGlobal.LedEdgeList[this.nowItem.Edge.Index];
			if (this.nowItem.Edge.Enabled)
			{
				num = this.nowItem.Edge.Height;
			}
			this.panelCover.Size = new System.Drawing.Size((int)(this.nowPanel.Width * zoom) + formMain.ScreenCoverWidth * 2, (int)(this.nowPanel.Height * zoom) + formMain.ScreenCoverWidth * 2);
			this.screenPanelMain.Size = new System.Drawing.Size((int)(this.nowPanel.Width * zoom) - (int)(num * zoom * 2m), (int)(this.nowPanel.Height * zoom) - (int)(num * zoom * 2m));
			this.screenPanelMain.Location = new System.Drawing.Point(formMain.ScreenCoverWidth + (int)(zoom * num), formMain.ScreenCoverWidth + (int)(zoom * num));
			this.panelEdgeTop.Size = new System.Drawing.Size((int)(this.nowPanel.Width * zoom), (int)(num * zoom));
			this.panelEdgeTop.Location = new System.Drawing.Point(formMain.ScreenCoverWidth, formMain.ScreenCoverWidth);
			this.panelEdgeBottom.Size = new System.Drawing.Size((int)(this.nowPanel.Width * zoom), (int)(num * zoom));
			this.panelEdgeBottom.Location = new System.Drawing.Point(formMain.ScreenCoverWidth, formMain.ScreenCoverWidth + this.panelEdgeTop.Height + this.screenPanelMain.Height);
			this.panelEdgeLeft.Size = new System.Drawing.Size((int)(num * zoom), this.screenPanelMain.Height);
			this.panelEdgeLeft.Location = new System.Drawing.Point(formMain.ScreenCoverWidth, formMain.ScreenCoverWidth + this.panelEdgeTop.Height);
			this.panelEdgeRight.Size = new System.Drawing.Size((int)(num * zoom), this.screenPanelMain.Height);
			this.panelEdgeRight.Location = new System.Drawing.Point(formMain.ScreenCoverWidth + this.screenPanelMain.Width + this.panelEdgeRight.Width, formMain.ScreenCoverWidth + this.panelEdgeTop.Height);
			this.DrawItemEdgePanel(pBit, num, zoom);
			this.screenPanelMain.BackgroundImage = formMain.GetScreenBackImage();
			this.screenPanelMain.BringToFront();
			this.ResetPanelToolStrip();
			this.ResetPanelToolStrip();
		}

		private static System.Drawing.Bitmap GetScreenBackImage()
		{
			System.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(1, 1);
			int num;
			if (formMain.ledsys.SelectedPanel.Zoom < 3m)
			{
				num = 1;
			}
			else
			{
				num = (int)formMain.ledsys.SelectedPanel.Zoom;
			}
			bitmap = new System.Drawing.Bitmap(num, num);
			System.Drawing.Brush brush = new System.Drawing.SolidBrush(System.Drawing.Color.FromArgb(100, 100, 100));
			System.Drawing.Pen pen = new System.Drawing.Pen(System.Drawing.Color.FromArgb(110, 110, 110));
			System.Drawing.Graphics graphics = System.Drawing.Graphics.FromImage(bitmap);
			if (formMain.ledsys.SelectedPanel.Zoom < 3m)
			{
				graphics.FillRectangle(brush, 0, 0, bitmap.Width, bitmap.Height);
			}
			else
			{
				graphics.FillRectangle(brush, 0, 0, bitmap.Width, bitmap.Height);
				graphics.DrawLine(pen, 0, 0, 0, bitmap.Height);
				graphics.DrawLine(pen, 0, 0, bitmap.Width, 0);
			}
			return bitmap;
		}

		private void DrawItemEdgePanel(System.Drawing.Bitmap pBit, int pEdgeHeight, decimal pZonn)
		{
			if (pEdgeHeight * pZonn < 1.0m)
			{
				return;
			}
			if (pBit == null)
			{
				return;
			}
			if (pEdgeHeight == 0)
			{
				return;
			}
			try
			{
				this.panelEdgeBottom.BackgroundImage.Dispose();
				this.panelEdgeLeft.BackgroundImage.Dispose();
				this.panelEdgeRight.BackgroundImage.Dispose();
				this.panelEdgeTop.BackgroundImage.Dispose();
			}
			catch
			{
			}
			System.Drawing.Bitmap bitmap = LedGraphics.Scale(pBit, pZonn);
			System.Drawing.Brush brush = new System.Drawing.TextureBrush(bitmap);
			System.Drawing.Bitmap bitmap2 = new System.Drawing.Bitmap(this.panelEdgeTop.Width, this.panelEdgeTop.Height);
			System.Drawing.Graphics graphics = System.Drawing.Graphics.FromImage(bitmap2);
			graphics.FillRectangle(brush, 0, 0, bitmap2.Width, bitmap2.Height);
			this.panelEdgeTop.BackgroundImage = LedGraphics.Grid(bitmap2, pZonn);
			System.Drawing.Bitmap bitmap3 = new System.Drawing.Bitmap(this.panelEdgeBottom.Width, this.panelEdgeBottom.Height);
			System.Drawing.Graphics graphics2 = System.Drawing.Graphics.FromImage(bitmap3);
			graphics2.FillRectangle(brush, 0, 0, bitmap3.Width, bitmap3.Height);
			bitmap3.RotateFlip(System.Drawing.RotateFlipType.Rotate270FlipNone);
			bitmap3.RotateFlip(System.Drawing.RotateFlipType.Rotate270FlipNone);
			this.panelEdgeBottom.BackgroundImage = LedGraphics.Grid(bitmap3, pZonn);
			System.Drawing.Bitmap bitmap4 = new System.Drawing.Bitmap(this.panelEdgeLeft.Height, this.panelEdgeLeft.Width);
			System.Drawing.Graphics graphics3 = System.Drawing.Graphics.FromImage(bitmap4);
			graphics3.FillRectangle(brush, 0, 0, bitmap4.Width, bitmap4.Height);
			bitmap4 = LedGraphics.Grid(bitmap4, pZonn);
			bitmap4.RotateFlip(System.Drawing.RotateFlipType.Rotate270FlipNone);
			this.panelEdgeLeft.BackgroundImage = bitmap4;
			System.Drawing.Bitmap bitmap5 = new System.Drawing.Bitmap(this.panelEdgeLeft.Height, this.panelEdgeLeft.Width);
			System.Drawing.Graphics graphics4 = System.Drawing.Graphics.FromImage(bitmap5);
			graphics4.FillRectangle(brush, 0, 0, bitmap5.Width, bitmap5.Height);
			bitmap5.RotateFlip(System.Drawing.RotateFlipType.Rotate270FlipNone);
			bitmap5.RotateFlip(System.Drawing.RotateFlipType.Rotate270FlipNone);
			bitmap5.RotateFlip(System.Drawing.RotateFlipType.Rotate270FlipNone);
			this.panelEdgeRight.BackgroundImage = LedGraphics.Grid(bitmap5, pZonn);
		}

		private void itemClosedCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (checkBox.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.Closed = true;
			}
			else
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.Closed = false;
			}
			this.itemLockedCheckBox.Enabled = !checkBox.Checked;
			this.itemByPeroidCheckBox.Enabled = !checkBox.Checked;
			this.itemPlaySettingGroupBox.Enabled = !checkBox.Checked;
			this.itemByPeroidGroupBox.Enabled = (!checkBox.Checked && this.itemByPeroidCheckBox.Checked);
		}

		private void itemLockedCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			TreeNode selectedNode = this.ledTree.SelectedNode;
			bool @checked = checkBox.Checked;
			if (selectedNode == null || selectedNode.Level != this.levelItem)
			{
				return;
			}
			if (selectedNode.Tag == null || selectedNode.Tag.GetType() != typeof(LedItem))
			{
				return;
			}
			LedItem ledItem = (LedItem)selectedNode.Tag;
			if (@checked)
			{
				formMain.ledsys.SelectedPanel.LockedItemNo = this.ledTree.SelectedNode.Index + 1;
				for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
				{
					formMain.ledsys.SelectedPanel.Items[i].PlaySetting.Locked = false;
				}
				if (ledItem.Shared)
				{
					foreach (string current in ledItem.SharedItemOfPanelIDs)
					{
						foreach (LedPanel current2 in formMain.ledsys.Panels)
						{
							if (current == current2.ID)
							{
								using (IEnumerator<LedItem> enumerator3 = current2.Items.GetEnumerator())
								{
									while (enumerator3.MoveNext())
									{
										LedItem current3 = enumerator3.Current;
										current3.PlaySetting.Locked = false;
									}
									break;
								}
							}
						}
					}
				}
				ledItem.PlaySetting.Locked = @checked;
			}
			else
			{
				ledItem.PlaySetting.Locked = @checked;
				bool flag = false;
				for (int j = 0; j < formMain.ledsys.SelectedPanel.Items.Count; j++)
				{
					if (formMain.ledsys.SelectedPanel.Items[j].PlaySetting.Locked)
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					formMain.ledsys.SelectedPanel.LockedItemNo = 0;
				}
			}
			if (selectedNode.Parent != null && selectedNode.Parent.Nodes != null)
			{
				foreach (TreeNode treeNode in selectedNode.Parent.Nodes)
				{
					if (treeNode != null && treeNode.Tag != null && (!(treeNode.Tag.GetType() != typeof(LedItem)) || !(treeNode.Tag.GetType() != typeof(LedSharedItem))))
					{
						LedItem ledItem2 = (LedItem)treeNode.Tag;
						if (ledItem2.ID != ledItem.ID)
						{
							if (ledItem2.Shared)
							{
								if (treeNode.ImageIndex != 5)
								{
									treeNode.ImageIndex = 5;
									treeNode.SelectedImageIndex = 5;
								}
								if (treeNode.Parent == null || treeNode.Parent.Parent == null || treeNode.Parent.Parent.Nodes == null)
								{
									continue;
								}
								IEnumerator enumerator5 = treeNode.Parent.Parent.Nodes.GetEnumerator();
								try
								{
									while (enumerator5.MoveNext())
									{
										TreeNode treeNode2 = (TreeNode)enumerator5.Current;
										if (treeNode2 != null && treeNode2.Tag != null && !(treeNode2.Tag.GetType() != typeof(LedPanel)))
										{
											LedPanel ledPanel = (LedPanel)treeNode2.Tag;
											foreach (string current4 in ledItem2.SharedItemOfPanelIDs)
											{
												if (ledPanel.ID == current4)
												{
													foreach (TreeNode treeNode3 in treeNode2.Nodes)
													{
														if (treeNode3 != null && treeNode3.Tag != null && !(treeNode3.Tag.GetType() != typeof(LedSharedItem)))
														{
															LedSharedItem ledSharedItem = (LedSharedItem)treeNode3.Tag;
															if (ledSharedItem.ID == ledItem2.ID && treeNode3.ImageIndex != 7)
															{
																treeNode3.ImageIndex = 7;
																treeNode3.SelectedImageIndex = 7;
															}
														}
													}
												}
											}
										}
									}
									continue;
								}
								finally
								{
									IDisposable disposable2 = enumerator5 as IDisposable;
									if (disposable2 != null)
									{
										disposable2.Dispose();
									}
								}
							}
							if (ledItem2.GetType() == typeof(LedSharedItem))
							{
								if (treeNode.Parent == null || treeNode.Parent.Parent == null || treeNode.Parent.Parent.Nodes == null)
								{
									continue;
								}
								IEnumerator enumerator8 = treeNode.Parent.Parent.Nodes.GetEnumerator();
								try
								{
									while (enumerator8.MoveNext())
									{
										TreeNode treeNode4 = (TreeNode)enumerator8.Current;
										if (treeNode4 != null && treeNode4.Tag != null && !(treeNode4.Tag.GetType() != typeof(LedPanel)))
										{
											LedPanel ledPanel2 = (LedPanel)treeNode4.Tag;
											if (ledPanel2.ID == ledItem2.ParentPanel.ID)
											{
												foreach (TreeNode treeNode5 in treeNode4.Nodes)
												{
													if (treeNode5 != null && treeNode5.Tag != null && !(treeNode5.Tag.GetType() != typeof(LedItem)))
													{
														LedItem ledItem3 = (LedItem)treeNode5.Tag;
														if (ledItem3.ID == ledItem2.ID && treeNode5.ImageIndex != 5)
														{
															treeNode5.ImageIndex = 5;
															treeNode5.SelectedImageIndex = 5;
														}
													}
												}
											}
											foreach (string current5 in ledItem2.SharedItemOfPanelIDs)
											{
												if (ledPanel2.ID == current5)
												{
													foreach (TreeNode treeNode6 in treeNode4.Nodes)
													{
														if (treeNode6 != null && treeNode6.Tag != null && !(treeNode6.Tag.GetType() != typeof(LedSharedItem)))
														{
															LedSharedItem ledSharedItem2 = (LedSharedItem)treeNode6.Tag;
															if (ledSharedItem2.ID == ledItem2.ID && treeNode6.ImageIndex != 7)
															{
																treeNode6.ImageIndex = 7;
																treeNode6.SelectedImageIndex = 7;
															}
														}
													}
												}
											}
										}
									}
									continue;
								}
								finally
								{
									IDisposable disposable5 = enumerator8 as IDisposable;
									if (disposable5 != null)
									{
										disposable5.Dispose();
									}
								}
							}
							if (!ledItem2.PlaySetting.Locked && treeNode.ImageIndex != 3)
							{
								treeNode.ImageIndex = 3;
								treeNode.SelectedImageIndex = 3;
							}
						}
					}
				}
			}
			if (ledItem.Shared)
			{
				selectedNode.ImageIndex = ((!@checked) ? 5 : 6);
				selectedNode.SelectedImageIndex = ((!@checked) ? 5 : 6);
			}
			else
			{
				selectedNode.ImageIndex = ((!@checked) ? 3 : 4);
				selectedNode.SelectedImageIndex = ((!@checked) ? 3 : 4);
			}
			if (ledItem.Shared && this.ledTree.Nodes != null && this.ledTree.Nodes.Count > 0)
			{
				foreach (TreeNode treeNode7 in this.ledTree.Nodes)
				{
					if (treeNode7 != null && treeNode7.Tag != null && !(treeNode7.Tag.GetType() != typeof(LedGroup)) && treeNode7.Nodes != null)
					{
						foreach (TreeNode treeNode8 in treeNode7.Nodes)
						{
							if (treeNode8 != null && treeNode8.Tag != null && !(treeNode8.Tag.GetType() != typeof(LedPanel)))
							{
								LedPanel ledPanel3 = (LedPanel)treeNode8.Tag;
								foreach (string current6 in ledItem.SharedItemOfPanelIDs)
								{
									if (ledPanel3.ID == current6)
									{
										foreach (TreeNode treeNode9 in treeNode8.Nodes)
										{
											if (treeNode9 != null && treeNode9.Tag != null && (!(treeNode9.Tag.GetType() != typeof(LedSharedItem)) || !(treeNode9.Tag.GetType() != typeof(LedItem))))
											{
												LedItem ledItem4 = (LedItem)treeNode9.Tag;
												if (ledItem4.ID == ledItem.ID)
												{
													treeNode9.ImageIndex = ((!@checked) ? 7 : 8);
													treeNode9.SelectedImageIndex = ((!@checked) ? 7 : 8);
												}
												else if (ledItem4.Shared)
												{
													if (treeNode9.ImageIndex != 5)
													{
														treeNode9.ImageIndex = 5;
														treeNode9.SelectedImageIndex = 5;
													}
												}
												else if (ledItem4.GetType() == typeof(LedSharedItem))
												{
													if (treeNode9.ImageIndex != 7)
													{
														treeNode9.ImageIndex = 7;
														treeNode9.SelectedImageIndex = 7;
													}
												}
												else if (treeNode9.ImageIndex != 3)
												{
													treeNode9.ImageIndex = 3;
													treeNode9.SelectedImageIndex = 3;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			this.itemClosedCheckBox.Enabled = !@checked;
		}

		private void itemByPeroidCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (checkBox.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.TimerPlayed = true;
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayWay = LedPlayWay.Timer;
				this.itemByPeroidGroupBox.Enabled = true;
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.TimerPlayed = false;
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayWay = LedPlayWay.Normal;
			this.itemByPeroidGroupBox.Enabled = false;
		}

		private void itemNameTextBox_TextChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			TextBox textBox = (TextBox)sender;
			if (!textBox.Focused)
			{
				return;
			}
			if (this.itemNameTextBox.Text.Trim().Length > 0)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.TextName = this.itemNameTextBox.Text.Trim();
				if (this.ledTree.SelectedNode.Level == this.levelItem)
				{
					this.ledTree.SelectedNode.Text = this.itemNameTextBox.Text.Trim();
				}
			}
		}

		private void itemByNumRadioButton_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			RadioButton radioButton = (RadioButton)sender;
			if (radioButton.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayMode = LedPlayMode.Number;
				this.itemByNumPanel.BringToFront();
			}
		}

		private void itemByTimeLengthRadioButton_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			RadioButton radioButton = (RadioButton)sender;
			if (radioButton.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayMode = LedPlayMode.TimeSpan;
				this.itemByTimeLengthPanel.BringToFront();
			}
		}

		private System.Drawing.Rectangle GetMaxRectangle(LedItem pItem, LedSubarea pSubarea)
		{
			for (int i = 0; i < pItem.Subareas.Count; i++)
			{
				if (!(pSubarea.ID == pItem.Subareas[i].ID) && pSubarea.Frame.IntersectsWith(pItem.Subareas[i].Frame))
				{
					return new System.Drawing.Rectangle(1, 1, 1, 1);
				}
			}
			System.Drawing.Rectangle frame = pSubarea.Frame;
			while (frame.X > 0)
			{
				frame.X--;
				for (int j = 0; j < pItem.Subareas.Count; j++)
				{
					if (!(pSubarea.ID == pItem.Subareas[j].ID) && frame.IntersectsWith(pItem.Subareas[j].Frame))
					{
						frame.X++;
						goto IL_EE;
					}
				}
			}
			IL_EE:
			int x = frame.X;
			frame.X = pSubarea.X;
			while (frame.Y > 0)
			{
				frame.Y--;
				for (int k = 0; k < pItem.Subareas.Count; k++)
				{
					if (!(pSubarea.ID == pItem.Subareas[k].ID) && frame.IntersectsWith(pItem.Subareas[k].Frame))
					{
						frame.Y++;
						goto IL_183;
					}
				}
			}
			IL_183:
			frame.X = x;
			int y = frame.Y;
			frame.Y = pSubarea.Y;
			int num = (pItem != null) ? pItem.GetWidth() : formMain.ledsys.SelectedPanel.SelectedItem.GetWidth();
			while (frame.X + frame.Width < num)
			{
				frame.Width++;
				for (int l = 0; l < pItem.Subareas.Count; l++)
				{
					if (!(pSubarea.ID == pItem.Subareas[l].ID) && frame.IntersectsWith(pItem.Subareas[l].Frame))
					{
						frame.Width--;
						goto IL_24D;
					}
				}
			}
			IL_24D:
			frame.X = pSubarea.X;
			frame.Y = y;
			int width = frame.Width;
			frame.Width = pSubarea.Frame.Width;
			int num2 = (pItem != null) ? pItem.GetHeight() : formMain.ledsys.SelectedPanel.SelectedItem.GetHeight();
			while (frame.Y + frame.Height < num2)
			{
				frame.Height++;
				for (int m = 0; m < pItem.Subareas.Count; m++)
				{
					if (!(pSubarea.ID == pItem.Subareas[m].ID) && frame.IntersectsWith(pItem.Subareas[m].Frame))
					{
						frame.Height--;
						goto IL_32E;
					}
				}
			}
			IL_32E:
			frame.X = x;
			frame.Width = width;
			if (pItem.Edge.Enabled)
			{
				if (frame.X + frame.Width > pItem.ParentPanel.Width - pItem.Edge.Height * 2)
				{
					frame.Width = pItem.ParentPanel.Width - pItem.Edge.Height * 2 - frame.X;
				}
				if (frame.Y + frame.Height > pItem.ParentPanel.Height - pItem.Edge.Height * 2)
				{
					frame.Height = pItem.ParentPanel.Height - pItem.Edge.Height * 2 - frame.Y;
				}
			}
			return frame;
		}

		private void itemByAstTimerRadioButton_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			RadioButton radioButton = (RadioButton)sender;
			if (radioButton.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayMode = LedPlayMode.AstronomicalClock;
				this.itemByAstTimerPanel.BringToFront();
			}
		}

		private void itemPlayTimerByWeekRadioButton_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			RadioButton radioButton = (RadioButton)sender;
			if (radioButton.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayTimerMode = LedPlayTimerMode.Weekly;
				this.itemPlayTimerByWeekPanel.BringToFront();
				this.itemPlayTimerByWeekPanel.Visible = true;
			}
		}

		private void itemPlayTimerByDateRadioButton_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			RadioButton radioButton = (RadioButton)sender;
			if (radioButton.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayTimerMode = LedPlayTimerMode.ByDate;
				this.itemPlayTimerByDatePanel.BringToFront();
				this.itemPlayTimerByDatePanel.Visible = true;
			}
		}

		private void itemPlayTimerEverydayRadioButton_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			RadioButton radioButton = (RadioButton)sender;
			if (radioButton.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayTimerMode = LedPlayTimerMode.Everyday;
				this.itemPlayTimerByWeekPanel.Visible = false;
				this.itemPlayTimerByDatePanel.Visible = false;
			}
		}

		private void itemTimerWeekMondayCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			CheckBox checkBox = (CheckBox)sender;
			string text = checkBox.Tag.ToString();
			if (!checkBox.Focused)
			{
				return;
			}
			string key2;
			if (checkBox.Checked)
			{
				string key;
				switch (key = text)
				{
				case "1":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.MondayChecked = true;
					return;
				case "2":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.TuesdayChecked = true;
					return;
				case "3":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.WednesdayChecked = true;
					return;
				case "4":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.ThursdayChecked = true;
					return;
				case "5":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.FridayChecked = true;
					return;
				case "6":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.SaturdayChecked = true;
					return;
				case "0":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.SundayChecked = true;
					return;

					return;
				}
			}
			else
				switch (key2 = text)
				{
				case "1":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.MondayChecked = false;
					return;
				case "2":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.TuesdayChecked = false;
					return;
				case "3":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.WednesdayChecked = false;
					return;
				case "4":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.ThursdayChecked = false;
					return;
				case "5":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.FridayChecked = false;
					return;
				case "6":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.SaturdayChecked = false;
					return;
				case "0":
					formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.SundayChecked = false;
					break;

					return;
				}
		}

		private void itemTimerNoGap_CheckedChanged(object sender, EventArgs e)
		{
			if (this.nowItem == null)
			{
				return;
			}
			CheckBox checkBox = (CheckBox)sender;
			if (checkBox.Checked)
			{
				formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.ContinuousPlayed = true;
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.ContinuousPlayed = false;
		}

		private void itemTimerStartDate_ValueChanged(object sender, EventArgs e)
		{
			DateTimePicker dateTimePicker = (DateTimePicker)sender;
			if (!dateTimePicker.Focused)
			{
				return;
			}
			if ((dateTimePicker.Value - this.itemTimerEndDate.Value).TotalMilliseconds > 0.0)
			{
				dateTimePicker.Value = formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.StartDate;
				MessageBox.Show(formMain.ML.GetStr("formMain_Message_StartDateLimit"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.StartDate = dateTimePicker.Value;
		}

		private void itemTimerEndDate_ValueChanged(object sender, EventArgs e)
		{
			DateTimePicker dateTimePicker = (DateTimePicker)sender;
			if (!dateTimePicker.Focused)
			{
				return;
			}
			if ((dateTimePicker.Value - this.itemTimerStartDate.Value).TotalMilliseconds < 0.0)
			{
				dateTimePicker.Value = formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.EndDate;
				MessageBox.Show(formMain.ML.GetStr("formMain_Message_EndDateLimit"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.EndDate = dateTimePicker.Value;
		}

		private void itemTimerStartTime_ValueChanged(object sender, EventArgs e)
		{
			DateTimePicker dateTimePicker = (DateTimePicker)sender;
			if (!dateTimePicker.Focused)
			{
				return;
			}
			if (dateTimePicker.Value.Hour * 3600 + dateTimePicker.Value.Minute * 60 - (this.itemTimerEndTime.Value.Hour * 3600 + this.itemTimerEndTime.Value.Minute * 60) > 0)
			{
				dateTimePicker.Value = formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.StartTime;
				MessageBox.Show(formMain.ML.GetStr("formMain_Message_StartTimeLimit"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.StartTime = dateTimePicker.Value;
		}

		private void itemTimerEndTime_ValueChanged(object sender, EventArgs e)
		{
			DateTimePicker dateTimePicker = (DateTimePicker)sender;
			if (!dateTimePicker.Focused)
			{
				return;
			}
			if (dateTimePicker.Value.Hour * 3600 + dateTimePicker.Value.Minute * 60 - (this.itemTimerStartTime.Value.Hour * 3600 + this.itemTimerStartTime.Value.Minute * 60) < 0)
			{
				dateTimePicker.Value = formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.EndTime;
				MessageBox.Show(formMain.ML.GetStr("formMain_Message_EndTimeLimit"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.EndTime = dateTimePicker.Value;
		}

		private void itemPlaySeetingPlayNum_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			if (!numericUpDown.Focused)
			{
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayCount = (int)numericUpDown.Value;
		}

		private void itemPlayLengthDay_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			if (!numericUpDown.Focused)
			{
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.PlaySetting.PlayDuration = (int)this.itemPlayLengthDay.Value * 24 * 3600 + (int)this.itemPlayLengthHour.Value * 3600 + (int)this.itemPlayLengthMinute.Value * 60 + (int)this.itemPlayLengthSecond.Value;
		}

		private void newHolder_Enter(object sender, EventArgs e)
		{
			System.Drawing.Point autoScrollPosition = this.panel_Item.AutoScrollPosition;
			AutoScrollPositionDelegate method = new AutoScrollPositionDelegate(this.SetAutoScrollPosition);
			object[] args = new object[]
			{
				this.panel_Item,
				autoScrollPosition
			};
			base.BeginInvoke(method, args);
		}

		private void Holder_Enter(EventArgs e)
		{
			if (base.Parent is Panel)
			{
				System.Drawing.Point autoScrollPosition = this.panel_Item.AutoScrollPosition;
				AutoScrollPositionDelegate method = new AutoScrollPositionDelegate(this.SetAutoScrollPosition);
				object[] args = new object[]
				{
					this.panel_Item,
					autoScrollPosition
				};
				base.BeginInvoke(method, args);
			}
		}

		private void SetAutoScrollPosition(ScrollableControl sender, System.Drawing.Point p)
		{
			p.X = Math.Abs(p.X);
			p.Y = Math.Abs(p.Y);
			sender.AutoScrollPosition = p;
		}

		private void itemEdgeList_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (formMain.ledsys.SelectedPanel.SelectedItem.CheckEdgeValid(LedGlobal.LedEdgeList[comboBox.SelectedIndex].Height))
			{
				formMain.ledsys.SelectedPanel.SelectedItem.Edge.Index = comboBox.SelectedIndex;
				formMain.ledsys.SelectedPanel.SelectedItem.Edge.Height = LedGlobal.LedEdgeList[comboBox.SelectedIndex].Height;
				this.DrawScreenBackground();
				base.Invoke(new ChangeSubareaSizeByEdgeHeight(this.SetSubareaSizeByEdgeHeight), new object[]
				{
					formMain.ledsys.SelectedPanel.SelectedItem.Edge.Height
				});
				return;
			}
			MessageBox.Show(this, formMain.ML.GetStr("Prompt_EdgeHeightOverSize"));
		}

		private void itemEdgeMode_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.Edge.Mode = (LedEdgeMode)comboBox.SelectedIndex;
		}

		private void itemEdgeSpeed_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			formMain.ledsys.SelectedPanel.SelectedItem.Edge.Speed = int.Parse(comboBox.Text.Trim());
		}

		private void ItemShowEdgeParam()
		{
			if (formMain.ledsys.SelectedPanel.SelectedItem.Edge.Enabled)
			{
				this.ItemEnableEdge();
			}
			else
			{
				this.ItemDisableEdge();
			}
			this.itemUseEdge.Checked = formMain.ledsys.SelectedPanel.SelectedItem.Edge.Enabled;
			try
			{
				this.itemEdgeList.SelectedIndex = formMain.ledsys.SelectedPanel.SelectedItem.Edge.Index;
				this.itemEdgeMode.SelectedIndex = (int)formMain.ledsys.SelectedPanel.SelectedItem.Edge.Mode;
			}
			catch
			{
			}
			this.itemEdgeSpeed.Text = formMain.ledsys.SelectedPanel.SelectedItem.Edge.Speed.ToString();
		}

		private void ItemEnableEdge()
		{
			this.itemEdgeList.Enabled = true;
			this.itemEdgeMode.Enabled = true;
			this.itemEdgeSpeed.Enabled = true;
		}

		private void ItemDisableEdge()
		{
			this.itemEdgeList.Enabled = false;
			this.itemEdgeMode.Enabled = false;
			this.itemEdgeSpeed.Enabled = false;
		}

		private void itemUseEdge_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (checkBox.Checked)
			{
				int arg_2A_0 = formMain.ledsys.SelectedPanel.Height;
				int arg_44_0 = formMain.ledsys.SelectedPanel.SelectedItem.Edge.Height;
				int arg_54_0 = formMain.ledsys.SelectedPanel.Width;
				int arg_6E_0 = formMain.ledsys.SelectedPanel.SelectedItem.Edge.Height;
				if (!formMain.ledsys.SelectedPanel.SelectedItem.CheckEdgeValid(formMain.ledsys.SelectedPanel.SelectedItem.Edge.Height))
				{
					checkBox.Checked = false;
					MessageBox.Show(this, formMain.ML.GetStr("Prompt_EdgeHeightOverSize"));
					return;
				}
				this.ItemEnableEdge();
			}
			else
			{
				this.ItemDisableEdge();
			}
			formMain.ledsys.SelectedPanel.SelectedItem.Edge.Enabled = checkBox.Checked;
			this.DrawScreenBackground();
			if (checkBox.Checked)
			{
				this.CheckSubareaSize(formMain.ledsys.SelectedPanel.SelectedItem);
				this.DisplayItem(LedDisplayMode.Load);
				return;
			}
			this.Subarea_ChangeZoom();
		}

		private void SetSubareaSizeByEdgeHeight(int pHeight)
		{
			foreach (LedSubarea current in formMain.ledsys.SelectedPanel.SelectedItem.Subareas)
			{
				this.nowSubarea = current;
				this.FindNowSubareaHolder();
				int arg_3B_0 = current.Height;
				int arg_42_0 = current.Width;
				bool flag = false;
				if (current.Y + current.Height > formMain.ledsys.SelectedPanel.SelectedItem.GetHeight())
				{
					current.Height = formMain.ledsys.SelectedPanel.SelectedItem.GetHeight() - current.Y;
					flag = true;
				}
				if (current.X + current.Width > formMain.ledsys.SelectedPanel.SelectedItem.GetWidth())
				{
					current.Width = formMain.ledsys.SelectedPanel.SelectedItem.GetWidth() - current.X;
					flag = true;
				}
				if (flag)
				{
					if (this.nowSubarea.Type == LedSubareaType.Animation)
					{
						LedAnimation ledAnimation = (LedAnimation)this.nowSubarea.SelectedContent;
						ledAnimation.Changed = true;
						this.BackgroundChangeSize(ledAnimation.Background);
					}
					else if (this.nowSubarea.Type == LedSubareaType.PictureText)
					{
						for (int i = 0; i < this.nowSubarea.Contents.Count; i++)
						{
							LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.Contents[i];
							if (ledPictureText.PictureTextType == LedPictureTextType.Animation)
							{
								LedAnimation ledAnimation2 = (LedAnimation)ledPictureText;
								ledAnimation2.Changed = true;
								this.BackgroundChangeSize(ledAnimation2.Background);
							}
							else
							{
								ledPictureText.Draw();
								this.BackgroundChangeSize(ledPictureText.Background);
							}
						}
					}
					else
					{
						this.BackgroundChangeSize(this.nowSubarea.SelectedContent.Background);
					}
					this.RedrawSubarea();
				}
			}
		}

		private void timerSubareaRefresh_Tick(object sender, EventArgs e)
		{
			LedSubareaHolder arg_06_0 = this.nowSubareaHolder;
		}

		private void Subarea_FindActiveSubarea()
		{
			if (this.subareaHolderList != null && this.subareaHolderList.Count > 0)
			{
				foreach (LedSubareaHolder current in this.subareaHolderList)
				{
					if (this.nowSubarea.Equals(current.Subarea))
					{
						if (current.isActivated)
						{
							break;
						}
						current.Activate();
					}
					else if (current.isActivated)
					{
						current.Deactivate();
					}
				}
			}
		}

		private void Subarea_DeactiveSubarea()
		{
			if (this.subareaHolderList != null && this.subareaHolderList.Count > 0)
			{
				foreach (LedSubareaHolder current in this.subareaHolderList)
				{
					if (current != null && current.isActivated)
					{
						current.Deactivate();
					}
				}
			}
		}

		private void SubareaShowParam()
		{
			try
			{
				this.subareaTitle.Text = formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea.Name;
				this.subareaLocaltionX.Value = formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea.X;
				this.subareaLocaltionY.Value = formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea.Y;
				this.subareaSizeWidth.Value = formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea.Width;
				this.subareaSizeHeight.Value = formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea.Height;
			}
			catch
			{
			}
		}

		private void subareaLocaltionX_ValueChanged(object sender, EventArgs e)
		{
			if (this.isLoadingParm)
			{
				return;
			}
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			if (!numericUpDown.Focused && !this.isSubareaLocationXKeyDown)
			{
				return;
			}
			this.isSubareaLocationXKeyDown = false;
			this.nowSubareaHolder.Subarea.X = (int)numericUpDown.Value;
			if (this.nowSubarea.X + this.nowSubarea.Width > formMain.ledsys.SelectedPanel.SelectedItem.GetWidth())
			{
				this.nowSubarea.X = formMain.ledsys.SelectedPanel.SelectedItem.GetWidth() - this.nowSubarea.Width;
				numericUpDown.Value = this.nowSubarea.X;
			}
			this.nowSubareaHolder.ResetHolderPosition();
		}

		private void subareaLocaltionY_ValueChanged(object sender, EventArgs e)
		{
			if (this.isLoadingParm)
			{
				return;
			}
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			if (!numericUpDown.Focused && !this.isSubareaLocationYKeyDown)
			{
				return;
			}
			this.isSubareaLocationYKeyDown = false;
			this.nowSubareaHolder.Subarea.Y = (int)numericUpDown.Value;
			if (this.nowSubarea.Y + this.nowSubarea.Height > formMain.ledsys.SelectedPanel.SelectedItem.GetHeight())
			{
				this.nowSubarea.Y = formMain.ledsys.SelectedPanel.SelectedItem.GetHeight() - this.nowSubarea.Height;
				numericUpDown.Value = this.nowSubarea.Y;
			}
			this.nowSubareaHolder.ResetHolderPosition();
		}

		private void subareaSizeWidth_ValueChanged(object sender, EventArgs e)
		{
			if (this.isLoadingParm)
			{
				return;
			}
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			if (!numericUpDown.Focused && !this.isSubareaSizeWidthMouseWheel)
			{
				return;
			}
			this.isSubareaSizeWidthMouseWheel = false;
			this.nowSubareaHolder.Subarea.Width = (int)numericUpDown.Value;
			if (this.nowSubarea.Width + this.nowSubarea.X > formMain.ledsys.SelectedPanel.SelectedItem.GetWidth())
			{
				this.nowSubarea.Width = formMain.ledsys.SelectedPanel.SelectedItem.GetWidth() - this.nowSubarea.X;
				numericUpDown.Value = this.nowSubarea.Width;
			}
			this.nowSubareaHolder.ResetHolderPosition();
			this.RedrawSubarea();
		}

		private void subareaSizeHeight_ValueChanged(object sender, EventArgs e)
		{
			if (this.isLoadingParm)
			{
				return;
			}
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			if (!numericUpDown.Focused && !this.isSubareaSizeHeightMouseWheel)
			{
				return;
			}
			this.isSubareaSizeHeightMouseWheel = false;
			this.nowSubareaHolder.Subarea.Height = (int)numericUpDown.Value;
			if (this.nowSubarea.Height + this.nowSubarea.Y > formMain.ledsys.SelectedPanel.SelectedItem.GetHeight())
			{
				this.nowSubarea.Height = formMain.ledsys.SelectedPanel.SelectedItem.GetHeight() - this.nowSubarea.Y;
				numericUpDown.Value = this.nowSubarea.Height;
			}
			this.nowSubareaHolder.ResetHolderPosition();
			this.RedrawSubarea();
		}

		private void subareaLocaltionX_KeyDown(object sender, KeyEventArgs e)
		{
			this.isSubareaLocationXKeyDown = true;
		}

		private void subareaLocaltionY_KeyDown(object sender, KeyEventArgs e)
		{
			this.isSubareaLocationYKeyDown = true;
		}

		private void subareaSizeWidth_KeyDown(object sender, KeyEventArgs e)
		{
			this.isSubareaSizeWidthKeyDown = true;
		}

		private void subareaSizeHeight_KeyDown(object sender, KeyEventArgs e)
		{
			this.isSubareaSizeHeightKeyDown = true;
		}

		private void subareaLocaltionX_TextChanged(object sender, EventArgs e)
		{
			if (!this.isSubareaLocationXKeyDown)
			{
				return;
			}
			this.isSubareaLocationXKeyDown = false;
			TextBox textBox = (TextBox)sender;
			int num = 0;
			if (!string.IsNullOrEmpty(textBox.Text))
			{
				num = int.Parse(textBox.Text);
			}
			if (string.IsNullOrEmpty(textBox.Text))
			{
				this.nowSubarea.X = 0;
				textBox.Text = this.nowSubarea.X.ToString();
			}
			else if (num + this.nowSubarea.Width > formMain.ledsys.SelectedPanel.SelectedItem.GetWidth())
			{
				this.nowSubarea.X = formMain.ledsys.SelectedPanel.SelectedItem.GetWidth() - this.nowSubarea.Width;
				textBox.Text = this.nowSubarea.X.ToString();
			}
			else
			{
				this.nowSubarea.X = num;
			}
			SendKeys.Send("{Enter}");
			this.subareaLocaltionX.Focus();
			this.nowSubareaHolder.ResetHolderPosition();
		}

		private void subareaLocaltionY_TextChanged(object sender, EventArgs e)
		{
			if (!this.isSubareaLocationYKeyDown)
			{
				return;
			}
			this.isSubareaLocationYKeyDown = false;
			TextBox textBox = (TextBox)sender;
			int num = 0;
			if (!string.IsNullOrEmpty(textBox.Text))
			{
				num = int.Parse(textBox.Text);
			}
			if (string.IsNullOrEmpty(textBox.Text))
			{
				this.nowSubarea.Y = 0;
				textBox.Text = this.nowSubarea.Y.ToString();
			}
			else if (num + this.nowSubarea.Height > formMain.ledsys.SelectedPanel.SelectedItem.GetHeight())
			{
				this.nowSubarea.Y = formMain.ledsys.SelectedPanel.SelectedItem.GetHeight() - this.nowSubarea.Height;
				textBox.Text = this.nowSubarea.Y.ToString();
			}
			else
			{
				this.nowSubarea.Y = num;
			}
			SendKeys.Send("{Enter}");
			this.subareaLocaltionY.Focus();
			this.nowSubareaHolder.ResetHolderPosition();
		}

		private void subareaSizeWidth_TextChanged(object sender, EventArgs e)
		{
			if (!this.isSubareaSizeWidthKeyDown)
			{
				return;
			}
			this.isSubareaSizeWidthKeyDown = false;
			TextBox textBox = (TextBox)sender;
			int num = 0;
			if (!string.IsNullOrEmpty(textBox.Text))
			{
				num = int.Parse(textBox.Text);
			}
			if (num < 1)
			{
				this.nowSubarea.Width = 1;
				textBox.Text = this.nowSubarea.Width.ToString();
			}
			else if (num + this.nowSubarea.X > formMain.ledsys.SelectedPanel.SelectedItem.GetWidth())
			{
				this.nowSubarea.Width = formMain.ledsys.SelectedPanel.SelectedItem.GetWidth() - this.nowSubarea.X;
				textBox.Text = this.nowSubarea.Width.ToString();
			}
			else
			{
				this.nowSubarea.Width = num;
			}
			SendKeys.Send("{Enter}");
			this.subareaSizeWidth.Focus();
			this.nowSubareaHolder.ResetHolderPosition();
			this.RedrawSubarea();
		}

		private void subareaSizeHeight_TextChanged(object sender, EventArgs e)
		{
			if (!this.isSubareaSizeHeightKeyDown)
			{
				return;
			}
			this.isSubareaSizeHeightKeyDown = false;
			TextBox textBox = (TextBox)sender;
			int num = 0;
			if (!string.IsNullOrEmpty(textBox.Text))
			{
				num = int.Parse(textBox.Text);
			}
			if (num < 1)
			{
				this.nowSubarea.Height = 1;
				textBox.Text = this.nowSubarea.Height.ToString();
			}
			else if (num + this.nowSubarea.Y > formMain.ledsys.SelectedPanel.SelectedItem.GetHeight())
			{
				this.nowSubarea.Height = formMain.ledsys.SelectedPanel.SelectedItem.GetHeight() - this.nowSubarea.Y;
				textBox.Text = this.nowSubarea.Height.ToString();
			}
			else
			{
				this.nowSubarea.Height = num;
			}
			SendKeys.Send("{Enter}");
			this.subareaSizeHeight.Focus();
			this.nowSubareaHolder.ResetHolderPosition();
			this.RedrawSubarea();
		}

		private void subareaLocaltionX_MouseWheel(object sender, MouseEventArgs e)
		{
			if (e.Delta > 0)
			{
				NumericUpDown expr_0F = this.subareaLocaltionX;
				expr_0F.Value = ++expr_0F.Value;
			}
			else
			{
				NumericUpDown expr_27 = this.subareaLocaltionX;
				expr_27.Value = --expr_27.Value;
			}
			HandledMouseEventArgs handledMouseEventArgs = e as HandledMouseEventArgs;
			if (handledMouseEventArgs != null)
			{
				handledMouseEventArgs.Handled = true;
			}
		}

		private void subareaLocaltionY_MouseWheel(object sender, MouseEventArgs e)
		{
			if (e.Delta > 0)
			{
				NumericUpDown expr_0F = this.subareaLocaltionY;
				expr_0F.Value = ++expr_0F.Value;
			}
			else
			{
				NumericUpDown expr_27 = this.subareaLocaltionY;
				expr_27.Value = --expr_27.Value;
			}
			HandledMouseEventArgs handledMouseEventArgs = e as HandledMouseEventArgs;
			if (handledMouseEventArgs != null)
			{
				handledMouseEventArgs.Handled = true;
			}
		}

		private void subareaSizeWidth_MouseWheel(object sender, MouseEventArgs e)
		{
			this.isSubareaSizeWidthMouseWheel = true;
			if (e.Delta > 0)
			{
				NumericUpDown expr_16 = this.subareaSizeWidth;
				expr_16.Value = ++expr_16.Value;
			}
			else
			{
				NumericUpDown expr_2E = this.subareaSizeWidth;
				expr_2E.Value = --expr_2E.Value;
			}
			HandledMouseEventArgs handledMouseEventArgs = e as HandledMouseEventArgs;
			if (handledMouseEventArgs != null)
			{
				handledMouseEventArgs.Handled = true;
			}
		}

		private void subareaSizeHeight_MouseWheel(object sender, MouseEventArgs e)
		{
			this.isSubareaSizeHeightMouseWheel = true;
			if (e.Delta > 0)
			{
				NumericUpDown expr_16 = this.subareaSizeHeight;
				expr_16.Value = ++expr_16.Value;
			}
			else
			{
				NumericUpDown expr_2E = this.subareaSizeHeight;
				expr_2E.Value = --expr_2E.Value;
			}
			HandledMouseEventArgs handledMouseEventArgs = e as HandledMouseEventArgs;
			if (handledMouseEventArgs != null)
			{
				handledMouseEventArgs.Handled = true;
			}
		}

		private void subareaSizeWidth_Leave(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			int num = 0;
			bool flag = false;
			if (!string.IsNullOrEmpty(numericUpDown.Text))
			{
				num = int.Parse(numericUpDown.Text);
			}
			if (num < 8)
			{
				this.nowSubarea.Width = 8;
				numericUpDown.Text = this.nowSubarea.Width.ToString();
				flag = true;
			}
			else if (num + this.nowSubarea.X > formMain.ledsys.SelectedPanel.SelectedItem.GetWidth())
			{
				this.nowSubarea.Width = formMain.ledsys.SelectedPanel.SelectedItem.GetWidth() - this.nowSubarea.X;
				numericUpDown.Text = this.nowSubarea.Width.ToString();
				flag = true;
			}
			if (flag)
			{
				this.nowSubareaHolder.ResetHolderPosition();
				this.RedrawSubarea();
			}
		}

		private void subareaSizeHeight_Leave(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			int num = 0;
			bool flag = false;
			if (!string.IsNullOrEmpty(numericUpDown.Text))
			{
				num = int.Parse(numericUpDown.Text);
			}
			if (num < 8)
			{
				this.nowSubarea.Height = 8;
				numericUpDown.Text = this.nowSubarea.Height.ToString();
				flag = true;
			}
			else if (num + this.nowSubarea.Y > formMain.ledsys.SelectedPanel.SelectedItem.GetHeight())
			{
				this.nowSubarea.Height = formMain.ledsys.SelectedPanel.SelectedItem.GetHeight() - this.nowSubarea.Y;
				numericUpDown.Text = this.nowSubarea.Height.ToString();
				flag = true;
			}
			if (flag)
			{
				this.nowSubareaHolder.ResetHolderPosition();
				this.RedrawSubarea();
			}
		}

		private void subareaTitle_TextChanged(object sender, EventArgs e)
		{
			formMain.ledsys.SelectedPanel.SelectedItem.SelectedSubarea.Name = this.subareaTitle.Text;
			if (this.subareaTitle.Focused)
			{
				TreeNode selectedNode = this.ledTree.SelectedNode;
				if (selectedNode != null)
				{
					selectedNode.Text = this.subareaTitle.Text;
				}
			}
		}

		private System.Drawing.Size GetDefaultSizeByType(string pType)
		{
			int num = 32;
			int num2 = 16;
			int width = formMain.ledsys.SelectedPanel.SelectedItem.GetWidth();
			int height = formMain.ledsys.SelectedPanel.SelectedItem.GetHeight();
			switch (pType)
			{
			case "PictureText":
			case "Dial":
				if (height > 80)
				{
					num2 = 80;
				}
				else
				{
					num2 = height;
				}
				if (width > 80)
				{
					num = 80;
				}
				else
				{
					num = width;
				}
				if (num2 > num)
				{
					num2 = num;
				}
				else
				{
					num = num2;
				}
				break;
			case "Time":
			case "Counter":
			case "Lunar":
			case "Temperature":
			case "Subtitle":
			case "Animation":
			case "Weather":
				if (width > 64)
				{
					num = 64;
				}
				else
				{
					num = width;
				}
				if (height > 16)
				{
					num2 = 16;
				}
				else
				{
					num2 = height;
				}
				break;
			}
			return new System.Drawing.Size(num, num2);
		}

		private void AddSubareaToTree(LedSubarea pSubarea)
		{
			System.Drawing.Color groupBox_BackColor = Template.GroupBox_BackColor;
			System.Drawing.Color color = System.Drawing.Color.FromArgb(51, 153, 255);
			TreeNode itemNode = this.GetItemNode();
			if (itemNode == null)
			{
				return;
			}
			if (!itemNode.IsExpanded)
			{
				itemNode.Expand();
			}
			TreeNode treeNode = new TreeNode();
			treeNode.Text = pSubarea.Name;
			treeNode.Tag = pSubarea;
			string key;
			switch (key = pSubarea.Type.ToString())
			{
			case "Subtitle":
				treeNode.ImageIndex = 9;
				treeNode.SelectedImageIndex = 9;
				break;
			case "Animation":
				treeNode.ImageIndex = 10;
				treeNode.SelectedImageIndex = 10;
				break;
			case "PictureText":
				treeNode.ImageIndex = 11;
				treeNode.SelectedImageIndex = 11;
				break;
			case "Time":
				treeNode.ImageIndex = 12;
				treeNode.SelectedImageIndex = 12;
				break;
			case "Dial":
				treeNode.ImageIndex = 13;
				treeNode.SelectedImageIndex = 13;
				break;
			case "Counter":
				treeNode.ImageIndex = 14;
				treeNode.SelectedImageIndex = 14;
				break;
			case "Temperature":
				treeNode.ImageIndex = 15;
				treeNode.SelectedImageIndex = 15;
				break;
			case "Lunar":
				treeNode.ImageIndex = 16;
				treeNode.SelectedImageIndex = 16;
				break;
			case "Weather":
				treeNode.ImageIndex = 17;
				treeNode.SelectedImageIndex = 17;
				break;
			case "String":
				treeNode.ImageIndex = 18;
				treeNode.SelectedImageIndex = 18;
				break;
			}
			treeNode.ContextMenuStrip = this.contextMenuStripContent;
			treeNode.BackColor = color;
			foreach (TreeNode treeNode2 in itemNode.Nodes)
			{
				if (LedGraphics.EqualsColor(treeNode2.BackColor, color))
				{
					treeNode2.BackColor = groupBox_BackColor;
					break;
				}
			}
			itemNode.Nodes.Add(treeNode);
			TreeNode parent = treeNode.Parent;
			if (parent != null)
			{
				if (!LedGraphics.EqualsColor(parent.BackColor, color))
				{
					parent.BackColor = color;
				}
				TreeNode parent2 = parent.Parent;
				if (parent2 != null)
				{
					if (!LedGraphics.EqualsColor(parent2.BackColor, color))
					{
						parent2.BackColor = color;
					}
					TreeNode parent3 = parent2.Parent;
					if (parent3 != null && !LedGraphics.EqualsColor(parent2.BackColor, color))
					{
						parent3.BackColor = color;
					}
				}
			}
			this.ledTree.SelectedNode = treeNode;
		}

		private TreeNode GetItemNode()
		{
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode.Level == this.levelItem)
			{
				return selectedNode;
			}
			if (selectedNode.Level == this.levelSubarea)
			{
				return selectedNode.Parent;
			}
			if (selectedNode.Level == this.levelContent)
			{
				return selectedNode.Parent.Parent;
			}
			if (selectedNode.Level == this.levelPanel)
			{
				TreeNodeCollection nodes = selectedNode.Nodes;
				IEnumerator enumerator = nodes.GetEnumerator();
				try
				{
					while (enumerator.MoveNext())
					{
						TreeNode treeNode = (TreeNode)enumerator.Current;
						if (treeNode.Tag.Equals(formMain.ledsys.SelectedPanel.SelectedItem))
						{
							TreeNode result = treeNode;
							return result;
						}
					}
					return selectedNode;
				}
				finally
				{
					IDisposable disposable = enumerator as IDisposable;
					if (disposable != null)
					{
						disposable.Dispose();
					}
				}
			}
			if (selectedNode.Level == this.levelGroup)
			{
				TreeNodeCollection nodes2 = selectedNode.Nodes;
				foreach (TreeNode treeNode2 in nodes2)
				{
					if (treeNode2.Tag.Equals(formMain.ledsys.SelectedPanel))
					{
						TreeNodeCollection nodes3 = selectedNode.Nodes;
						foreach (TreeNode treeNode3 in nodes3)
						{
							if (treeNode3.Tag.Equals(formMain.ledsys.SelectedPanel.SelectedItem))
							{
								TreeNode result = treeNode3;
								return result;
							}
						}
					}
				}
			}
			return selectedNode;
		}

		private void addItemContentToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.addItemToolStripMenuItem_Click(null, null);
		}

		private void panelItemsUpbutton_Click(object sender, EventArgs e)
		{
			if (formMain.ledsys.SelectedPanel.Items.Count < 2)
			{
				return;
			}
			if (this.panelItemslistBox.SelectedIndex == -1)
			{
				return;
			}
			int selectedIndex = this.panelItemslistBox.SelectedIndex;
			formMain.ledsys.SelectedPanel.Items = formMain.SortIList(formMain.ledsys.SelectedPanel.Items, selectedIndex, true);
			this.panelItemslistBox.Items.Clear();
			foreach (LedItem current in formMain.ledsys.SelectedPanel.Items)
			{
				this.panelItemslistBox.Items.Add(current.TextName);
			}
			this.panelItemslistBox.SelectedIndex = selectedIndex - 1;
			this.AddPanelToTree();
		}

		private void panelItemsDownbutton_Click(object sender, EventArgs e)
		{
			if (formMain.ledsys.SelectedPanel.Items.Count < 2)
			{
				return;
			}
			if (this.panelItemslistBox.SelectedIndex == -1)
			{
				return;
			}
			if (this.panelItemslistBox.SelectedIndex == this.panelItemslistBox.Items.Count - 1)
			{
				return;
			}
			int selectedIndex = this.panelItemslistBox.SelectedIndex;
			formMain.ledsys.SelectedPanel.Items = formMain.SortIList(formMain.ledsys.SelectedPanel.Items, selectedIndex, false);
			this.panelItemslistBox.Items.Clear();
			foreach (LedItem current in formMain.ledsys.SelectedPanel.Items)
			{
				this.panelItemslistBox.Items.Add(current.TextName);
			}
			this.panelItemslistBox.SelectedIndex = selectedIndex + 1;
			this.AddPanelToTree();
		}

		public static IList<LedItem> SortIList(IList<LedItem> pList, int pIndex, bool pUp)
		{
			if (pIndex == 0 && pUp)
			{
				return pList;
			}
			if (pIndex == pList.Count - 1 && !pUp)
			{
				return pList;
			}
			int index;
			if (pUp)
			{
				index = pIndex - 1;
			}
			else
			{
				index = pIndex + 1;
			}
			LedItem value = pList[index];
			pList[index] = pList[pIndex];
			pList[pIndex] = value;
			return pList;
		}

		public static IList<LedContent> SortIList(IList<LedContent> pList, int pIndex, bool pUp)
		{
			if (pIndex == 0 && pUp)
			{
				return pList;
			}
			if (pIndex == pList.Count - 1 && !pUp)
			{
				return pList;
			}
			int index;
			if (pUp)
			{
				index = pIndex - 1;
			}
			else
			{
				index = pIndex + 1;
			}
			LedContent value = pList[index];
			pList[index] = pList[pIndex];
			pList[pIndex] = value;
			return pList;
		}

		private void screenPanelMain_MouseDown(object sender, MouseEventArgs e)
		{
			this.screenPanelOldLocation = Cursor.Position;
			this.panelCoverOldLocation = this.panelCover.Location;
			this.screenPanelIsMoving = true;
			if (e.Button == MouseButtons.Right)
			{
				this.lastRightButtonLocation = e.Location;
			}
			base.Focus();
		}

		private System.Drawing.Point GetRightButtonLocation()
		{
			int x = (int)(this.lastRightButtonLocation.X / formMain.ledsys.SelectedPanel.Zoom);
			int y = (int)(this.lastRightButtonLocation.Y / formMain.ledsys.SelectedPanel.Zoom);
			return new System.Drawing.Point(x, y);
		}

		private void screenPanelMain_MouseMove(object sender, MouseEventArgs e)
		{
			if (!this.screenPanelIsMoving)
			{
				return;
			}
			if (e.Button == MouseButtons.Left)
			{
				System.Drawing.Point position = Cursor.Position;
				int num = position.X - this.screenPanelOldLocation.X + this.panelCoverOldLocation.X;
				int num2 = position.Y - this.screenPanelOldLocation.Y + this.panelCoverOldLocation.Y;
				if (this.panel_Item.Width < this.panelCover.Width || this.panel_Item.Height < this.panelCover.Height)
				{
					return;
				}
				if (num < 0)
				{
					num = 0;
				}
				if (num2 < 0)
				{
					num2 = 0;
				}
				if (num + this.panelCover.Width > this.panel_Item.Width)
				{
					num = this.panel_Item.Width - this.panelCover.Width;
				}
				if (num2 + this.panelCover.Height > this.panel_Item.Height)
				{
					num2 = this.panel_Item.Height - this.panelCover.Height;
				}
				System.Drawing.Point arg_10B_0 = this.panelCover.Location;
				this.panelCover.Location = new System.Drawing.Point(num, num2);
			}
		}

		private void screenPanelMain_MouseUp(object sender, MouseEventArgs e)
		{
			this.screenPanelIsMoving = false;
		}

		private void deleteContentContentToolStripMenuItem_Click(object sender, EventArgs e)
		{
			System.Drawing.Color backColor = System.Drawing.Color.FromArgb(51, 153, 255);
			if (this.nowItem == null)
			{
				return;
			}
			this.StopPreview();
			TreeNode treeNode = this.ledTree.SelectedNode;
			if (treeNode == null)
			{
				return;
			}
			TreeNode parent = treeNode.Parent;
			TreeNode prevNode = treeNode.PrevNode;
			TreeNode nextNode = treeNode.NextNode;
			if (treeNode.Tag != null && treeNode.Tag.GetType().Name == "LedSubarea")
			{
				LedSubarea ledSubarea = (LedSubarea)treeNode.Tag;
				foreach (LedSubareaHolder current in this.subareaHolderList)
				{
					if (ledSubarea.Equals(current.Subarea))
					{
						current.Hide();
						current.Dispose();
						this.subareaHolderList.Remove(current);
						break;
					}
				}
				this.nowItem.RemoveSubarea(ledSubarea);
				if (this.nowItem.Subareas.Count == 0)
				{
					this.DisplayItem(parent);
					this.ledTree.SelectedNode = parent;
				}
				else
				{
					TreeNode treeNode2 = null;
					if (nextNode != null)
					{
						treeNode2 = nextNode;
					}
					else if (prevNode != null)
					{
						treeNode2 = prevNode;
					}
					if (treeNode2 != null)
					{
						treeNode2.BackColor = backColor;
						this.ledTree.SelectedNode = treeNode2;
						this.DisplaySubarea(treeNode2);
					}
				}
				treeNode.Remove();
				treeNode = null;
			}
		}

		private void maginfyToolsPanel_Click(object sender, EventArgs e)
		{
			if (sender == null)
			{
				return;
			}
			if (formMain.ledsys.SelectedPanel.Zoom == 8m)
			{
				return;
			}
			if (formMain.ledsys.SelectedPanel.Zoom > 0.9m)
			{
				LedPanel expr_4C = formMain.ledsys.SelectedPanel;
				expr_4C.Zoom = ++expr_4C.Zoom;
			}
			else
			{
				formMain.ledsys.SelectedPanel.Zoom += 0.1m;
			}
			if (formMain.ledsys.SelectedPanel.SelectedItem == null)
			{
				this.DrawEmptyBackground();
				this.ResetPanelToolStrip();
				this.zoonToolsPanel.Text = formMain.ledsys.SelectedPanel.Zoom.ToString();
				return;
			}
			this.DisplayItem(LedDisplayMode.Resize);
			this.Subarea_ChangeZoom();
			this.ResetPanelToolStrip();
		}

		private void Subarea_ChangeZoom()
		{
			foreach (LedSubareaHolder current in this.subareaHolderList)
			{
				current.ChangeZoom();
			}
		}

		private void originalZoonToolsPanel_Click(object sender, EventArgs e)
		{
			if (formMain.ledsys.SelectedPanel.Zoom != 1m)
			{
				if (this.panel_Item.HorizontalScroll.Visible)
				{
					this.panel_Item.HorizontalScroll.Value = this.panel_Item.HorizontalScroll.Minimum;
				}
				if (this.panel_Item.VerticalScroll.Visible)
				{
					this.panel_Item.VerticalScroll.Value = this.panel_Item.VerticalScroll.Minimum;
				}
				formMain.ledsys.SelectedPanel.Zoom = 1m;
				if (formMain.ledsys.SelectedPanel.SelectedItem == null)
				{
					this.DrawEmptyBackground();
					this.ResetPanelToolStrip();
					this.zoonToolsPanel.Text = formMain.ledsys.SelectedPanel.Zoom.ToString();
					return;
				}
				this.DisplayItem(LedDisplayMode.Resize);
				this.Subarea_ChangeZoom();
				this.ResetPanelToolStrip();
			}
		}

		private void minifyToolsPanel_Click(object sender, EventArgs e)
		{
			if (sender == null)
			{
				return;
			}
			if (formMain.ledsys.SelectedPanel.Zoom < 0.3m)
			{
				return;
			}
			if (formMain.ledsys.SelectedPanel.Zoom > 1m)
			{
				LedPanel expr_4B = formMain.ledsys.SelectedPanel;
				expr_4B.Zoom = --expr_4B.Zoom;
			}
			else
			{
				formMain.ledsys.SelectedPanel.Zoom -= 0.1m;
			}
			if (formMain.ledsys.SelectedPanel.SelectedItem == null)
			{
				this.DrawEmptyBackground();
				this.ResetPanelToolStrip();
				this.zoonToolsPanel.Text = formMain.ledsys.SelectedPanel.Zoom.ToString();
				return;
			}
			this.DisplayItem(LedDisplayMode.Resize);
			this.Subarea_ChangeZoom();
			this.ResetPanelToolStrip();
		}

		private void dropItemContentToolStripMenuItem_Click(object sender, EventArgs e)
		{
			System.Drawing.Color backColor = System.Drawing.Color.FromArgb(51, 153, 255);
			if (this.nowPanel == null || this.nowItem == null)
			{
				return;
			}
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode == null)
			{
				return;
			}
			int level = selectedNode.Level;
			if (level != this.levelItem)
			{
				return;
			}
			if (this.ledTree.GetNodeAt(this.LedTreeELocation) == null)
			{
				if (level == this.levelItem)
				{
					if (selectedNode.Tag != null && selectedNode.Tag.GetType().Name == "LedItem")
					{
						LedItem item = (LedItem)selectedNode.Tag;
						this.nowPanel.RemoveItem(item);
					}
					selectedNode.Remove();
				}
				return;
			}
			if (selectedNode.Tag != null && selectedNode.Tag.GetType().Name == "LedItem")
			{
				LedItem ledItem = (LedItem)selectedNode.Tag;
				TreeNode nextNode = selectedNode.NextNode;
				TreeNode prevNode = selectedNode.PrevNode;
				if (!ledItem.Equals(this.nowItem))
				{
					return;
				}
				int num = selectedNode.Index + 1;
				if (this.nowPanel.LockedItemNo == num)
				{
					this.nowPanel.LockedItemNo = 0;
				}
				this.nowPanel.RemoveItem(ledItem);
				if (this.nowPanel.Items.Count == 0)
				{
					this.nowItem = null;
					this.DrawScreenBackground();
					this.SetToolsButtonEnable(false);
				}
				else
				{
					TreeNode treeNode = null;
					if (nextNode != null)
					{
						treeNode = nextNode;
					}
					else if (prevNode != null)
					{
						treeNode = prevNode;
					}
					if (treeNode != null)
					{
						treeNode.BackColor = backColor;
						if (treeNode.Tag != null && treeNode.Tag.GetType().Name == "LedItem")
						{
							this.nowPanel.SelectedItem = (LedItem)treeNode.Tag;
						}
						this.LedTreeELocation = treeNode.Bounds.Location;
						this.ledTree.SelectedNode = treeNode;
					}
					this.DisplayItem(LedDisplayMode.Load);
				}
				selectedNode.Remove();
			}
		}

		private void edgeListComboBox_DrawItem(object sender, DrawItemEventArgs e)
		{
			try
			{
				System.Drawing.Graphics arg_06_0 = e.Graphics;
				System.Drawing.Rectangle bounds = e.Bounds;
				System.Drawing.Font font = new System.Drawing.Font("宋体", 9f);
				IList<System.Drawing.Bitmap> ledEdgeList = LedGlobal.LedEdgeList;
				if (e.Index < ledEdgeList.Count && e.Index >= 0)
				{
					int index = e.Index;
					string s = ledEdgeList[index].Height.ToString();
					System.Drawing.StringFormat stringFormat = new System.Drawing.StringFormat();
					stringFormat.Alignment = System.Drawing.StringAlignment.Near;
					if (e.State == (DrawItemState.NoAccelerator | DrawItemState.NoFocusRect))
					{
						e.Graphics.FillRectangle(new System.Drawing.SolidBrush(System.Drawing.Color.White), bounds);
						e.Graphics.DrawImage(ledEdgeList[index], new System.Drawing.Point(bounds.Left, bounds.Top));
						e.Graphics.DrawString(s, font, new System.Drawing.SolidBrush(System.Drawing.Color.Black), (float)(bounds.Left + 32), (float)bounds.Top);
						e.DrawFocusRectangle();
					}
					else
					{
						int height = ledEdgeList[index].Height;
						System.Drawing.GraphicsUnit srcUnit = System.Drawing.GraphicsUnit.Pixel;
						e.Graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor;
						e.Graphics.FillRectangle(new System.Drawing.SolidBrush(System.Drawing.Color.LightBlue), new System.Drawing.Rectangle(bounds.X, bounds.Y + 1, bounds.Width, bounds.Height - 2));
						e.Graphics.DrawImage(ledEdgeList[index], new System.Drawing.Rectangle(bounds.Left, bounds.Top + bounds.Height / 2 - height, 64, height * 2 + 1), new System.Drawing.Rectangle(0, 0, 32, height), srcUnit);
						e.Graphics.DrawString(s, font, new System.Drawing.SolidBrush(System.Drawing.Color.Black), (float)(bounds.Left + 64), (float)(bounds.Top + 2));
						e.DrawFocusRectangle();
					}
				}
			}
			catch
			{
			}
		}

		private void edgeUseEdge_CheckedChanged(object sender, EventArgs e)
		{
			try
			{
				CheckBox checkBox = (CheckBox)sender;
				if (checkBox.Focused)
				{
					if (checkBox.Checked && this.nowSubarea.SelectedContent.Edge.Height * 2 >= this.nowSubarea.Height)
					{
						MessageBox.Show(this, formMain.ML.GetStr("Prompt_EdgeHeightOverSize"));
						checkBox.Checked = false;
					}
					else
					{
						this.nowSubarea.SelectedContent.Edge.Enabled = checkBox.Checked;
						if (checkBox.Checked)
						{
							this.ActiveEdgeControl();
						}
						else
						{
							this.DisableEdgeControl();
						}
						this.RedrawSubarea();
					}
				}
			}
			catch
			{
			}
		}

		private void ActiveEdgeControl()
		{
			this.edgeListComboBox.Enabled = true;
			this.edgeSpeedComboBox.Enabled = true;
			this.edgeModeComboBox.Enabled = true;
			this.edgeUseEdge.Checked = true;
		}

		private void DisableEdgeControl()
		{
			this.edgeListComboBox.Enabled = false;
			this.edgeSpeedComboBox.Enabled = false;
			this.edgeModeComboBox.Enabled = false;
			this.edgeUseEdge.Checked = false;
		}

		public static LedEdge NewEdgeData()
		{
			return new LedEdge
			{
				Index = 0,
				Mode = LedEdgeMode.Clockwise,
				Speed = 5,
				Enabled = false,
				Height = 1
			};
		}

		private void EdgeShowSubareaParam()
		{
			if (this.nowSubareaEdgeData == null)
			{
				return;
			}
			if (this.nowSubareaEdgeData.Enabled)
			{
				this.edgeUseEdge.Checked = true;
				this.ActiveEdgeControl();
			}
			else
			{
				this.edgeUseEdge.Checked = false;
				this.DisableEdgeControl();
			}
			this.edgeListComboBox.SelectedIndex = this.nowSubareaEdgeData.Index;
			this.edgeModeComboBox.SelectedIndex = (int)this.nowSubareaEdgeData.Mode;
			this.edgeSpeedComboBox.Text = this.nowSubareaEdgeData.Speed.ToString();
		}

		private void EdgeShowItemParam()
		{
		}

		private void SubareaEdgeListComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			int height = LedGlobal.LedEdgeList[comboBox.SelectedIndex].Height;
			if (height * 2 >= this.nowSubarea.Height)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Prompt_EdgeHeightOverSize"));
				comboBox.SelectedIndex = this.nowSubarea.SelectedContent.Edge.Index;
				return;
			}
			this.nowSubarea.SelectedContent.Edge.Index = comboBox.SelectedIndex;
			this.nowSubarea.SelectedContent.Edge.Height = LedGlobal.LedEdgeList[comboBox.SelectedIndex].Height;
			this.RedrawSubarea();
		}

		private void edgeModeComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowSubarea.SelectedContent.Edge.Mode = (LedEdgeMode)comboBox.SelectedIndex;
		}

		private void edgeSpeedComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowSubarea.SelectedContent.Edge.Speed = int.Parse(comboBox.Text);
		}

		private void ResetPanelToolStrip()
		{
			int x;
			if (this.panel_Item.Width < this.panelCover.Width)
			{
				this.panel_Item.HorizontalScroll.Visible = true;
				this.panel_Item.HorizontalScroll.Value = this.panel_Item.HorizontalScroll.Minimum;
				x = 0;
			}
			else
			{
				this.panel_Item.HorizontalScroll.Visible = false;
				x = (this.panel_Item.Width - this.panelCover.Width) / 2;
			}
			int y;
			if (this.panel_Item.Height < this.panelCover.Height)
			{
				this.panel_Item.VerticalScroll.Visible = true;
				this.panel_Item.VerticalScroll.Value = this.panel_Item.VerticalScroll.Minimum;
				y = 0;
			}
			else
			{
				this.panel_Item.VerticalScroll.Visible = false;
				y = (this.panel_Item.Height - this.panelCover.Height) / 2;
			}
			this.panelCover.Location = new System.Drawing.Point(x, y);
		}

		private void luminance_toolStripButton_Click(object sender, EventArgs e)
		{
		}

		private void autoStartAndCloseToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.nowPanel.GetType() == typeof(LedPanelCloud) && this.nowPanel.State == LedPanelState.Offline && MessageBox.Show(this, formMain.ML.GetStr("Message_Selected_Terminal_Is_Offline_And_Continue_Sending_May_Not_Send_To_Terminal"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == DialogResult.Cancel)
			{
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			new formStartAndClose(formMain.ledsys.SelectedPanel.TimerSwitch, this, "", false);
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void itemUseBackground_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (checkBox.Checked)
			{
				bool flag = false;
				foreach (LedSubarea current in formMain.ledsys.SelectedPanel.SelectedItem.Subareas)
				{
					if (current.Type == LedSubareaType.Subtitle)
					{
						flag = ((LedDText)current.SelectedContent).Background.Enabled;
					}
					else if (current.Type == LedSubareaType.Animation)
					{
						flag = ((LedAnimation)current.SelectedContent).Background.Enabled;
					}
					else
					{
						if (current.Type == LedSubareaType.PictureText)
						{
							using (IEnumerator<LedContent> enumerator2 = current.Contents.GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									LedPictureText ledPictureText = (LedPictureText)enumerator2.Current;
									if (ledPictureText.Background.Enabled)
									{
										flag = true;
									}
								}
								goto IL_E3;
							}
						}
						flag = current.SelectedContent.Background.Enabled;
					}
					IL_E3:
					if (flag)
					{
						MessageBox.Show(formMain.ML.GetStr("formMain_message_Reuse_Background"));
						this.itemBackgroundIsUse.Checked = false;
						return;
					}
				}
			}
			this.nowBackGround.Enabled = checkBox.Checked;
			this.SetItemBackground(checkBox.Checked);
			if (this.nowBackGround.CustomChecked)
			{
				this.itemBackgroundEffectComboBox.Enabled = false;
				return;
			}
			this.itemBackgroundSelectButton.Enabled = false;
		}

		private void itemSelectBackgroundButton_Click(object sender, EventArgs e)
		{
			this.openFileDialog1.Filter = "Image(*.gif *.jpg *.bmp *.png)|*.gif;*.jpg;*.bmp;*.png";
			if (this.openFileDialog1.ShowDialog() == DialogResult.OK)
			{
				this.nowBackGround.Draw(new System.Drawing.Size(formMain.ledsys.SelectedPanel.Width, formMain.ledsys.SelectedPanel.Height), this.openFileDialog1.FileName);
				this.isItemBackgroundSelected = true;
				return;
			}
			this.isItemBackgroundSelected = false;
		}

		private void EffectSettingShowParam()
		{
			try
			{
				this.isLoadingParm = true;
				this.effectEntryType.SelectedIndex = (int)this.nowEffectSetting.EntryMode;
				this.effectEntrySpeed.Text = this.nowEffectSetting.EntrySpeed.ToString();
				this.effectExitType.SelectedIndex = (int)this.nowEffectSetting.ExitMode;
				this.effectExitSpeed.Text = this.nowEffectSetting.ExitSpeed.ToString();
				this.effectStay.SelectedIndex = this.nowEffectSetting.StayIndex;
				this.effectLoop.Text = this.nowEffectSetting.LoopCount.ToString();
				this.SetEffectStayEnable(this.effectEntryType.SelectedIndex);
				this.isLoadingParm = false;
			}
			catch
			{
			}
		}

		private void WeatherEffectSettingShowParam()
		{
			try
			{
				this.isLoadingParm = true;
				this.cmbWeatherEntryMode.SelectedIndex = (int)this.nowWeather.EffectsSetting.EntryMode;
				this.cmbWeatherEntrySpeed.Text = this.nowWeather.EffectsSetting.EntrySpeed.ToString();
				this.cmbWeatherStay.SelectedIndex = this.nowWeather.EffectsSetting.StayIndex;
				this.SetWeatherEffectStayEnable(this.cmbWeatherEntryMode.SelectedIndex);
				this.isLoadingParm = false;
			}
			catch
			{
			}
		}

		private void StringEffectSettingShowParam()
		{
			try
			{
				this.isLoadingParm = true;
				this.cmbStringEntryMode.SelectedIndex = (int)this.nowString.EffectsSetting.EntryMode;
				this.cmbStringEntrySpeed.Text = this.nowString.EffectsSetting.EntrySpeed.ToString();
				this.cmbStringStay.SelectedIndex = this.nowString.EffectsSetting.StayIndex;
				this.isLoadingParm = false;
			}
			catch
			{
			}
		}

		private void EffectSettingShowParam_GIF()
		{
			try
			{
				this.effectEntryType.SelectedIndex = 2;
				this.effectExitType.SelectedIndex = 0;
				if (this.nowEffectSetting != null)
				{
					this.effectEntrySpeed.Text = this.nowEffectSetting.EntrySpeed.ToString();
					this.effectExitSpeed.Text = this.nowEffectSetting.ExitSpeed.ToString();
					this.effectStay.SelectedIndex = this.nowEffectSetting.StayIndex;
					this.effectLoop.Text = this.nowEffectSetting.LoopCount.ToString();
				}
				this.effectStay.Enabled = true;
				this.isLoadingParm = false;
			}
			catch
			{
			}
		}

		private void configToolStripMenuItem_Click(object sender, EventArgs e)
		{
			formCheckCode formCheckCode = new formCheckCode();
			formCheckCode.Check("888", false);
		}

		private void effectEntryType_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowEffectSetting.EntryMode = (byte)comboBox.SelectedIndex;
			this.SetEffectStayEnable(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void effectEntrySpeed_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowEffectSetting.EntrySpeed = (byte)int.Parse(comboBox.Text);
		}

		private void effectExitType_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowEffectSetting.ExitMode = (byte)comboBox.SelectedIndex;
		}

		private void effectExitSpeed_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowEffectSetting.ExitSpeed = (byte)int.Parse(comboBox.Text);
		}

		private void SetEffectStayEnable(int pSelectIndex)
		{
			if (pSelectIndex == 3 || pSelectIndex == 4 || (pSelectIndex == 5 | pSelectIndex == 6))
			{
				this.effectExitType.Enabled = false;
				this.effectExitSpeed.Enabled = false;
				this.effectStay.Enabled = false;
				return;
			}
			if (pSelectIndex == 0)
			{
				this.effectExitType.Enabled = false;
			}
			else
			{
				this.effectExitType.Enabled = true;
			}
			this.effectExitSpeed.Enabled = true;
			this.effectStay.Enabled = true;
		}

		private void SetWeatherEffectStayEnable(int pSelectIndex)
		{
			if (pSelectIndex == 1 || pSelectIndex == 2 || (pSelectIndex == 3 | pSelectIndex == 4))
			{
				this.cmbWeatherStay.Enabled = false;
				return;
			}
			this.cmbWeatherStay.Enabled = true;
		}

		private void effectStay_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			int stay = (int)(Convert.ToSingle(comboBox.Text.Remove(comboBox.Text.Length - 1)) * 1000f);
			this.nowEffectSetting.Stay = stay;
			this.nowEffectSetting.StayIndex = comboBox.SelectedIndex;
		}

		private void effectLoop_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowEffectSetting.LoopCount = int.Parse(comboBox.Text);
		}

		private bool CheckRegistredOcx(string sClSID)
		{
			RegistryKey classesRoot = Registry.ClassesRoot;
			return classesRoot.OpenSubKey(sClSID) != null;
		}

		private void exitToolStripMenuItem_Click(object sender, EventArgs e)
		{
			base.Close();
		}

		private void formMain_Paint(object sender, PaintEventArgs e)
		{
		}

		private void pictureBox_Min_Click(object sender, EventArgs e)
		{
			base.WindowState = FormWindowState.Minimized;
		}

		private void pictureBox_Max_Click(object sender, EventArgs e)
		{
			this.MaxWind();
		}

		private void pictureBox_Close_Click(object sender, EventArgs e)
		{
			if (formMain.isADAutoSend)
			{
				this.SaveProject();
				base.Hide();
				return;
			}
			foreach (Thread current in LedSubareaHolder.threadList)
			{
				try
				{
					current.Abort();
				}
				catch
				{
				}
			}
			base.Close();
		}

		private void pictureBox_Min_MouseEnter(object sender, EventArgs e)
		{
			PictureBox pictureBox = (PictureBox)sender;
			pictureBox.Image = Template.Main_Min_on;
		}

		private void pictureBox_Min_MouseLeave(object sender, EventArgs e)
		{
			PictureBox pictureBox = (PictureBox)sender;
			pictureBox.Image = Template.Main_Min;
		}

		private void pictureBox_Max_MouseEnter(object sender, EventArgs e)
		{
			PictureBox pictureBox = (PictureBox)sender;
			pictureBox.Image = Template.Main_Max_on;
		}

		private void pictureBox_Max_MouseLeave(object sender, EventArgs e)
		{
			PictureBox pictureBox = (PictureBox)sender;
			pictureBox.Image = Template.Main_Max;
		}

		private void pictureBox_Close_MouseEnter(object sender, EventArgs e)
		{
			PictureBox pictureBox = (PictureBox)sender;
			pictureBox.Image = Template.Main_Close_on;
		}

		private void pictureBox_Close_MouseLeave(object sender, EventArgs e)
		{
			PictureBox pictureBox = (PictureBox)sender;
			pictureBox.Image = Template.Main_Close;
		}

		private void panel_Top_DoubleClick(object sender, EventArgs e)
		{
			this.pictureBox_Max_Click(null, null);
		}

		private void menuStrip1_DoubleClick(object sender, EventArgs e)
		{
		}

		private void Skin_ChangeSkin(object sender, EventArgs e)
		{
			ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem)sender;
			string text = (string)toolStripMenuItem.Tag;
			text = text.Replace("MouseIn", "");
			if (text == Settings.Default.Template)
			{
				return;
			}
			Settings.Default.Template = text;
			Settings.Default.Save();
			Template.Load(text);
			this.ShowTemplate();
			this.subareaAttribute.Refresh();
			this.subareaEffectSetting.Refresh();
			this.subareaEdgeSetting.Refresh();
			this.dialAttributeBox.Refresh();
			this.marqueeAttributeBox.Refresh();
			this.clockAttributeBox.Refresh();
			this.temperatureAttributeBox.Refresh();
			this.counterAttributeBox.Refresh();
			this.zhGroupBox_Tree.Refresh();
			this.zhGroupBox_PanelAttribute.Refresh();
			this.ItemAttribute.Refresh();
			this.itemPlaySettingGroupBox.Refresh();
			this.itemByPeroidGroupBox.Refresh();
			this.itemEdgeSettingGroupBox.Refresh();
			this.itemBackgroundSettingGroupBox.Refresh();
			this.zhGroupBoxItemBackground.Refresh();
			this.zhGroupBox_Panel.Refresh();
			this.textAttributeBox.Refresh();
			this.lunarAttributeBox.Refresh();
			this.weatherAttributeBox.Refresh();
			this.stringAttributeBox.Refresh();
			this.contentBackgroundSettingGroupBox.Refresh();
			this.zhGroupBoxContentBackground.Refresh();
			this.animationAttributeBox.Refresh();
			this.AnimationEffectSettingzhGroupBox.Refresh();
			this.animationPreviewZhGroupBox.Refresh();
			this.generateAnimationZhGroupBox.Refresh();
		}

		private void pictureBox2_ChangeSize_MouseEnter(object sender, EventArgs e)
		{
			this.Cursor = Cursors.SizeNWSE;
		}

		private void pictureBox2_ChangeSize_MouseLeave(object sender, EventArgs e)
		{
			this.Cursor = Cursors.Default;
		}

		private void luminanceSettingToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.nowPanel.GetType() == typeof(LedPanelCloud) && this.nowPanel.State == LedPanelState.Offline && MessageBox.Show(this, formMain.ML.GetStr("Message_Selected_Terminal_Is_Offline_And_Continue_Sending_May_Not_Send_To_Terminal"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == DialogResult.Cancel)
			{
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			formLuminance formLuminance = new formLuminance(formMain.ledsys.SelectedPanel.Luminance, this, "", false);
			formLuminance.ShowDialog();
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		public bool CheckSubareaOverLapping()
		{
			bool result = false;
			this.hasNullItem = false;
			this.isALlItemClosed = true;
			this.overlappingItem = "";
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				if (formMain.ledsys.SelectedPanel.Items[i].Subareas.Count == 0)
				{
					this.hasNullItem = true;
				}
				if (!formMain.ledsys.SelectedPanel.Items[i].PlaySetting.Closed)
				{
					this.isALlItemClosed = false;
				}
				foreach (LedSubarea current in formMain.ledsys.SelectedPanel.Items[i].Subareas)
				{
					if (current.IsOverlapping())
					{
						this.overlappingItem = this.overlappingItem + formMain.ledsys.SelectedPanel.Items[i].TextName + "、";
						result = true;
						break;
					}
				}
			}
			if (!string.IsNullOrEmpty(this.overlappingItem))
			{
				this.overlappingItem = this.overlappingItem.Substring(0, this.overlappingItem.Length - 1);
			}
			return result;
		}

		public bool CheckLunarSubarea()
		{
			bool flag = false;
			bool flag2 = formMain.ledsys.SelectedPanel.IsLSeries();
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				foreach (LedSubarea current in formMain.ledsys.SelectedPanel.Items[i].Subareas)
				{
					if (!flag2 && current.Type == LedSubareaType.Lunar)
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					break;
				}
			}
			return flag;
		}

		public bool CheckWeatherSubarea()
		{
			bool flag = false;
			bool flag2 = formMain.ledsys.SelectedPanel.IsLSeries();
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				foreach (LedSubarea current in formMain.ledsys.SelectedPanel.Items[i].Subareas)
				{
					if (!flag2 && current.Type == LedSubareaType.Weather)
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					break;
				}
			}
			return flag;
		}

		public bool CheckStringSubarea()
		{
			bool flag = false;
			bool flag2 = formMain.ledsys.SelectedPanel.IsLSeries();
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				foreach (LedSubarea current in formMain.ledsys.SelectedPanel.Items[i].Subareas)
				{
					if (!flag2 && current.Type == LedSubareaType.String)
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					break;
				}
			}
			return flag;
		}

		public bool CheckRepeatStringSubarea(ref string msg)
		{
			bool result = false;
			msg = string.Empty;
			List<string[]> list = new List<string[]>();
			foreach (LedItem current in formMain.ledsys.SelectedPanel.Items)
			{
				foreach (LedSubarea current2 in current.Subareas)
				{
					if (current2.Type == LedSubareaType.String)
					{
						list.Add(new string[]
						{
							current.TextName,
							current2.SelectedContent.ID
						});
					}
				}
			}
			List<int> list2 = new List<int>();
			for (int i = 0; i < list.Count - 1; i++)
			{
				if (!list2.Contains(i))
				{
					string[] array = list[i];
					string text = string.Empty;
					for (int j = i + 1; j < list.Count; j++)
					{
						if (!list2.Contains(j))
						{
							string[] array2 = list[j];
							if (array[1] == array2[1])
							{
								list2.Add(j);
								if (!string.IsNullOrEmpty(text))
								{
									text += "、";
								}
								text += array2[0];
							}
						}
					}
					if (!string.IsNullOrEmpty(text))
					{
						msg += string.Format(formMain.ML.GetStr("Message_Repeat_String_Subarea"), text.Contains(array[0]) ? text : string.Format("{0}、{1}", array[0], text), array[1], "\r\n");
					}
				}
			}
			if (!string.IsNullOrEmpty(msg))
			{
				result = true;
			}
			return result;
		}

		public static bool IsXP()
		{
			OperatingSystem oSVersion = Environment.OSVersion;
			return oSVersion.Version.Major < 6;
		}

		public void Panel_Handle(bool _SendALl)
		{
			if (formMain.ledsys.SelectedPanel.PortType == LedPortType.USB)
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + formMain.ML.GetStr("formMain_SendData_SelectedUsb"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if (formMain.ledsys.SelectedPanel.PortType == LedPortType.Ethernet && formMain.ledsys.SelectedPanel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.LocalServer && formMain.ledsys.SelectedPanel.State == LedPanelState.Offline)
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + formMain.ML.GetStr("NETCARD_message_ServerMode_noHeart"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if ((formMain.ledsys.SelectedPanel.PortType == LedPortType.Ethernet && formMain.ledsys.SelectedPanel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.CloudServer) || (formMain.ledsys.SelectedPanel.PortType == LedPortType.GPRS && formMain.ledsys.SelectedPanel.GPRSCommunicaitonMode == LedGPRSCommunicationMode.CloudServer))
			{
				if (this.IsPanelCloud(formMain.ledsys.SelectedPanel))
				{
					if (LedGlobal.CloudAccount == null || string.IsNullOrEmpty(LedGlobal.CloudAccount.UserName))
					{
						MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Use_Cloud_Account_To_Login_And_Then_Send"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
						this.return_stop = true;
					}
				}
				else
				{
					MessageBox.Show(this, formMain.ML.GetStr("Message_Cannot_Send_Data_To_Manual_Panel_By_Cloud"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
					this.return_stop = true;
				}
				if (this.return_stop)
				{
					return;
				}
			}
			if (formMain.ledsys.SelectedPanel.Items.Count == 0)
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + this.overlappingItem + formMain.ML.GetStr("Prompt_NoItem"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if (this.CheckSubareaOverLapping())
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + this.overlappingItem + formMain.ML.GetStr("Prompt_ItemSubareaOverlap"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if (this.isALlItemClosed)
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + this.overlappingItem + formMain.ML.GetStr("Prompt_AllItemClosed"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if (this.hasNullItem)
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + this.overlappingItem + formMain.ML.GetStr("Prompt_HasNullIitem"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if (this.CheckEmptyMarquee())
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + formMain.ML.GetStr("Prompt_HasEmptyMarquee"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if ((formMain.ledsys.SelectedPanel.CardType == LedCardType.ZH_Un || formMain.ledsys.SelectedPanel.CardType == LedCardType.ZH_UnL) && formMain.ledsys.SelectedPanel.SelectedItem.Subareas.Count > 4)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_SubareaOverNumUn"));
				this.return_stop = true;
				return;
			}
			if (formMain.ledsys.SelectedPanel.SelectedItem.Subareas.Count > 16)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_SubareaOverNum"));
				this.return_stop = true;
				return;
			}
			if (this.CheckLunarSubarea())
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + formMain.ML.GetStr("Prompt_NotSupportLunarCalendar"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if (this.CheckWeatherSubarea())
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + formMain.ML.GetStr("Prompt_NotSupportWeather"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if (this.CheckStringSubarea())
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + formMain.ML.GetStr("Prompt_NotSupportString"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			string empty = string.Empty;
			if (this.CheckRepeatStringSubarea(ref empty))
			{
				MessageBox.Show(empty, formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.return_stop = true;
				return;
			}
			if (formMain.ledsys.SelectedPanel.PortType == LedPortType.GPRS && formMain.ledsys.SelectedPanel.GetProtocolType() == LedProtocolType.V3)
			{
				this.GPRSSendStart();
				this.return_stop = true;
				return;
			}
			this.label_Waitting_Picture.Text = formMain.ML.GetStr("Prompt_NowIsGeneratingData");
			this.SetWaittingPanelVisable(true);
			Thread.Sleep(200);
			this.isGenerating = false;
			Thread thread = new Thread(new ThreadStart(this.GenerateData));
			thread.Start();
			Thread.Sleep(100);
			while (this.isGenerating)
			{
				Application.DoEvents();
				Thread.Sleep(100);
			}
			this.SetWaittingPanelVisable(false);
			this.CheckAnimationAndBackground();
			if (formMain.ledsys.SelectedPanel.PortType == LedPortType.WiFi)
			{
				formConnectToWIFI formConnectToWIFI = new formConnectToWIFI(this);
				formConnectToWIFI.ConnectWifi();
				this.return_stop = true;
			}
		}

		private void GenerateData()
		{
			this.isGenerating = true;
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				for (int j = 0; j < formMain.ledsys.SelectedPanel.Items[i].Subareas.Count; j++)
				{
					if (formMain.ledsys.SelectedPanel.Items[i].Subareas[j].Type == LedSubareaType.Subtitle)
					{
						LedDText ledDText = (LedDText)formMain.ledsys.SelectedPanel.Items[i].Subareas[j].SelectedContent;
						if (ledDText.DoNeedDrawingFull)
						{
							ledDText.DrawMode = LedDrawMode.Full;
							ledDText.Draw();
							ledDText.DrawMode = LedDrawMode.Part;
						}
					}
					else if (formMain.ledsys.SelectedPanel.Items[i].Subareas[j].Type == LedSubareaType.PictureText)
					{
						LedSubarea ledSubarea = formMain.ledsys.SelectedPanel.Items[i].Subareas[j];
						for (int k = 0; k < ledSubarea.Contents.Count; k++)
						{
							LedPictureText ledPictureText = (LedPictureText)ledSubarea.Contents[k];
							if (ledPictureText.DoNeedDrawingFull || (ledPictureText.LastDrawn != null && ledPictureText.GetSize() != ledPictureText.LastDrawn.Size))
							{
								ledPictureText.DrawMode = LedDrawMode.Full;
								ledPictureText.Draw();
								ledPictureText.DrawMode = LedDrawMode.Part;
							}
						}
					}
				}
			}
			this.isGenerating = false;
		}

		public static bool CheckPort(string pPortName, LedCmdType pCmd)
		{
			bool result;
			try
			{
				if (pPortName == "")
				{
					if (pCmd == LedCmdType.Ctrl_Timing)
					{
						MessageBox.Show(formMain.ML.GetStr("Prompt_SerialPortNotExistOrOpend"));
					}
					else
					{
						MessageBox.Show(formMain.ML.GetStr("Prompt_SerialPortNotExistOrOpend"));
					}
					result = false;
				}
				else
				{
					SerialPort serialPort = new SerialPort(pPortName);
					serialPort.Open();
					if (serialPort.IsOpen)
					{
						serialPort.Close();
						serialPort.Dispose();
						result = true;
					}
					else
					{
						serialPort.Close();
						serialPort.Dispose();
						if (pCmd == LedCmdType.Ctrl_Timing)
						{
							MessageBox.Show(formMain.ML.GetStr("Prompt_SerialPortNotExistOrOpend"));
						}
						else
						{
							MessageBox.Show(formMain.ML.GetStr("Prompt_SerialPortNotExistOrOpend"));
						}
						result = false;
					}
				}
			}
			catch
			{
				if (pCmd == LedCmdType.Ctrl_Timing)
				{
					MessageBox.Show(formMain.ML.GetStr("Prompt_SerialPortNotExistOrOpend"));
				}
				else
				{
					MessageBox.Show(formMain.ML.GetStr("Prompt_SerialPortNotExistOrOpend"));
				}
				result = false;
			}
			return result;
		}

		private void GPRSSendStart()
		{
			GprsAdministrator.LoginSuccess = false;
			new formGPRSAdminLogin
			{
				IsUser = true
			}.ShowDialog(this);
			if (GprsAdministrator.LoginSuccess)
			{
				new formGPRS_Send
				{
					fm = this
				}.ShowDialog(this);
			}
		}

		public void PortTestSendAndTiming()
		{
			this.StartSend(false, this);
			this.Timing(false, this);
		}

		public void StartSend(bool pOK, Form ownerForm)
		{
			if (this.isUpdataCode)
			{
				formPublicUpdata formPublicUpdata = new formPublicUpdata(ownerForm);
				string codeFile = formPublicUpdata.getCodeFile();
				if (string.IsNullOrEmpty(codeFile))
				{
					this.isUpdataCode = false;
					return;
				}
				if (this.nowPanel != null)
				{
					this.nowPanel.FirmwareFilePath = codeFile;
				}
			}
			formSendData formSendData = new formSendData(this.isUpdataCode, this.isDownloadStringLibrary, this);

            formSendData.ShowOK = false;

            //formSendData.ShowOK = pOK;
			this.isUpdataCode = false;
			this.isDownloadStringLibrary = false;
			formSendData.ShowDialog(ownerForm);
		}

		public void CloudStartSend(Form ownerForm)
		{
			formCloudSendData formCloudSendData = new formCloudSendData(this.nowPanel);
			formCloudSendData.ShowDialog(ownerForm);
		}

		private void CheckAnimationAndBackground()
		{
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				LedItem ledItem = formMain.ledsys.SelectedPanel.Items[i];
				if (this.nowPanel.IsMSeries())
				{
					this.CheckBackground(new System.Drawing.Size(formMain.ledsys.SelectedPanel.Width, formMain.ledsys.SelectedPanel.Height), ledItem);
				}
				else if (ledItem.Background.Enabled)
				{
					this.MakeAnimation(new System.Drawing.Size(formMain.ledsys.SelectedPanel.Width, formMain.ledsys.SelectedPanel.Height), ledItem.Background);
				}
				for (int j = 0; j < ledItem.Subareas.Count; j++)
				{
					LedSubarea ledSubarea = ledItem.Subareas[j];
					if (ledSubarea.Type == LedSubareaType.Animation)
					{
						LedAnimation ledAnimation = (LedAnimation)ledSubarea.SelectedContent;
						this.MakeAnimation(ledAnimation);
						if (ledAnimation.Background.Enabled)
						{
							this.MakeAnimation(ledSubarea.Size, ledAnimation.Background);
						}
					}
					else if (ledSubarea.Type == LedSubareaType.PictureText)
					{
						for (int k = 0; k < ledSubarea.Contents.Count; k++)
						{
							LedPictureText ledPictureText = (LedPictureText)ledSubarea.Contents[k];
							if (ledPictureText.PictureTextType == LedPictureTextType.Animation)
							{
								this.MakeAnimation((LedAnimation)ledPictureText);
							}
							if (this.nowPanel.IsMSeries())
							{
								this.CheckBackground(ledSubarea.Size, ledSubarea.Contents[k]);
							}
							else if (ledPictureText.Background.Enabled)
							{
								this.MakeAnimation(ledSubarea.Size, ledPictureText.Background);
							}
						}
					}
					else if (ledSubarea.Type == LedSubareaType.Subtitle)
					{
						LedDText ledDText = (LedDText)ledSubarea.SelectedContent;
						if (this.nowPanel.IsMSeries())
						{
							this.CheckBackground(ledSubarea.Size, ledSubarea.SelectedContent);
						}
						else if (ledDText.Background.Enabled)
						{
							this.MakeAnimation(ledSubarea.Size, ledDText.Background);
						}
					}
					else if (this.nowPanel.IsMSeries())
					{
						this.CheckBackground(ledSubarea.Size, ledSubarea.SelectedContent);
					}
					else if (ledSubarea.SelectedContent.Background.Enabled)
					{
						this.MakeAnimation(ledSubarea.Size, ledSubarea.SelectedContent.Background);
					}
				}
			}
		}

		private void CheckAnimationAndNoBackground()
		{
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				LedItem ledItem = formMain.ledsys.SelectedPanel.Items[i];
				for (int j = 0; j < ledItem.Subareas.Count; j++)
				{
					LedSubarea ledSubarea = ledItem.Subareas[j];
					if (ledSubarea.Type == LedSubareaType.Animation)
					{
						LedAnimation pAnimation = (LedAnimation)ledSubarea.SelectedContent;
						this.MakeAnimation(pAnimation);
					}
					else if (ledSubarea.Type == LedSubareaType.PictureText)
					{
						for (int k = 0; k < ledSubarea.Contents.Count; k++)
						{
							LedPictureText ledPictureText = (LedPictureText)ledSubarea.Contents[k];
							if (ledPictureText.PictureTextType == LedPictureTextType.Animation)
							{
								this.MakeAnimation((LedAnimation)ledPictureText);
							}
						}
					}
					else if (ledSubarea.Type == LedSubareaType.Subtitle)
					{
						LedDText arg_B5_0 = (LedDText)ledSubarea.SelectedContent;
					}
				}
			}
		}

		private void MakeAnimation(System.Drawing.Size pSize, LedBackground pBackground)
		{
			if (pBackground == null)
			{
				return;
			}
			if (pBackground.Changed && !pBackground.CustomChecked)
			{
				base.TopMost = true;
				formAnimationMaker formAnimationMaker = new formAnimationMaker();
				formAnimationMaker.Make(pSize, pBackground);
				pBackground.Changed = false;
				formAnimationMaker.Dispose();
				base.TopMost = false;
			}
		}

		private void CheckBackground(System.Drawing.Size pSize, LedContent content)
		{
			foreach (LedBackground current in content.Backgrounds)
			{
				if (current.Enabled)
				{
					if (current.MaterialType == LedMaterialType.Flash)
					{
						this.MakeAnimation(pSize, current);
					}
					else if (current.MaterialType == LedMaterialType.Gif || current.MaterialType == LedMaterialType.image)
					{
						current.DrawMaterial(content.GetSize());
					}
				}
			}
		}

		private void CheckBackground(System.Drawing.Size pSize, LedItem item)
		{
			foreach (LedBackground current in item.Backgrounds)
			{
				if (current.Enabled)
				{
					if (current.MaterialType == LedMaterialType.Flash)
					{
						this.MakeAnimation(pSize, current);
					}
					else if (current.MaterialType == LedMaterialType.Gif || current.MaterialType == LedMaterialType.image)
					{
						current.DrawMaterial(new System.Drawing.Size(item.GetWidth(), item.GetHeight()));
					}
				}
			}
		}

		public void MakeAnimation(LedAnimation pAnimation)
		{
			if (pAnimation.Changed)
			{
				base.TopMost = true;
				formAnimationMaker formAnimationMaker = new formAnimationMaker();
				formAnimationMaker.Make(pAnimation.GetSize(), pAnimation);
				pAnimation.Changed = false;
				formAnimationMaker.Dispose();
				base.TopMost = false;
			}
		}

		private void pictureBox_ChangeSize_MouseDown(object sender, MouseEventArgs e)
		{
			formMain.ReleaseCapture();
			formMain.SendMessage(base.Handle, 274, 61448, 0);
		}

		private void fd_Disposed(object sender, EventArgs e)
		{
			base.Visible = true;
			this.HeartbeatProcessing(true);
		}

		private void UpAdjustButton_Click(object sender, EventArgs e)
		{
			try
			{
				int num = 0;
				if (this.nowSubarea.Type == LedSubareaType.Subtitle)
				{
					LedDText ledDText = (LedDText)this.nowSubarea.SelectedContent;
					num = --ledDText.EDText.VerticalOffset;
				}
				else if (this.nowSubarea.Type == LedSubareaType.PictureText)
				{
					LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.SelectedContent;
					if (ledPictureText != null)
					{
						if (ledPictureText.PictureTextType == LedPictureTextType.Text)
						{
							LedDText ledDText2 = (LedDText)ledPictureText;
							num = --ledDText2.EDText.VerticalOffset;
						}
						else if (ledPictureText.PictureTextType == LedPictureTextType.MultilineText)
						{
							LedMText ledMText = (LedMText)ledPictureText;
							num = --ledMText.EMText.VerticalOffset;
						}
						else if (ledPictureText.PictureTextType == LedPictureTextType.PublicText)
						{
							LedPText ledPText = (LedPText)ledPictureText;
							num = --ledPText.EPText.VerticalOffset;
						}
					}
				}
				this.MarqueeOffsetYValue.Text = num.ToString("D3");
				this.nowSubareaHolder.Redraw();
			}
			catch
			{
			}
		}

		private void DownAdjustButton_Click(object sender, EventArgs e)
		{
			try
			{
				int num = 0;
				if (this.nowSubarea.Type == LedSubareaType.Subtitle)
				{
					LedDText ledDText = (LedDText)this.nowSubarea.SelectedContent;
					num = ++ledDText.EDText.VerticalOffset;
				}
				else if (this.nowSubarea.Type == LedSubareaType.PictureText)
				{
					LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.SelectedContent;
					if (ledPictureText != null)
					{
						if (ledPictureText.PictureTextType == LedPictureTextType.Text)
						{
							LedDText ledDText2 = (LedDText)ledPictureText;
							num = ++ledDText2.EDText.VerticalOffset;
						}
						else if (ledPictureText.PictureTextType == LedPictureTextType.MultilineText)
						{
							LedMText ledMText = (LedMText)ledPictureText;
							num = ++ledMText.EMText.VerticalOffset;
						}
						else if (ledPictureText.PictureTextType == LedPictureTextType.PublicText)
						{
							LedPText ledPText = (LedPText)ledPictureText;
							num = ++ledPText.EPText.VerticalOffset;
						}
					}
				}
				this.MarqueeOffsetYValue.Text = num.ToString("D3");
				this.nowSubareaHolder.Redraw();
			}
			catch
			{
			}
		}

		private void StretchButton_Click(object sender, EventArgs e)
		{
			try
			{
				int num = 0;
				if (this.nowSubarea.Type == LedSubareaType.Subtitle)
				{
					LedDText ledDText = (LedDText)this.nowSubarea.SelectedContent;
					num = ++ledDText.EDText.VerticalStretch;
				}
				else if (this.nowSubarea.Type == LedSubareaType.PictureText)
				{
					LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.SelectedContent;
					if (ledPictureText != null)
					{
						if (ledPictureText.PictureTextType == LedPictureTextType.Text)
						{
							LedDText ledDText2 = (LedDText)ledPictureText;
							num = ++ledDText2.EDText.VerticalStretch;
						}
						else if (ledPictureText.PictureTextType == LedPictureTextType.MultilineText)
						{
							LedMText ledMText = (LedMText)ledPictureText;
							num = ++ledMText.EMText.VerticalStretch;
						}
						else if (ledPictureText.PictureTextType == LedPictureTextType.PublicText)
						{
							LedPText ledPText = (LedPText)ledPictureText;
							num = ++ledPText.EPText.VerticalStretch;
						}
					}
				}
				this.StretchLabel.Text = num.ToString("D3");
				this.nowSubareaHolder.Redraw();
			}
			catch
			{
			}
		}

		private void NarrowButton_Click(object sender, EventArgs e)
		{
			try
			{
				int num = 0;
				if (this.nowSubarea.Type == LedSubareaType.Subtitle)
				{
					LedDText ledDText = (LedDText)this.nowSubarea.SelectedContent;
					num = --ledDText.EDText.VerticalStretch;
				}
				else if (this.nowSubarea.Type == LedSubareaType.PictureText)
				{
					LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.SelectedContent;
					if (ledPictureText != null)
					{
						if (ledPictureText.PictureTextType == LedPictureTextType.Text)
						{
							LedDText ledDText2 = (LedDText)ledPictureText;
							num = --ledDText2.EDText.VerticalStretch;
						}
						else if (ledPictureText.PictureTextType == LedPictureTextType.MultilineText)
						{
							LedMText ledMText = (LedMText)ledPictureText;
							num = --ledMText.EMText.VerticalStretch;
						}
						else if (ledPictureText.PictureTextType == LedPictureTextType.PublicText)
						{
							LedPText ledPText = (LedPText)ledPictureText;
							num = --ledPText.EPText.VerticalStretch;
						}
					}
				}
				this.StretchLabel.Text = num.ToString("D3");
				this.nowSubareaHolder.Redraw();
			}
			catch
			{
			}
		}

		private void PrevousPage_Click(object sender, EventArgs e)
		{
			try
			{
				if (this.nowSubarea != null)
				{
					int num = -1;
					if (this.nowSubarea.Type == LedSubareaType.Subtitle)
					{
						LedDText ledDText = (LedDText)this.nowSubarea.SelectedContent;
						if (ledDText.EDText.PageNumber > 0)
						{
							num = --ledDText.EDText.PageNumber;
						}
					}
					else if (this.nowSubarea.Type == LedSubareaType.PictureText)
					{
						LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.SelectedContent;
						if (ledPictureText != null)
						{
							if (ledPictureText.PictureTextType == LedPictureTextType.Text)
							{
								LedDText ledDText2 = (LedDText)ledPictureText;
								if (ledDText2.EDText.PageNumber > 0)
								{
									num = --ledDText2.EDText.PageNumber;
								}
							}
							else if (ledPictureText.PictureTextType == LedPictureTextType.MultilineText)
							{
								LedMText ledMText = (LedMText)ledPictureText;
								if (ledMText.EMText.PageNumber > 0)
								{
									num = --ledMText.EMText.PageNumber;
								}
							}
							else if (ledPictureText.PictureTextType == LedPictureTextType.GIF)
							{
								LedGIF ledGIF = (LedGIF)ledPictureText;
								if (ledGIF.EGIF.PageNumber > 0)
								{
									num = --ledGIF.EGIF.PageNumber;
								}
							}
							else if (ledPictureText.PictureTextType == LedPictureTextType.PublicText)
							{
								LedPText ledPText = (LedPText)ledPictureText;
								if (ledPText.EPText.PageNumber > 0)
								{
									num = --ledPText.EPText.PageNumber;
								}
							}
						}
					}
					else if (this.nowSubarea.Type == LedSubareaType.Weather)
					{
						LedWeather ledWeather = (LedWeather)this.nowSubarea.SelectedContent;
						if (ledWeather.PageNumber > 0)
						{
							num = --ledWeather.PageNumber;
						}
						else
						{
							num = 0;
						}
					}
					if (num > -1)
					{
						this.toolStripLabelPageNumber.Text = (num + 1).ToString("D3");
						this.nowSubareaHolder.Redraw();
					}
				}
			}
			catch
			{
			}
		}

		private void NextPage_Click(object sender, EventArgs e)
		{
			try
			{
				if (this.nowSubarea != null)
				{
					int num = 0;
					if (this.nowSubarea.Type == LedSubareaType.Subtitle)
					{
						LedDText ledDText = (LedDText)this.nowSubarea.SelectedContent;
						num = ++ledDText.EDText.PageNumber;
						this.nowSubarea.Draw();
						int pageCount = ledDText.EDText.PageCount;
						if (num > pageCount - 1)
						{
							num = pageCount - 1;
							ledDText.EDText.PageNumber = num;
						}
					}
					else if (this.nowSubarea.Type == LedSubareaType.PictureText)
					{
						LedPictureText ledPictureText = (LedPictureText)this.nowSubarea.SelectedContent;
						if (ledPictureText != null)
						{
							if (ledPictureText.PictureTextType == LedPictureTextType.Text)
							{
								LedDText ledDText2 = (LedDText)ledPictureText;
								num = ++ledDText2.EDText.PageNumber;
								this.nowSubarea.Draw();
								int pageCount = ledDText2.EDText.PageCount;
								if (num > pageCount - 1)
								{
									num = pageCount - 1;
									ledDText2.EDText.PageNumber = num;
								}
							}
							else if (ledPictureText.PictureTextType == LedPictureTextType.MultilineText)
							{
								LedMText ledMText = (LedMText)ledPictureText;
								num = ++ledMText.EMText.PageNumber;
								this.nowSubarea.Draw();
								int pageCount = ledMText.EMText.PageCount;
								if (num > pageCount - 1)
								{
									num = pageCount - 1;
									ledMText.EMText.PageNumber = num;
								}
							}
							else if (ledPictureText.PictureTextType == LedPictureTextType.GIF)
							{
								LedGIF ledGIF = (LedGIF)ledPictureText;
								num = ++ledGIF.EGIF.PageNumber;
								this.nowSubarea.Draw();
								int pageCount = ledGIF.EGIF.PageCount;
								if (num > pageCount - 1)
								{
									num = pageCount - 1;
									ledGIF.EGIF.PageNumber = num;
								}
							}
							else if (ledPictureText.PictureTextType == LedPictureTextType.PublicText)
							{
								LedPText ledPText = (LedPText)ledPictureText;
								num = ++ledPText.EPText.PageNumber;
								this.nowSubarea.Draw();
								int pageCount = ledPText.EPText.PageCount;
								if (num > pageCount - 1)
								{
									num = pageCount - 1;
									ledPText.EPText.PageNumber = num;
								}
							}
						}
					}
					else if (this.nowSubarea.Type == LedSubareaType.Weather)
					{
						LedWeather ledWeather = (LedWeather)this.nowSubarea.SelectedContent;
						num = ++ledWeather.PageNumber;
						this.nowSubarea.Draw();
						int pageCount = ledWeather.GetPageCount();
						if (num > pageCount - 1)
						{
							num = pageCount - 1;
							ledWeather.PageNumber = num;
						}
					}
					this.toolStripLabelPageNumber.Text = (num + 1).ToString("D3");
					this.nowSubareaHolder.Redraw();
				}
			}
			catch
			{
			}
		}

		private void StretchLabel_DoubleClick(object sender, EventArgs e)
		{
		}

		private void toolAlignRightLeft_Click(object sender, EventArgs e)
		{
			if (this.nowSubarea == null || this.nowSubarea.IsOverlapping())
			{
				return;
			}
			this.FindNowSubareaHolder();
			if (this.nowSubareaHolder == null)
			{
				return;
			}
			int width = this.nowSubarea.Width;
			System.Drawing.Rectangle maxRectangle = this.GetMaxRectangle(this.nowSubarea.ParentItem, this.nowSubarea);
			this.nowSubareaHolder.Subarea.X = maxRectangle.X;
			this.nowSubareaHolder.Subarea.Width = maxRectangle.Width;
			this.nowSubareaHolder.ResetHolderPosition();
			this.RedrawSubarea();
			if (width != this.nowSubarea.Width)
			{
				this.BackgroundChangeSize(this.nowSubarea, this.nowPanel.IsMSeries());
			}
		}

		private void toolAlignTopBottom_Click(object sender, EventArgs e)
		{
			try
			{
				if (this.nowSubarea != null && !this.nowSubarea.IsOverlapping())
				{
					this.FindNowSubareaHolder();
					if (this.nowSubareaHolder != null)
					{
						int height = this.nowSubarea.Height;
						System.Drawing.Rectangle maxRectangle = this.GetMaxRectangle(this.nowSubarea.ParentItem, this.nowSubarea);
						this.nowSubareaHolder.Subarea.Y = maxRectangle.Y;
						this.nowSubareaHolder.Subarea.Height = maxRectangle.Height;
						this.nowSubareaHolder.ResetHolderPosition();
						this.RedrawSubarea();
						if (height != this.nowSubarea.Height)
						{
							this.BackgroundChangeSize(this.nowSubarea, this.nowPanel.IsMSeries());
						}
					}
				}
			}
			catch
			{
			}
		}

		private void toolAlignLeft_Click(object sender, EventArgs e)
		{
			if (this.nowSubarea == null || this.nowSubarea.IsOverlapping())
			{
				return;
			}
			this.FindNowSubareaHolder();
			if (this.nowSubareaHolder == null)
			{
				return;
			}
			System.Drawing.Rectangle maxRectangle = this.GetMaxRectangle(this.nowSubarea.ParentItem, this.nowSubarea);
			this.nowSubareaHolder.Subarea.X = maxRectangle.X;
			this.nowSubareaHolder.ResetHolderPosition();
		}

		private void toolAlignRight_Click(object sender, EventArgs e)
		{
			if (this.nowSubarea == null || this.nowSubarea.IsOverlapping())
			{
				return;
			}
			this.FindNowSubareaHolder();
			if (this.nowSubareaHolder == null)
			{
				return;
			}
			System.Drawing.Rectangle maxRectangle = this.GetMaxRectangle(this.nowSubarea.ParentItem, this.nowSubarea);
			this.nowSubareaHolder.Subarea.X = maxRectangle.X + maxRectangle.Width - this.nowSubareaHolder.Subarea.Width;
			this.nowSubareaHolder.ResetHolderPosition();
		}

		private void toolAlignTop_Click(object sender, EventArgs e)
		{
			if (this.nowSubarea == null || this.nowSubarea.IsOverlapping())
			{
				return;
			}
			this.FindNowSubareaHolder();
			if (this.nowSubareaHolder == null)
			{
				return;
			}
			System.Drawing.Rectangle maxRectangle = this.GetMaxRectangle(this.nowSubarea.ParentItem, this.nowSubarea);
			this.nowSubareaHolder.Subarea.Y = maxRectangle.Y;
			this.nowSubareaHolder.ResetHolderPosition();
		}

		private void toolAlignBottom_Click(object sender, EventArgs e)
		{
			if (this.nowSubarea == null || this.nowSubarea.IsOverlapping())
			{
				return;
			}
			this.FindNowSubareaHolder();
			if (this.nowSubareaHolder == null)
			{
				return;
			}
			System.Drawing.Rectangle maxRectangle = this.GetMaxRectangle(this.nowSubarea.ParentItem, this.nowSubarea);
			this.nowSubareaHolder.Subarea.Y = maxRectangle.Y + maxRectangle.Height - this.nowSubareaHolder.Subarea.Height;
			this.nowSubareaHolder.ResetHolderPosition();
		}

		private void checkBox3_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (checkBox.Checked && formMain.ledsys.SelectedPanel.SelectedItem.Background.Enabled)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_ItemAndContentCantUseBackgroundBoth"));
				this.contentBackgroundIsUse.Checked = false;
				return;
			}
			this.nowBackGround.Enabled = checkBox.Checked;
			this.SetContentBackground(checkBox.Checked);
			if (this.nowBackGround.CustomChecked)
			{
				this.contentBackgroundEffectComboBox.Enabled = false;
				return;
			}
			this.contentBackgroundSelect.Enabled = false;
		}

		private void button2_Click(object sender, EventArgs e)
		{
			this.openFileDialog1.Filter = "Image(*.gif *.jpg *.bmp *.png)|*.gif;*.jpg;*.bmp;*.png";
			if (this.openFileDialog1.ShowDialog() == DialogResult.OK)
			{
				this.nowBackGround.Draw(new System.Drawing.Size(formMain.ledsys.SelectedPanel.Width, formMain.ledsys.SelectedPanel.Height), this.openFileDialog1.FileName);
				this.isContentBackgroundSelected = true;
				return;
			}
			this.isContentBackgroundSelected = false;
		}

		private void itemBackgroundSpeed_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowBackGround.Speed = int.Parse(comboBox.Text.Trim());
		}

		private void comboBox5_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowBackGround.Speed = int.Parse(comboBox.Text.Trim());
		}

		private void SetItemBackground(bool pValue)
		{
			this.itemBackgroundEffectComboBox.Enabled = pValue;
			this.itemBackgroundGradation.Enabled = pValue;
			this.itemBackgroundSelectButton.Enabled = pValue;
			this.itemBackgroundSizeModel.Enabled = pValue;
			this.itemBackgroundSpeed.Enabled = pValue;
			this.itemBackgroundUseGif.Enabled = pValue;
		}

		private void SetContentBackground(bool pValue)
		{
			this.contentBackgroundEffectComboBox.Enabled = pValue;
			this.contentBackgroundGradition.Enabled = pValue;
			this.contentBackgroundSelect.Enabled = pValue;
			this.contentBackgroundSize.Enabled = pValue;
			this.contentBackgroundSpeed.Enabled = pValue;
			this.contentBackgroundUseGif.Enabled = pValue;
		}

		private void ItemLoadBackgroundParam()
		{
			try
			{
				this.itemBackgroundIsUse.Checked = this.nowBackGround.Enabled;
				this.SetItemBackground(this.itemBackgroundIsUse.Checked);
				this.itemBackgroundEffectComboBox.Text = formMain.ML.GetStr("BackEffect_" + this.nowBackGround.EffectsValueName);
				this.itemBackgroundSpeed.Text = this.nowBackGround.Speed.ToString();
				this.itemBackgroundUseGif.Checked = this.nowBackGround.CustomChecked;
				if (this.nowBackGround.Enabled)
				{
					if (this.nowBackGround.CustomChecked)
					{
						this.itemBackgroundUseGif.Checked = true;
						this.itemBackgroundEffectComboBox.Enabled = false;
					}
					else
					{
						this.itemBackgroundUseGif.Checked = false;
						this.itemBackgroundEffectComboBox.Enabled = true;
					}
				}
			}
			catch
			{
				this.itemBackgroundIsUse.Checked = false;
				this.SetItemBackground(false);
			}
		}

		private void ContentLoadBackgroundParam()
		{
			try
			{
				this.contentBackgroundIsUse.Checked = this.nowBackGround.Enabled;
				this.SetContentBackground(this.contentBackgroundIsUse.Checked);
				this.contentBackgroundSpeed.Text = this.nowBackGround.Speed.ToString();
				this.contentBackgroundEffectComboBox.Text = formMain.ML.GetStr("BackEffect_" + this.nowBackGround.EffectsValueName);
				this.contentBackgroundUseGif.Checked = this.nowBackGround.CustomChecked;
				if (this.nowBackGround.Enabled)
				{
					if (this.nowBackGround.CustomChecked)
					{
						this.contentBackgroundUseGif.Checked = true;
						this.contentBackgroundEffectComboBox.Enabled = false;
					}
					else
					{
						this.contentBackgroundUseGif.Checked = false;
						this.contentBackgroundEffectComboBox.Enabled = true;
					}
				}
			}
			catch
			{
				this.contentBackgroundIsUse.Checked = false;
				this.SetContentBackground(this.contentBackgroundIsUse.Checked);
			}
		}

		private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formAbout formAbout = new formAbout();
			formAbout.ShowDialog();
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void MenuMouseEvent()
		{
			this.BindMenuItemEvent(this.fileToolStripMenuItem);
			this.BindMenuItemEvent(this.openProjectToolStripMenuItem);
			this.BindMenuItemEvent(this.projectSavaAsToolStripMenuItem);
			this.BindMenuItemEvent(this.newPorjectToolStripMenuItem);
			this.BindMenuItemEvent(this.exitToolStripMenuItem);
			this.BindMenuItemEvent(this.editMenuToolStripMenuItem);
			this.BindMenuItemEvent(this.addItemToolStripMenuItem);
			this.BindMenuItemEvent(this.addTextToolStripMenuItem);
			this.BindMenuItemEvent(this.addAnimationToolStripMenuItem);
			this.BindMenuItemEvent(this.addMarqueeToolStripMenuItem);
			this.BindMenuItemEvent(this.addClockToolStripMenuItem);
			this.BindMenuItemEvent(this.addDialToolStripMenuItem);
			this.BindMenuItemEvent(this.addLunarToolStripMenuItem);
			this.BindMenuItemEvent(this.addMenuToolStripMenuItem);
			this.BindMenuItemEvent(this.addTemperatureToolStripMenuItem);
			this.BindMenuItemEvent(this.addWeatherToolStripMenuItem);
			this.BindMenuItemEvent(this.addStringToolStripMenuItem);
			this.BindMenuItemEvent(this.addHumidityToolStripMenuItem);
			this.BindMenuItemEvent(this.addNoiseToolStripMenuItem);
			this.BindMenuItemEvent(this.EditPublicTextToolStripMenuItem);
			this.BindMenuItemEvent(this.EditDataSourceToolStripMenuItem);
			this.BindMenuItemEvent(this.EditStringLibraryToolStripMenuItem);
			this.BindMenuItemEvent(this.deleteSelectionToolStripMenuItem);
			this.BindMenuItemEvent(this.setingMenuToolStripMenuItem);
			this.BindMenuItemEvent(this.panelSettingToolStripMenuItem);
			this.BindMenuItemEvent(this.luminanceSettingToolStripMenuItem);
			this.BindMenuItemEvent(this.autoStartAndCloseToolStripMenuItem);
			this.BindMenuItemEvent(this.buttonFunctionConfigurationToolStripMenuItem);
			this.BindMenuItemEvent(this.timingRegulateToolStripMenuItem);
			this.BindMenuItemEvent(this.queryPanelStateToolStripMenuItem);
			this.BindMenuItemEvent(this.tsmiEthernetSettings);
			this.BindMenuItemEvent(this.tsmiGPRSSettings);
			this.BindMenuItemEvent(this.configToolStripMenuItem);
			this.BindMenuItemEvent(this.ethernetUpdateToolStripMenuItem);
			this.BindMenuItemEvent(this.uSBUpdateToolStripMenuItem);
			this.BindMenuItemEvent(this.saveWifiDataToolStripMenuItemToolStripMenuItem);
			this.BindMenuItemEvent(this.timeSequenceToolStripMenuItem);
			this.BindMenuItemEvent(this.tsmiGroup);
			this.BindMenuItemEvent(this.tsmiLocalServerSetting);
			this.BindMenuItemEvent(this.tsmiCloudLogin);
			this.BindMenuItemEvent(this.tsmiCloudLogout);
			this.BindMenuItemEvent(this.tsmiCloudRegister);
			this.BindMenuItemEvent(this.tsmiCloudQueryReview);
			this.BindMenuItemEvent(this.tsmiCloudManagement);
			this.BindMenuItemEvent(this.tsmiGroupLuminance);
			this.BindMenuItemEvent(this.tsmiGroupTiming);
			this.BindMenuItemEvent(this.tsmiGroupPowerOff);
			this.BindMenuItemEvent(this.tsmiGroupPowerOn);
			this.BindMenuItemEvent(this.tsmiGroupTimerSwitch);
			this.BindMenuItemEvent(this.tsmiGroupSending);
			this.BindMenuItemEvent(this.languateSelectToolStripMenuItem);
			this.BindMenuItemEvent(this.multiLanguageTemplatetoolStripMenuItem1);
			this.BindMenuItemEvent(this.SendAll_ReSend_ToolStripMenuItem);
			foreach (ToolStripMenuItem toolStripMenuItem in this.languateSelectToolStripMenuItem.DropDownItems)
			{
				this.BindMenuItemEvent(toolStripMenuItem);
				toolStripMenuItem.Font = Template.MenuFont;
				toolStripMenuItem.ForeColor = Template.MenuForecolor;
				toolStripMenuItem.BackColor = Template.MenuItemBackcolor;
			}
			this.BindMenuItemEvent(this.skinSelectToolStripMenuItem);
			this.BindMenuItemEvent(this.Skin_DefaultToolStripMenuItem);
			this.BindMenuItemEvent(this.skin1ToolStripMenuItem);
			this.BindMenuItemEvent(this.helpToolStripMenuItem);
			this.BindMenuItemEvent(this.helpdocToolStripMenuItem);
			this.BindMenuItemEvent(this.softwareUpdateToolStripMenuItem);
			this.BindMenuItemEvent(this.aboutToolStripMenuItem);
			this.BindMenuItemEvent(this.skinClassic1ToolStripMenuItem);
			this.BindMenuItemEvent(this.skinClassic2ToolStripMenuItem);
			this.BindMenuItemEvent(this.skinClassic3ToolStripMenuItem);
			this.BindMenuItemEvent(this.skinXPBlueToolStripMenuItem);
			this.BindMenuItemEvent(this.skinXPOliveGreenToolStripMenuItem);
			this.BindMenuItemEvent(this.skinXPSilverToolStripMenuItem);
			this.BindMenuItemEvent(this.serialTestToolStripMenuItem3);
			this.BindMenuItemEvent(this.turnOfToolStripMenuItem2);
			this.BindMenuItemEvent(this.turnOnToolStripMenuItem1);
		}

		private void BindMenuItemEvent(ToolStripMenuItem pItem)
		{
			pItem.Paint += new PaintEventHandler(this.MenuItemPaint);
			pItem.MouseLeave += new EventHandler(this.MenuItemMouseLeave);
			pItem.MouseEnter += new EventHandler(this.MenuItemMouseEnter);
		}

		private void MenuItemMouseEnter(object sender, EventArgs e)
		{
			ToolStripMenuItem toolStripMenuItem = sender as ToolStripMenuItem;
			toolStripMenuItem.Tag = (string)toolStripMenuItem.Tag + "MouseIn";
			if (toolStripMenuItem != null)
			{
				this.bPaint = true;
				toolStripMenuItem.Invalidate();
			}
		}

		private void MenuItemMouseLeave(object sender, EventArgs e)
		{
			try
			{
				ToolStripMenuItem toolStripMenuItem = sender as ToolStripMenuItem;
				this.bPaint = false;
				if (toolStripMenuItem.Tag != null)
				{
					toolStripMenuItem.Tag = ((string)toolStripMenuItem.Tag).Replace("MouseIn", "");
				}
			}
			catch
			{
			}
		}

		private void MenuItemPaint(object sender, PaintEventArgs e)
		{
			ToolStripMenuItem toolStripMenuItem = sender as ToolStripMenuItem;
			if (toolStripMenuItem.Tag == null)
			{
				return;
			}
			if (toolStripMenuItem != null)
			{
				try
				{
					if (this.bPaint & ((string)toolStripMenuItem.Tag).EndsWith("MouseIn"))
					{
						if (toolStripMenuItem.OwnerItem is ToolStripMenuItem)
						{
							e.Graphics.FillRectangle(new System.Drawing.SolidBrush(Template.MenuMouseEnterColor), 0, 0, toolStripMenuItem.Width, toolStripMenuItem.Height);
							System.Drawing.Brush brush = new System.Drawing.SolidBrush(Template.MenuForecolor);
							new System.Drawing.Font(toolStripMenuItem.Font.Name, toolStripMenuItem.Font.Size);
							e.Graphics.DrawString(toolStripMenuItem.Text, toolStripMenuItem.Font, brush, 10f, 2f);
							brush.Dispose();
						}
						else
						{
							e.Graphics.FillRectangle(new System.Drawing.SolidBrush(Template.MenuMouseEnterColor), 0, 0, toolStripMenuItem.Width, toolStripMenuItem.Height);
							System.Drawing.Brush brush2 = new System.Drawing.SolidBrush(Template.MenuForecolor);
							new System.Drawing.Font(toolStripMenuItem.Font.Name, toolStripMenuItem.Font.Size);
							e.Graphics.DrawString(toolStripMenuItem.Text, toolStripMenuItem.Font, brush2, 5f, 2f);
							brush2.Dispose();
						}
					}
				}
				catch
				{
				}
			}
		}

		private void openProjectToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.DeletePanelFromIPCServer();
			this.OpenProject();
			this.AddPanelToIPCServer();
		}

		private void timingRegulateToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.Timing(true, this);
		}

		public void Timing(bool pOk, Form ownerForm)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.nowPanel.GetType() == typeof(LedPanelCloud) && this.nowPanel.State == LedPanelState.Offline && MessageBox.Show(this, formMain.ML.GetStr("Message_Selected_Terminal_Is_Offline_And_Continue_Sending_May_Not_Send_To_Terminal"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == DialogResult.Cancel)
			{
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.IsPanelCloud(formMain.ledsys.SelectedPanel))
			{
				this.CloudSendSingleCmdStart(LedCmdType.Ctrl_Timing, null, this.timingRegulateToolStripMenuItem.Text, (LedPanelCloud)formMain.ledsys.SelectedPanel, pOk, ownerForm);
			}
			else
			{
				this.SendSingleCmdStart(LedCmdType.Ctrl_Timing, null, this.timingRegulateToolStripMenuItem.Text, formMain.ledsys.SelectedPanel, pOk, ownerForm);
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		public void SendSingleCmdStart(LedCmdType pCmd, object objData, string pOperation, LedPanel panel, bool pOK, Form ownerForm)
		{
			if (panel.PortType == LedPortType.USB)
			{
				MessageBox.Show(this, formMain.ML.GetStr("formMain_SendData_SelectedUsb"));
				return;
			}
			if (panel.PortType == LedPortType.GPRS)
			{
				if (panel.GPRSCommunicaitonMode == LedGPRSCommunicationMode.GprsServer)
				{
					MessageBox.Show(this, formMain.ML.GetStr("GPRS_PleaseToGPRS"));
				}
				return;
			}
			formSendSingle formSendSingle = new formSendSingle(objData, pOperation, panel, pOK, pCmd, this);
            formSendSingle.LastSendCmd = pCmd;

            formSendSingle.ShowDialog(ownerForm);
		}

		public void CloudSendSingleCmdStart(LedCmdType cmdType, object data, string opration, LedPanelCloud panelCloud, bool isShowOK, Form ownerForm)
		{
			formCloudSendSingle formCloudSendSingle = new formCloudSendSingle(data, opration, panelCloud, isShowOK, cmdType, this);
            formCloudSendSingle.LastSendCmd = cmdType;

            formCloudSendSingle.ShowDialog(ownerForm);
		}

		private void getSetting_Click(object sender, EventArgs e)
		{
		}

		private void formMain_SizeChanged(object sender, EventArgs e)
		{
			this.animationPreviewZhGroupBox.Size = this.zhGroupBox_Panel.Size;
			this.generateAnimationZhGroupBox.Size = this.zhGroupBox_Panel.Size;
		}

		private void TestToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void itemBackgroundEffectComboBox_Click(object sender, EventArgs e)
		{
			formEffectSelecter formEffectSelecter = new formEffectSelecter();
			formEffectSelecter.Size = new System.Drawing.Size(276, 658);
			string text = formEffectSelecter.SelectEffect(LedEffectsType.Background, this.nowBackGround.EffectsValueName);
			formEffectSelecter.Dispose();
			this.nowBackGround.EffectsTextName = formMain.GetStr("BackEffect_" + text);
			this.itemBackgroundEffectComboBox.Text = formMain.GetStr("BackEffect_" + text);
			this.nowBackGround.EffectsValueName = text;
			this.nowBackGround.Changed = true;
			this.itemBackgroundSpeed.Focus();
		}

		private void contentBackgroundEffectComboBox_Click(object sender, EventArgs e)
		{
			formEffectSelecter formEffectSelecter = new formEffectSelecter();
			formEffectSelecter.Size = new System.Drawing.Size(276, 658);
			string text = formEffectSelecter.SelectEffect(LedEffectsType.Background, this.nowBackGround.EffectsValueName);
			formEffectSelecter.Dispose();
			this.nowBackGround.EffectsTextName = formMain.GetStr("BackEffect_" + text);
			this.contentBackgroundEffectComboBox.Text = formMain.GetStr("BackEffect_" + text);
			this.nowBackGround.EffectsValueName = text;
			this.nowBackGround.Changed = true;
			this.contentBackgroundSpeed.Focus();
		}

		private void itemBackgroundSettingGroupBox_Paint(object sender, PaintEventArgs e)
		{
		}

		private void contentBackgroundUseGif_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (checkBox.Checked)
			{
				this.button2_Click(null, null);
				if (!this.isContentBackgroundSelected)
				{
					checkBox.Checked = false;
					return;
				}
			}
			this.nowBackGround.CustomChecked = checkBox.Checked;
			this.contentBackgroundEffectComboBox.Enabled = !this.nowBackGround.CustomChecked;
			this.contentBackgroundSelect.Enabled = this.nowBackGround.CustomChecked;
		}

		private void itemBackgroundUseGif_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (checkBox.Checked)
			{
				this.itemSelectBackgroundButton_Click(null, null);
				if (!this.isItemBackgroundSelected)
				{
					checkBox.Checked = false;
					return;
				}
			}
			this.nowBackGround.CustomChecked = checkBox.Checked;
			this.itemBackgroundEffectComboBox.Enabled = !this.nowBackGround.CustomChecked;
			this.itemBackgroundSelectButton.Enabled = this.nowBackGround.CustomChecked;
		}

		private void formMain_KeyDown(object sender, KeyEventArgs e)
		{
			if (e.KeyCode == Keys.F1)
			{
				this.helpdocToolStripMenuItem_Click(null, null);
			}
			else if (e.Control && e.KeyCode == Keys.S)
			{
				this.HeartbeatProcessing(false);
				this.isCloudTerminalMonitorEnabled = false;
				this.ParamSet();
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
			}
			else if (e.Control && e.KeyCode == Keys.T)
			{
				this.Timing(true, this);
			}
			else if (e.Control && e.Alt && e.KeyCode == Keys.M)
			{
				this.HeartbeatProcessing(false);
				this.isCloudTerminalMonitorEnabled = false;
				formMultiLanguage formMultiLanguage = new formMultiLanguage();
				formMultiLanguage.Show();
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
			}
			else if (e.Control && e.KeyCode == Keys.D && !formMain.IsforeignTradeMode && formMain.stringSubareaEnabled)
			{
				this.HeartbeatProcessing(false);
				this.isCloudTerminalMonitorEnabled = false;
				if (this.nowLedContent != null && this.nowLedContent.Type == LedContentType.String)
				{
					formStringTest formStringTest = new formStringTest(this.nowString, this);
					formStringTest.ShowDialog();
				}
				else
				{
					MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_String_Subarea"));
				}
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
			}
			if (e.Shift && e.Alt && e.KeyCode == Keys.T)
			{
				this.HeartbeatProcessing(false);
				this.isCloudTerminalMonitorEnabled = false;
				formCheckCode formCheckCode = new formCheckCode();
				if (formCheckCode.Check("zh", false))
				{
					formPortTest formPortTest = new formPortTest();
					formPortTest.Edig(this);
				}
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
			}
			if (e.Control && e.Alt && e.KeyCode == Keys.P)
			{
				this.HeartbeatProcessing(false);
				this.isCloudTerminalMonitorEnabled = false;
				formCheckCode formCheckCode2 = new formCheckCode();
				if (formCheckCode2.Check("zh", false))
				{
					formParameters formParameters = new formParameters();
					formParameters.ShowDialog(this);
					this.ResetRunMode();
					foreach (LedPanel current in formMain.ledsys.Panels)
					{
						current.CloudServerAccessMode = LedGlobal.CloudServerAccessMode;
						current.CloudServerIPAddress = LedGlobal.CloudServerIPAddress;
						current.CloudServerDomainName = LedGlobal.CloudServerDomainName;
					}
				}
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
			}
		}

		private void turnOfToolStripMenuItem2_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.nowPanel.GetType() == typeof(LedPanelCloud) && this.nowPanel.State == LedPanelState.Offline && MessageBox.Show(this, formMain.ML.GetStr("Message_Selected_Terminal_Is_Offline_And_Continue_Sending_May_Not_Send_To_Terminal"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == DialogResult.Cancel)
			{
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.IsPanelCloud(formMain.ledsys.SelectedPanel))
			{
				this.CloudSendSingleCmdStart(LedCmdType.Ctrl_Power_Off, null, this.turnOfToolStripMenuItem2.Text, (LedPanelCloud)formMain.ledsys.SelectedPanel, true, this);
			}
			else
			{
				this.SendSingleCmdStart(LedCmdType.Ctrl_Power_Off, null, this.turnOfToolStripMenuItem2.Text, formMain.ledsys.SelectedPanel, true, this);
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void turnOnToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.nowPanel.GetType() == typeof(LedPanelCloud) && this.nowPanel.State == LedPanelState.Offline && MessageBox.Show(this, formMain.ML.GetStr("Message_Selected_Terminal_Is_Offline_And_Continue_Sending_May_Not_Send_To_Terminal"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == DialogResult.Cancel)
			{
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.IsPanelCloud(formMain.ledsys.SelectedPanel))
			{
				this.CloudSendSingleCmdStart(LedCmdType.Ctrl_Power_On, null, this.turnOnToolStripMenuItem1.Text, (LedPanelCloud)formMain.ledsys.SelectedPanel, true, this);
			}
			else
			{
				this.SendSingleCmdStart(LedCmdType.Ctrl_Power_On, null, this.turnOnToolStripMenuItem1.Text, formMain.ledsys.SelectedPanel, true, this);
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void serialTestToolStripMenuItem3_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formComTest formComTest = new formComTest();
			formComTest.ShowDialog();
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private string GetFolderName(string pPath)
		{
			string name = formMain.ledsys.Name;
			if (Directory.Exists(pPath + "\\" + name))
			{
				for (int i = 1; i < 10000; i++)
				{
					string text = name + "-" + i.ToString("D3");
					if (!Directory.Exists(pPath + "\\" + text))
					{
						return text;
					}
				}
				return name;
			}
			return name;
		}

		private void SaveasProject()
		{
			try
			{
				this.SaveProject();
				if (this.folderBrowserDialog1.ShowDialog() == DialogResult.OK)
				{
					this.label_Waitting_Picture.Text = formMain.ML.GetStr("Prompt_NowIsSavingProject");
					this.SetWaittingPanelVisable(true);
					Thread.Sleep(200);
					string folderName = this.GetFolderName(this.folderBrowserDialog1.SelectedPath);
					string text = this.folderBrowserDialog1.SelectedPath + "\\" + folderName;
					Directory.CreateDirectory(text);
					if (text == formMain.projectDir)
					{
						this.SaveProject();
					}
					else
					{
						formMain.CopyDirectory(formMain.projectDir, text);
						this.SetWaittingPanelVisable(false);
					}
				}
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
				this.SetWaittingPanelVisable(false);
			}
		}

		private void CopyDirectory(string srcPath, string destPath, bool overwrite = true)
		{
			srcPath = (srcPath.EndsWith("\\") ? srcPath : (srcPath + "\\"));
			destPath = (destPath.EndsWith("\\") ? destPath : (destPath + "\\"));
			if (Directory.Exists(srcPath))
			{
				if (!Directory.Exists(destPath))
				{
					Directory.CreateDirectory(destPath);
				}
				string[] files = Directory.GetFiles(srcPath);
				for (int i = 0; i < files.Length; i++)
				{
					string fileName = files[i];
					Application.DoEvents();
					FileInfo fileInfo = new FileInfo(fileName);
					fileInfo.CopyTo(destPath + fileInfo.Name, overwrite);
				}
				string[] directories = Directory.GetDirectories(srcPath);
				for (int j = 0; j < directories.Length; j++)
				{
					string text = directories[j];
					Application.DoEvents();
					DirectoryInfo directoryInfo = new DirectoryInfo(text);
					this.CopyDirectory(text, destPath + directoryInfo.Name, overwrite);
				}
			}
		}

		private void OpenProject()
		{
			this.openFileDialog1.Filter = "ZH Project File(*.zhled)|*.zhled";
			this.SaveProject();
			try
			{
				if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
				{
					return;
				}
			}
			catch
			{
				this.openFileDialog1.InitialDirectory = formMain.DesktopPath;
				if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
				{
					return;
				}
			}
			FileInfo fileInfo = new FileInfo(this.openFileDialog1.FileName);
			if (fileInfo.Directory.ToString() == formMain.projectDir)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_SelectProjectIsCurrentProject"));
			}
			else
			{
				if (this.LoadProjectVersion(fileInfo.FullName) == 0)
				{
					MessageBox.Show(this, string.Format(formMain.ML.GetStr("Prompt_VersionIncompatible"), formMain.ledTitleVersion), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
					return;
				}
				if (MessageBox.Show(this, formMain.ML.GetStr("Prompt_RemoveProject"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
				{
					return;
				}
				if (this.isCloudLogin)
				{
					this.CloudLogout();
				}
				this.label_Waitting_Picture.Text = formMain.ML.GetStr("Prompt_NowIsLoadingProject");
				this.SetWaittingPanelVisable(true);
				Thread.Sleep(200);
				this.ledTree.Nodes.Clear();
				DirectoryInfo directoryInfo = new DirectoryInfo(Settings.Default.ProjectDir);
				DirectoryInfo directory = fileInfo.Directory;
				formMain.DeleteFolder(directoryInfo.FullName);
				Thread.Sleep(200);
				formMain.CopyDirectory(directory.FullName, directoryInfo.FullName);
				formMain.projectName = (Settings.Default.ProjectName = fileInfo.Name);
				Settings.Default.Save();
				formMain.projectPath = formMain.projectDir + "\\" + formMain.projectName;
				this.LoadProject();
				this.SetWaittingPanelVisable(false);
				return;
			}
		}

		public static void CopyDirectory(string sourcePath, string destinationPath)
		{
			DirectoryInfo directoryInfo = new DirectoryInfo(sourcePath);
			Directory.CreateDirectory(destinationPath);
			FileSystemInfo[] fileSystemInfos = directoryInfo.GetFileSystemInfos();
			for (int i = 0; i < fileSystemInfos.Length; i++)
			{
				FileSystemInfo fileSystemInfo = fileSystemInfos[i];
				Application.DoEvents();
				string text = Path.Combine(destinationPath, fileSystemInfo.Name);
				if (fileSystemInfo is FileInfo)
				{
					File.Copy(fileSystemInfo.FullName, text);
				}
				else
				{
					Directory.CreateDirectory(text);
					formMain.CopyDirectory(fileSystemInfo.FullName, text);
				}
			}
		}

		public static void DeleteFolder(string directoryPath)
		{
			string[] fileSystemEntries = Directory.GetFileSystemEntries(directoryPath);
			for (int i = 0; i < fileSystemEntries.Length; i++)
			{
				string text = fileSystemEntries[i];
				Application.DoEvents();
				if (File.Exists(text))
				{
					FileInfo fileInfo = new FileInfo(text);
					if (fileInfo.Attributes.ToString().IndexOf("ReadOnly") != -1)
					{
						fileInfo.Attributes = FileAttributes.Normal;
					}
					File.Delete(text);
				}
				else
				{
					formMain.DeleteFolder(text);
				}
			}
			Directory.Delete(directoryPath);
		}

		private void projectSavaAsToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.SaveasProject();
		}

		private void newPorjectToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (MessageBox.Show(this, formMain.ML.GetStr("Prompt_RemoveProject"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
			{
				formGetString formGetString = new formGetString();
				string @string = formGetString.GetString(formMain.ML.GetStr("Prompt_PleaseEnterNewProjectname"));
				if (string.IsNullOrEmpty(@string))
				{
					return;
				}
				formMain.ledsys.Name = @string;
				foreach (LedPanel current in formMain.ledsys.Panels)
				{
					current.Dispose(true);
					current.Items.Clear();
					current.InitializeObject();
					LedItem ledItem = new LedItem();
					ledItem.AddEdge(formMain.NewEdgeData());
					ledItem.TextName = formMain.ML.GetStr("Display_Item") + "1";
					ledItem.ValueName = ledItem.TextName;
					ledItem.No = 1;
					current.AddItem(ledItem);
				}
				this.ledTree.Nodes.Clear();
				this.AddPanelToTree();
				this.DisplayItem(LedDisplayMode.Load);
			}
		}

		private void LoadLanguage()
		{
			DirectoryInfo directoryInfo = new DirectoryInfo(Application.StartupPath + "\\Language");
			DirectoryInfo[] directories = directoryInfo.GetDirectories();
			DirectoryInfo[] array = directories;
			for (int i = 0; i < array.Length; i++)
			{
				DirectoryInfo directoryInfo2 = array[i];
				if (File.Exists(directoryInfo2.FullName + "\\Config.ini") && File.Exists(directoryInfo2.FullName + "\\" + directoryInfo2.Name + ".xml"))
				{
					StreamReader streamReader = new StreamReader(directoryInfo2.FullName + "\\Config.ini", Encoding.UTF8);
					string text = streamReader.ReadToEnd();
					string[] array2 = text.Split(new char[]
					{
						'|'
					});
					if (text.Length > 0)
					{
						ToolStripMenuItem toolStripMenuItem = new ToolStripMenuItem(array2[0]);
						toolStripMenuItem.ToolTipText = formMain.ML.GetStr("Language_" + array2[1]);
						toolStripMenuItem.Name = "Language" + directoryInfo2.Name;
						toolStripMenuItem.Tag = directoryInfo2.Name;
						toolStripMenuItem.Click += new EventHandler(this.ChangeLanguage);
						this.languateSelectToolStripMenuItem.DropDownItems.Add(toolStripMenuItem);
					}
				}
			}
		}

		private void ChangeLanguageTag()
		{
			DirectoryInfo directoryInfo = new DirectoryInfo(Application.StartupPath + "\\Language");
			DirectoryInfo[] directories = directoryInfo.GetDirectories();
			DirectoryInfo[] array = directories;
			for (int i = 0; i < array.Length; i++)
			{
				DirectoryInfo directoryInfo2 = array[i];
				if (File.Exists(directoryInfo2.FullName + "\\Config.ini") && File.Exists(directoryInfo2.FullName + "\\" + directoryInfo2.Name + ".xml"))
				{
					StreamReader streamReader = new StreamReader(directoryInfo2.FullName + "\\Config.ini", Encoding.Default);
					string text = streamReader.ReadToEnd();
					streamReader.Dispose();
					string[] array2 = text.Split(new char[]
					{
						'|'
					});
					foreach (ToolStripMenuItem toolStripMenuItem in this.languateSelectToolStripMenuItem.DropDownItems)
					{
						if (toolStripMenuItem.Tag != null)
						{
							string text2 = toolStripMenuItem.Tag.ToString();
							if (text2.Replace("MouseIn", "") == directoryInfo2.Name)
							{
								toolStripMenuItem.ToolTipText = formMain.ML.GetStr("Language_" + array2[1]);
							}
						}
					}
				}
			}
		}

		private void uSBUpdateToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formUSBUpdate formUSBUpdate = new formUSBUpdate();
			formUSBUpdate.ShowDialog();
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void helpdocToolStripMenuItem_Click(object sender, EventArgs e)
		{
			try
			{
				if (Settings.Default.Language == formMain.LanguageChineseSimplified || Settings.Default.Language == formMain.LanguageChineseTraditional)
				{
					Help.ShowHelp(this, Application.StartupPath + "\\helpV6.chm");
				}
				else
				{
					Help.ShowHelp(this, Application.StartupPath + "\\helpV6_en.chm");
				}
			}
			catch
			{
			}
		}

		private void softwareUpdateToolStripMenuItem_Click(object sender, EventArgs e)
		{
			formSoftwareUpdate formSoftwareUpdate = new formSoftwareUpdate();
			formSoftwareUpdate.ShowDialog(this);
		}

		private void tsmiGroupLuminance_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			LedLuminance ledLuminance = new LedLuminance();
			if (this.nowPanel != null)
			{
				ledLuminance.Copy(this.nowPanel.Luminance);
			}
			formLuminance formLuminance = new formLuminance(ledLuminance, this, this.tsmiGroupLuminance.Text, true);
			formLuminance.ShowDialog();
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void tsmiGroupTiming_Click(object sender, EventArgs e)
		{
			this.GroupSendingSingle(LedCmdType.Ctrl_Timing, this.tsmiGroupTiming.Text);
		}

		private void tsmiGroupPowerOff_Click(object sender, EventArgs e)
		{
			this.GroupSendingSingle(LedCmdType.Ctrl_Power_Off, this.tsmiGroupPowerOff.Text);
		}

		private void tsmiGroupPowerOn_Click(object sender, EventArgs e)
		{
			this.GroupSendingSingle(LedCmdType.Ctrl_Power_On, this.tsmiGroupPowerOn.Text);
		}

		private void tsmiGroupTimerSwitch_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			LedTimerSwitch ledTimerSwitch = new LedTimerSwitch();
			if (this.nowPanel != null)
			{
				ledTimerSwitch.Copy(this.nowPanel.TimerSwitch);
			}
			new formStartAndClose(ledTimerSwitch, this, this.tsmiGroupTimerSwitch.Text, true);
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void tsmiGroupSending_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formPanelSelectForGroupSending formPanelSelectForGroupSending = new formPanelSelectForGroupSending(false, this.tsmiGroupSending.Text);
			if (formPanelSelectForGroupSending.ShowDialog(this) == DialogResult.OK)
			{
				if (formPanelSelectForGroupSending.isCloud)
				{
					formCloudGroupSending formCloudGroupSending = new formCloudGroupSending(this);
					formCloudGroupSending.GetPanel();
					formCloudGroupSending.ShowDialog(this);
				}
				else
				{
					formGroupSending formGroupSending = new formGroupSending(this);
					formGroupSending.GetPanel();
					formGroupSending.ShowDialog(this);
				}
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void GroupSendingSingle(LedCmdType cmdType, string operation)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			this.GroupSendingSingle(cmdType, operation, this, null);
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		public void GroupSendingSingle(LedCmdType cmdType, string operation, Form ownerForm, object obj = null)
		{
			formPanelSelectForGroupSending formPanelSelectForGroupSending = new formPanelSelectForGroupSending(true, operation);
            formGroupSendingSingle formGroupSendingSingle = new formGroupSendingSingle(cmdType, operation, obj, this);

            if (formPanelSelectForGroupSending.ShowDialog(ownerForm) == DialogResult.OK)
			{
				if (obj != null)
				{
					IList<Screen_Display_Class> screenSendGroup;
					if (formPanelSelectForGroupSending.isCloud)
					{
						screenSendGroup = formCloudGroupSendingSingle.screenSendGroup;
					}
					else
					{
						screenSendGroup = formGroupSendingSingle.screenSendGroup;
					}
					if (screenSendGroup != null)
					{
						foreach (Screen_Display_Class current in screenSendGroup)
						{
							LedPanel panel_NO = current.Panel_NO;
							if (obj.GetType() == typeof(LedLuminance))
							{
								panel_NO.Luminance.Copy((LedLuminance)obj);
							}
							else if (obj.GetType() == typeof(LedTimerSwitch))
							{
								panel_NO.TimerSwitch.Copy((LedTimerSwitch)obj);
							}
						}
					}
				}
				if (formPanelSelectForGroupSending.isCloud)
				{
					formCloudGroupSendingSingle formCloudGroupSendingSingle = new formCloudGroupSendingSingle(cmdType, operation, obj, this);
					formCloudGroupSendingSingle.GetPanel();
					formCloudGroupSendingSingle.ShowDialog(ownerForm);
					return;
				}
				formGroupSendingSingle.GetPanel();
				formGroupSendingSingle.ShowDialog(ownerForm);
			}
		}

		private void SendAll(IList<LedPanel> pPanelList)
		{
		}

		private void SendAll_ReSend_ToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void pictureBox_ChangeSize_MouseUp(object sender, MouseEventArgs e)
		{
			if (base.Size.Width < 800 || base.Size.Height < 600)
			{
				base.Size = new System.Drawing.Size(800, 600);
			}
		}

		private void gPRS管理ToolStripMenuItem_Click(object sender, EventArgs e)
		{
			formGPRSAdminLogin formGPRSAdminLogin = new formGPRSAdminLogin();
			GprsAdministrator.LoginSuccess = false;
			formGPRSAdminLogin.ShowDialog();
			bool arg_18_0 = GprsAdministrator.LoginSuccess;
		}

		private void gprsSendToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
			this.GPRSSendStart();
		}

		private void panel_Item_Resize(object sender, EventArgs e)
		{
			this.ResetPanelToolStrip();
		}

		private void saveWifiDataToolStripMenuItemToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			string text = formMain.ledsys.SelectedPanel.CardType.ToString();
			if (text.IndexOf("W") < 0 && text.IndexOf("5W") < 0)
			{
				MessageBox.Show(formMain.ML.GetStr("WIFI_NOTNetCOMDevice"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (formMain.ledsys.SelectedPanel.Items.Count == 0)
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_NoItem"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.CheckSubareaOverLapping())
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_ItemSubareaOverlap"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.hasNullItem)
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_HasNullIitem"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.isALlItemClosed)
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_AllItemClosed"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.CheckEmptyMarquee())
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_HasEmptyMarquee"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			this.Cursor = Cursors.Default;
			this.CheckAnimationAndBackground();
			this.label_Waitting_Picture.Text = formMain.ML.GetStr("Prompt_NowIsGeneratingData");
			this.SetWaittingPanelVisable(true);
			this.panel_Waitting.Refresh();
			Thread.Sleep(200);
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				for (int j = 0; j < formMain.ledsys.SelectedPanel.Items[i].Subareas.Count; j++)
				{
					if (formMain.ledsys.SelectedPanel.Items[i].Subareas[j].Type == LedSubareaType.Subtitle)
					{
						LedDText ledDText = (LedDText)formMain.ledsys.SelectedPanel.Items[i].Subareas[j].SelectedContent;
						if (ledDText.DoNeedDrawingFull)
						{
							ledDText.DrawMode = LedDrawMode.Full;
							ledDText.Draw();
							ledDText.DrawMode = LedDrawMode.Part;
						}
					}
					else if (formMain.ledsys.SelectedPanel.Items[i].Subareas[j].Type == LedSubareaType.PictureText)
					{
						LedSubarea ledSubarea = formMain.ledsys.SelectedPanel.Items[i].Subareas[j];
						for (int k = 0; k < ledSubarea.Contents.Count; k++)
						{
							LedPictureText ledPictureText = (LedPictureText)ledSubarea.Contents[k];
							if (ledPictureText.DoNeedDrawingFull || (ledPictureText.LastDrawn != null && ledPictureText.GetSize() != ledPictureText.LastDrawn.Size))
							{
								ledPictureText.DrawMode = LedDrawMode.Full;
								ledPictureText.Draw();
								ledPictureText.DrawMode = LedDrawMode.Part;
							}
						}
					}
				}
			}
			this.SetWaittingPanelVisable(false);
			formWifi formWifi = new formWifi();
			formWifi.ShowDialog();
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void effectEntryType_DropDownClosed(object sender, EventArgs e)
		{
			this.toolTip1.Hide(this);
		}

		private void effectEntryType_DrawItem(object sender, DrawItemEventArgs e)
		{
			try
			{
				if (e.Index > -1 && this.effectEntryType.Items.Count > 0)
				{
					e.DrawBackground();
					e.Graphics.DrawString(this.effectEntryType.Items[e.Index].ToString(), e.Font, System.Drawing.Brushes.Black, e.Bounds);
					if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
					{
						int arg_7C_0 = Cursor.Position.X;
						int arg_8B_0 = base.Location.X;
						int arg_99_0 = Cursor.Position.Y;
						int arg_A8_0 = base.Location.Y;
					}
					e.DrawFocusRectangle();
				}
			}
			catch
			{
			}
		}

		private void effectExitType_DrawItem(object sender, DrawItemEventArgs e)
		{
			try
			{
				if (e.Index > -1 && this.effectExitType.Items.Count > 0)
				{
					e.DrawBackground();
					e.Graphics.DrawString(this.effectExitType.Items[e.Index].ToString(), e.Font, System.Drawing.Brushes.Black, e.Bounds);
					if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
					{
						int arg_7C_0 = Cursor.Position.X;
						int arg_8B_0 = base.Location.X;
						int arg_99_0 = Cursor.Position.Y;
						int arg_A8_0 = base.Location.Y;
					}
					e.DrawFocusRectangle();
				}
			}
			catch
			{
			}
		}

		private void AdjustComboBoxDropDownListWidth(object comboBox)
		{
			System.Drawing.Graphics graphics = null;
			try
			{
				ComboBox comboBox2 = null;
				if (comboBox is ComboBox)
				{
					comboBox2 = (ComboBox)comboBox;
				}
				else
				{
					if (!(comboBox is ToolStripComboBox))
					{
						return;
					}
					comboBox2 = ((ToolStripComboBox)comboBox).ComboBox;
				}
				int num = comboBox2.Width;
				graphics = comboBox2.CreateGraphics();
				System.Drawing.Font font = comboBox2.Font;
				int num2 = (comboBox2.Items.Count > comboBox2.MaxDropDownItems) ? SystemInformation.VerticalScrollBarWidth : 0;
				foreach (object current in comboBox2.Items)
				{
					if (current != null)
					{
						int num3 = (int)graphics.MeasureString(current.ToString().Trim(), font).Width + num2;
						if (num < num3)
						{
							num = num3;
						}
					}
				}
				comboBox2.DropDownWidth = num;
			}
			catch
			{
			}
			finally
			{
				if (graphics != null)
				{
					graphics.Dispose();
				}
			}
		}

		public static int FromColorToIndex(System.Drawing.Color pColor)
		{
			int result = 0;
			System.Drawing.Color[] tricolorList = LedColorConst.TricolorList;
			for (int i = 0; i < tricolorList.Length; i++)
			{
				if (LedGraphics.EqualsColor(pColor, tricolorList[i]))
				{
					result = i;
					break;
				}
			}
			return result;
		}

		public static int FromBackColorToIndex(System.Drawing.Color pColor)
		{
			int result = 0;
			IList<System.Drawing.Color> backColorList = LedColorConst.GetBackColorList(LedColorMode.RGB);
			for (int i = 0; i < backColorList.Count; i++)
			{
				if (LedGraphics.EqualsColor(pColor, backColorList[i]))
				{
					result = i;
					break;
				}
			}
			return result;
		}

		public static System.Drawing.Color FromIndexToColor(int pIndex)
		{
			System.Drawing.Color[] tricolorList = LedColorConst.TricolorList;
			System.Drawing.Color result = LedColorConst.Red;
			if (tricolorList != null && pIndex < tricolorList.Length)
			{
				result = tricolorList[pIndex];
			}
			return result;
		}

		public static System.Drawing.Color FromIndexToBackColor(int pIndex)
		{
			System.Drawing.Color[] tricolorList = LedColorConst.TricolorList;
			System.Drawing.Color result = LedColorConst.Black;
			if (tricolorList != null && pIndex > 0 && pIndex < tricolorList.Length)
			{
				result = tricolorList[pIndex - 1];
			}
			return result;
		}

		private void ledTree_MouseDown(object sender, MouseEventArgs e)
		{
			System.Drawing.Color color = System.Drawing.Color.FromArgb(51, 153, 255);
			System.Drawing.Color groupBox_BackColor = Template.GroupBox_BackColor;
			this.StopPreview();
			this.LedTreeELocation = e.Location;
			TreeNode nodeAt = this.ledTree.GetNodeAt(e.Location);
			if (nodeAt == null)
			{
				return;
			}
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode == nodeAt)
			{
				return;
			}
			int level = nodeAt.Level;
			if (selectedNode != null)
			{
				int level2 = selectedNode.Level;
				if (level2 >= this.levelGroup)
				{
					selectedNode.BackColor = groupBox_BackColor;
					if (level2 >= this.levelPanel)
					{
						TreeNode parent = selectedNode.Parent;
						TreeNode parent2 = nodeAt.Parent;
						if (parent != null && parent2 != parent)
						{
							if (!LedGraphics.EqualsColor(parent.BackColor, groupBox_BackColor))
							{
								parent.BackColor = groupBox_BackColor;
							}
							if (level2 >= this.levelItem)
							{
								TreeNode parent3 = parent.Parent;
								TreeNode treeNode = (parent2 != null) ? parent2.Parent : null;
								if (parent3 != null && treeNode != parent3)
								{
									if (!LedGraphics.EqualsColor(parent3.BackColor, groupBox_BackColor))
									{
										parent3.BackColor = groupBox_BackColor;
									}
									if (level2 == this.levelSubarea)
									{
										TreeNode parent4 = parent3.Parent;
										TreeNode treeNode2 = (treeNode != null) ? treeNode.Parent : null;
										if (parent4 != null && treeNode2 != parent4 && !LedGraphics.EqualsColor(parent4.BackColor, groupBox_BackColor))
										{
											parent4.BackColor = groupBox_BackColor;
										}
									}
								}
							}
						}
					}
				}
				if (level >= this.levelGroup)
				{
					nodeAt.BackColor = color;
					if (level >= this.levelPanel)
					{
						TreeNode parent5 = nodeAt.Parent;
						if (parent5 != null)
						{
							if (!LedGraphics.EqualsColor(parent5.BackColor, color))
							{
								parent5.BackColor = color;
							}
							if (level >= this.levelItem)
							{
								TreeNode parent6 = parent5.Parent;
								if (parent6 != null)
								{
									if (!LedGraphics.EqualsColor(parent6.BackColor, color))
									{
										parent6.BackColor = color;
									}
									if (level == this.levelSubarea)
									{
										TreeNode parent7 = parent6.Parent;
										if (parent7 != null && !LedGraphics.EqualsColor(parent7.BackColor, color))
										{
											parent7.BackColor = color;
										}
									}
								}
							}
						}
					}
				}
			}
			this.ledTree.SelectedNode = nodeAt;
			this.SetToolsButtonEnable(false);
			formMain.LastSelectedContentType = 2;
			if (level == this.levelGroup)
			{
				this.nowSubarea = null;
				this.nowItem = null;
				this.nowPanel = null;
				return;
			}
			if (level == this.levelPanel)
			{
				this.nowSubarea = null;
				this.DisplayPanel(nodeAt, true);
				this.Subarea_DeactiveSubarea();
				this.ShowPanelAttribute();
				return;
			}
			if (level == this.levelItem)
			{
				this.nowSubarea = null;
				LedItem ledItem = (LedItem)nodeAt.Tag;
				TreeNode parent8 = nodeAt.Parent;
				LedPanel ledPanel = null;
				if (parent8 != null && (parent8.Tag.GetType() == typeof(LedPanel) || parent8.Tag.GetType() == typeof(LedPanelCloud)))
				{
					ledPanel = (LedPanel)parent8.Tag;
				}
				if (ledItem != this.nowItem || (ledPanel != null && ledPanel != this.nowPanel))
				{
					this.nowPanel = ledPanel;
					this.DisplayItem(nodeAt);
				}
				else
				{
					this.itemSubareaNumLabel.Text = this.nowItem.Subareas.Count.ToString();
					this.nowBackGround = formMain.ledsys.SelectedPanel.SelectedItem.Background;
				}
				this.Subarea_DeactiveSubarea();
				this.ShowItemAttribute();
				return;
			}
			if (level == this.levelSubarea)
			{
				formMain.LastSelectedContentType = 1;
				LedSubarea ledSubarea = (LedSubarea)nodeAt.Tag;
				if (ledSubarea != this.nowSubarea)
				{
					this.DisplaySubarea(nodeAt);
				}
			}
		}

		private void ledTree_Leave(object sender, EventArgs e)
		{
			if (this.ledTree.SelectedNode != null)
			{
				this.ledTree.SelectedNode.BackColor = System.Drawing.Color.FromArgb(51, 153, 255);
			}
		}

		private void ledTree_KeyDown(object sender, KeyEventArgs e)
		{
			e.Handled = true;
		}

		private void ledTree_DrawNode(object sender, DrawTreeNodeEventArgs e)
		{
			if (e.Node.ImageIndex < 3 || e.Node.ImageIndex > 8)
			{
				formMain.HideCheckBox(this.ledTree, e.Node);
			}
			e.DrawDefault = true;
		}

		private void ledTree_AfterCheck(object sender, TreeViewEventArgs e)
		{
			TreeView treeView = (TreeView)sender;
			if (!treeView.Focused)
			{
				return;
			}
			TreeNode node = e.Node;
			if (node == null)
			{
				return;
			}
			if (node.Tag == null || (node.Tag.GetType().Name != "LedItem" && node.Tag.GetType().Name != "LedSharedItem"))
			{
				return;
			}
			if (node.Tag.GetType().Name == "LedItem")
			{
				LedItem ledItem = (LedItem)node.Tag;
				ledItem.Enabled = node.Checked;
				return;
			}
			LedSharedItem ledSharedItem = (LedSharedItem)node.Tag;
			ledSharedItem.Enabled = node.Checked;
		}

		private void zhToolButton_Save_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (flag)
			{
				this.SaveasProject();
			}
		}

		private void zhToolButton_Open_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (flag)
			{
				this.DeletePanelFromIPCServer();
				this.OpenProject();
				this.AddPanelToIPCServer();
			}
		}

		private void zhToolButton_Delete_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			if (formMain.LastSelectedContentType == 0)
			{
				this.deleteMarqueeToolStripMenuItem_Click(null, null);
				return;
			}
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode == null)
			{
				return;
			}
			int level = selectedNode.Level;
			if (level == this.levelPanel || level == this.levelGroup)
			{
				return;
			}
			if (level == this.levelItem)
			{
				bool flag2 = false;
				if (selectedNode.Tag != null && (selectedNode.Tag.GetType() == typeof(LedItem) || selectedNode.Tag.GetType() == typeof(LedSharedItem)))
				{
					LedItem ledItem = (LedItem)selectedNode.Tag;
					if (ledItem.Shared || ledItem.GetType() == typeof(LedSharedItem))
					{
						flag2 = true;
					}
				}
				if (MessageBox.Show(formMain.ML.GetStr("Prompt_SureDeeleteItem"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OKCancel) == DialogResult.OK)
				{
					if (flag2)
					{
						this.DeleteSharedItem_Click(null, null);
						return;
					}
					this.dropItemContentToolStripMenuItem_Click(null, null);
				}
				return;
			}
			if (formMain.ledsys.SelectedPanel.SelectedItem.Subareas.Count == 0)
			{
				return;
			}
			if (this.nowSubareaHolder != null)
			{
				this.nowSubareaHolder.Delete();
			}
		}

		private void zhToolButton_FindDeviceWifi_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			try
			{
				formConnectToWIFI formConnectToWIFI = new formConnectToWIFI();
				bool flag2 = formConnectToWIFI.FindConnectWifi(this);
				if (flag2)
				{
					this.AddPanelToTree();
					this.DisplayItem(LedDisplayMode.Load);
				}
			}
			catch
			{
				MessageBox.Show(formMain.ML.GetStr("WIFI_AccessError"));
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void zhToolButton_Item_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (flag)
			{
				this.addItemContentToolStripMenuItem_Click(null, null);
			}
		}

		private void zhToolButton_FindDevice_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			Dictionary<string, System.Drawing.Size> dictionary = new Dictionary<string, System.Drawing.Size>();
			for (int i = 0; i < formMain.ledsys.Panels.Count; i++)
			{
				LedPanel ledPanel = formMain.ledsys.Panels[i];
				dictionary.Add(ledPanel.ID, new System.Drawing.Size(ledPanel.Width, ledPanel.Height));
			}
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			Form_find_device form_find_device = new Form_find_device(formMain.IServer, this);
			form_find_device.ShowDialog();
			for (int j = 0; j < formMain.ledsys.Panels.Count; j++)
			{
				LedPanel ledPanel2 = formMain.ledsys.Panels[j];
				foreach (KeyValuePair<string, System.Drawing.Size> current in dictionary)
				{
					if (ledPanel2.ID == current.Key)
					{
						System.Drawing.Size value = current.Value;
						if (value.Width > ledPanel2.Width || value.Height > ledPanel2.Height)
						{
							formMain.ledsys.Panels[j].SizeChangedMode = LedSizeChangedMode.Smaller;
						}
					}
				}
			}
			this.AddPanelToIPCServer();
			this.AddPanelToTree();
			this.DisplayItem(LedDisplayMode.Load);
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void zhToolButton_Play_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (formMain.ledsys.SelectedPanel.Items.Count == 0)
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_NoItem"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.CheckSubareaOverLapping())
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_ItemSubareaOverlap"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			this.label_Waitting_Picture.Text = formMain.ML.GetStr("Prompt_NowIsGeneratingData");
			this.SetWaittingPanelVisable(true);
			this.panel_Waitting.Refresh();
			Thread.Sleep(200);
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				for (int j = 0; j < formMain.ledsys.SelectedPanel.Items[i].Subareas.Count; j++)
				{
					if (formMain.ledsys.SelectedPanel.Items[i].Subareas[j].Type == LedSubareaType.Subtitle)
					{
						LedDText ledDText = (LedDText)formMain.ledsys.SelectedPanel.Items[i].Subareas[j].SelectedContent;
						if (ledDText.DoNeedDrawingFull)
						{
							ledDText.DrawMode = LedDrawMode.Full;
							ledDText.Draw();
							ledDText.DrawMode = LedDrawMode.Part;
						}
					}
					else if (formMain.ledsys.SelectedPanel.Items[i].Subareas[j].Type == LedSubareaType.PictureText)
					{
						LedSubarea ledSubarea = formMain.ledsys.SelectedPanel.Items[i].Subareas[j];
						for (int k = 0; k < ledSubarea.Contents.Count; k++)
						{
							LedPictureText ledPictureText = (LedPictureText)ledSubarea.Contents[k];
							if (ledPictureText.DoNeedDrawingFull || (ledPictureText.LastDrawn != null && ledPictureText.GetSize() != ledPictureText.LastDrawn.Size))
							{
								ledPictureText.DrawMode = LedDrawMode.Full;
								ledPictureText.Draw();
								ledPictureText.DrawMode = LedDrawMode.Part;
							}
						}
					}
				}
			}
			this.SetWaittingPanelVisable(false);
			this.CheckAnimationAndNoBackground();
			formDisplay formDisplay = new formDisplay(formMain.ledsys.SelectedPanel);
			base.Visible = false;
			formDisplay.Show();
			formDisplay.Disposed += new EventHandler(this.fd_Disposed);
		}

		private void zhToolButton_Send_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			this.return_stop = false;
			this.isUpdataCode = false;
			this.isDownloadStringLibrary = false;
			this.Panel_Handle(false);
			if (!this.return_stop)
			{
				if (this.IsPanelCloud(this.nowPanel))
				{
					this.CloudStartSend(this);
				}
				else
				{
					this.StartSend(true, this);
				}
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

        public void SendDatatoolStripButton_Click(object sender, EventArgs e)
        {
            bool flag = true;
            if (e is MouseEventArgs)
            {
                MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
                if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
                {
                    flag = false;
                }
            }
            if (!flag)
            {
                return;
            }
            this.HeartbeatProcessing(false);
            this.isCloudTerminalMonitorEnabled = false;
            if (this.nowPanel == null)
            {
                MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
                this.HeartbeatProcessing(true);
                this.isCloudTerminalMonitorEnabled = true;
                return;
            }
            this.return_stop = false;
            this.isUpdataCode = false;
            this.isDownloadStringLibrary = false;
            this.Panel_Handle(false);
            if (!this.return_stop)
            {
                if (this.IsPanelCloud(this.nowPanel))
                {
                    this.CloudStartSend(this);
                }
                else
                {
                    this.StartSend(true, this);
                }
            }
            this.HeartbeatProcessing(true);
            this.isCloudTerminalMonitorEnabled = true;
        }


        private void zhToolButton_Usb_Click(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			string text = formMain.ledsys.SelectedPanel.CardType.ToString();
			if (text.IndexOf("E") < 0 && text.IndexOf("U") < 0 && text.IndexOf("G") < 0 && text.IndexOf("W") < 0 && text.IndexOf("M") < 0 && text.IndexOf("S") < 0)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_NotUSBDevice"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (formMain.ledsys.SelectedPanel.Items.Count == 0)
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_NoItem"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.CheckSubareaOverLapping())
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_ItemSubareaOverlap"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.hasNullItem)
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_HasNullIitem"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.isALlItemClosed)
			{
				MessageBox.Show(this.overlappingItem + formMain.ML.GetStr("Prompt_AllItemClosed"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			if (this.CheckEmptyMarquee())
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_HasEmptyMarquee"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			this.Cursor = Cursors.Default;
			this.CheckAnimationAndBackground();
			this.label_Waitting_Picture.Text = formMain.ML.GetStr("Prompt_NowIsGeneratingData");
			this.SetWaittingPanelVisable(true);
			this.panel_Waitting.Refresh();
			Thread.Sleep(200);
			for (int i = 0; i < formMain.ledsys.SelectedPanel.Items.Count; i++)
			{
				for (int j = 0; j < formMain.ledsys.SelectedPanel.Items[i].Subareas.Count; j++)
				{
					if (formMain.ledsys.SelectedPanel.Items[i].Subareas[j].Type == LedSubareaType.Subtitle)
					{
						LedDText ledDText = (LedDText)formMain.ledsys.SelectedPanel.Items[i].Subareas[j].SelectedContent;
						if (ledDText.DoNeedDrawingFull)
						{
							ledDText.DrawMode = LedDrawMode.Full;
							ledDText.Draw();
							ledDText.DrawMode = LedDrawMode.Part;
						}
					}
					else if (formMain.ledsys.SelectedPanel.Items[i].Subareas[j].Type == LedSubareaType.PictureText)
					{
						LedSubarea ledSubarea = formMain.ledsys.SelectedPanel.Items[i].Subareas[j];
						for (int k = 0; k < ledSubarea.Contents.Count; k++)
						{
							LedPictureText ledPictureText = (LedPictureText)ledSubarea.Contents[k];
							if (ledPictureText.DoNeedDrawingFull || (ledPictureText.LastDrawn != null && ledPictureText.GetSize() != ledPictureText.LastDrawn.Size))
							{
								ledPictureText.DrawMode = LedDrawMode.Full;
								ledPictureText.Draw();
								ledPictureText.DrawMode = LedDrawMode.Part;
							}
						}
					}
				}
			}
			this.SetWaittingPanelVisable(false);
			formUSBWrite formUSBWrite = new formUSBWrite(formMain.ledsys.SelectedPanel);
			formUSBWrite.ShowDialog();
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void AddContent(object sender, EventArgs e)
		{
			bool flag = true;
			if (e is MouseEventArgs)
			{
				MouseEventArgs mouseEventArgs = (MouseEventArgs)e;
				if (mouseEventArgs.Button != MouseButtons.Left || mouseEventArgs.Clicks != 1)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			this.StopPreview();
			if (this.ledTree.SelectedNode == null)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_NoNodeSelected"));
				return;
			}
			if (this.ledTree.SelectedNode.Level == this.levelGroup)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_PleaseSelectItem"));
				return;
			}
			if (this.nowItem != null && this.nowItem.GetType() == typeof(LedSharedItem))
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_PleaseGoToItemShared"));
				return;
			}
			string text;
			try
			{
				if (sender.GetType() == typeof(ToolStripDropDownItem) || sender.GetType() == typeof(ToolStripMenuItem))
				{
					ToolStripDropDownItem toolStripDropDownItem = (ToolStripDropDownItem)sender;
					text = (string)toolStripDropDownItem.Tag;
				}
				else
				{
					Control control = (Control)sender;
					text = (string)control.Tag;
				}
			}
			catch
			{
				Control control2 = (Control)sender;
				text = (string)control2.Tag;
			}
			text = text.Replace("MouseIn", "");
			if (formMain.ledsys.SelectedPanel != null && !formMain.ledsys.SelectedPanel.IsLSeries())
			{
				if (text == "Lunar")
				{
					MessageBox.Show(formMain.ML.GetStr("Prompt_NotSupportLunarCalendar_Silent"));
					return;
				}
				if (text == "Weather")
				{
					MessageBox.Show(formMain.ML.GetStr("Prompt_NotSupportWeather_Silent"));
					return;
				}
				if (text == "String")
				{
					MessageBox.Show(formMain.ML.GetStr("Prompt_NotSupportString_Silent"));
					return;
				}
			}
			if (formMain.ledsys.SelectedPanel.Items == null || formMain.ledsys.SelectedPanel.Items.Count == 0)
			{
				this.addItemContentToolStripMenuItem_Click(null, null);
				this.DisplayItem(LedDisplayMode.Load);
			}
			if (formMain.ledsys.SelectedPanel.SelectedItem == null)
			{
				if (formMain.ledsys.SelectedPanel.Items == null || formMain.ledsys.SelectedPanel.Items.Count == 0)
				{
					this.addItemToolStripMenuItem_Click(null, null);
				}
				else
				{
					formMain.ledsys.SelectedPanel.SelectedItem = formMain.ledsys.SelectedPanel.Items[0];
				}
				this.DisplayItem(LedDisplayMode.Load);
			}
			if ((formMain.ledsys.SelectedPanel.CardType == LedCardType.ZH_Un || formMain.ledsys.SelectedPanel.CardType == LedCardType.ZH_UnL) && formMain.ledsys.SelectedPanel.SelectedItem.Subareas.Count >= 4)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_SubareaOverNumUn"));
				return;
			}
			if (formMain.ledsys.SelectedPanel.SelectedItem.Subareas.Count >= 16)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_SubareaOverNum"));
				return;
			}
			string str = formMain.ML.GetStr(text);
			LedContent ledContent = null;
			string key;
			switch (key = text)
			{
			case "Subtitle":
				ledContent = new LedDText
				{
					EDText = 
					{
						Text = formMain.ML.GetStr("formMain_Panel_Time_Text")
					}
				};
				break;
			case "Animation":
				ledContent = new LedAnimation();
				break;
			case "Time":
				ledContent = new LedTime();
				break;
			case "Dial":
				ledContent = new LedDial
				{
					DialBackground = 
					{
						FixedText = 
						{
							Text = formMain.ML.GetStr("Beijing")
						}
					}
				};
				break;
			case "Counter":
				ledContent = new LedCounter();
				break;
			case "Lunar":
				ledContent = new LedLunar();
				break;
			case "Temperature":
				ledContent = new LedTemperature();
				break;
			case "Weather":
				ledContent = new LedWeather();
				break;
			case "String":
			{
				LedString ledString = new LedString();
				ledString.StringBackground.Text = formMain.ML.GetStr("formMain_Panel_String_Text");
				ledString.SetStringLibrary(formMain.ledsys.SelectedPanel.StringLibrary);
				ledContent = ledString;
				break;
			}
			}
			LedSubarea ledSubarea = null;
			System.Drawing.Size defaultSizeByType = this.GetDefaultSizeByType(text);
			if (ledContent != null)
			{
				ledContent.AddEdge(formMain.NewEdgeData());
				this.nowEffectSetting = ledContent.EffectsSetting;
				ledSubarea = new LedSubarea(0, 0, defaultSizeByType.Width, defaultSizeByType.Height, ledContent);
			}
			else if (text == "PictureText")
			{
				ledSubarea = new LedSubarea();
				ledSubarea.Size = defaultSizeByType;
			}
			if (ledSubarea != null)
			{
				ledSubarea.Location = this.GetRightButtonLocation();
				ledSubarea.Name = str;
				ledSubarea.Type = (LedSubareaType)Enum.Parse(typeof(LedSubareaType), text);
				formMain.ledsys.SelectedPanel.SelectedItem.AddSubarea(ledSubarea);
				this.AddSubareaToTree(ledSubarea);
				LedSubareaHolder ledSubareaHolder = new LedSubareaHolder(ledSubarea);
				this.subareaHolderList.Add(ledSubareaHolder);
				this.screenPanelMain.Controls.Add(ledSubareaHolder);
				ledSubareaHolder.Enter += new EventHandler(this.newHolder_Enter);
				ledSubareaHolder.HolderEvent += new LedGlobal.LedContentEvent(this.newHolder_HolderEvent);
				ledSubareaHolder.BringToFront();
				ledSubareaHolder.Activate();
				ledSubareaHolder.Show();
				this.nowSubareaHolder = ledSubareaHolder;
				this.nowSubarea = ledSubarea;
				this.DisplaySubarea();
				this.RedrawSubarea();
				this.SetToolsButtonEnable(true);
			}
		}

		private void tsmiLocalServerSetting_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formCheckCode formCheckCode = new formCheckCode();
			if (formCheckCode.Check("888", false))
			{
				formLocalServerSetting formLocalServerSetting = new formLocalServerSetting();
				formLocalServerSetting.ShowDialog();
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void ethernetUpdateToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (formMain.ledsys.SelectedPanel == null)
			{
				return;
			}
			if (formMain.ledsys.SelectedPanel.PortType != LedPortType.Ethernet || this.IsPanelCloud(formMain.ledsys.SelectedPanel))
			{
				MessageBox.Show(formMain.ledsys.SelectedPanel.TextName + ": " + formMain.ML.GetStr("NETCARD_message_Not_network"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.OK);
				return;
			}
			if (formMain.ledsys.SelectedPanel.EthernetCommunicaitonMode == LedEthernetCommunicationMode.Directly && MessageBox.Show(formMain.ML.GetStr("NETCARD_message_Prompt_Update_SingleCard"), formMain.ML.GetStr("NETCARD_message_prompt"), MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) != DialogResult.OK)
			{
				return;
			}
			this.isUpdataCode = true;
			this.isDownloadStringLibrary = false;
			this.StartSend(true, this);
		}

		private void timeSequenceToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (!formMain.ledsys.SelectedPanel.IsLSeries())
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_NotSupportTimeSequence"));
			}
			else
			{
				formCheckCode formCheckCode = new formCheckCode();
				if (formCheckCode.Check("168888", false))
				{
					formTimeSequence formTimeSequence = new formTimeSequence(formMain.ledsys.SelectedPanel.TimeSequence, this);
					formTimeSequence.ShowDialog();
				}
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void TextShowParam()
		{
			this.textEditor1.Edit(this.nowText);
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxContentBackground.BringToFront();
				this.colorfulBackgroundContent.LoadBackground(this.nowText);
			}
			else
			{
				this.contentBackgroundSettingGroupBox.BringToFront();
			}
			this.nowEffectSetting = this.nowText.EffectsSetting;
			this.MarqueeOffsetYValue.Text = this.nowText.EDText.VerticalOffset.ToString("D3");
		}

		private void LunarShowParam()
		{
			this.lunarEditor1.Edit(this.nowLunar);
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxContentBackground.BringToFront();
				return;
			}
			this.contentBackgroundSettingGroupBox.BringToFront();
		}

		private void marqueeConRichText_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			string caption = "001";
			try
			{
				string text = LedCommon.GetDateTimeNow() + ".rtf";
				caption = "001";
				LedMText ledMText = new LedMText(text);
				if (formMain.IsforeignTradeMode)
				{
					ledMText.EMText.Text = formMain.ML.GetStr("formMain_Panel_Time_Text");
				}
				ledMText.AddEdge(formMain.NewEdgeData());
				caption = "002";
				formRichtext formRichtext = new formRichtext(this.nowSubarea.Width, false);
				caption = "003";
				formRichtext.ReDraw += new LedGlobal.LedContentEvent(this.fg_ReDraw);
				caption = "004";
				RichTextBox richTextBox = new RichTextBox();
				caption = "005";
				richTextBox.AppendText(formMain.ML.GetStr("formMain_Panel_Time_Text"));
				richTextBox.SelectAll();
				richTextBox.SelectionColor = System.Drawing.Color.Red;
				richTextBox.SelectionBackColor = System.Drawing.Color.Black;
				richTextBox.SaveFile(formMain.ledsys.SelectedPanel.GetSaveDirectory() + text);
				caption = "006";
				this.nowMarquee.AddContent(ledMText);
				caption = "007";
				this.MarqueeListContentList();
				caption = "008";
				this.marqueeContentListBox.SelectedIndex = this.nowMarquee.SelectedIndex;
				caption = "009";
				this.MarqueeChangeContent(this.nowMarquee.SelectedIndex);
				caption = "010";
				caption = "011";
				formRichtext.Edit(formMain.ledsys.SelectedPanel.GetSaveDirectory() + text, ledMText);
				caption = "012";
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message, caption, MessageBoxButtons.OK);
			}
			this.HeartbeatProcessing(true);
		}

		private void marqueeConText_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			LedDText ledDText = new LedDText();
			ledDText.EDText.Text = formMain.ML.GetStr("formMain_Panel_Time_Text");
			ledDText.AddEdge(formMain.NewEdgeData());
			this.nowMarquee.AddContent(ledDText);
			this.MarqueeListContentList();
			int selectedIndex = this.nowMarquee.SelectedIndex;
			this.marqueeContentListBox.SelectedIndex = selectedIndex;
			this.MarqueeEditContent(selectedIndex, true);
			this.HeartbeatProcessing(true);
		}

		private void marqueeConFlash_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			LedAnimation ledAnimation = new LedAnimation();
			ledAnimation.AddEdge(formMain.NewEdgeData());
			this.nowMarquee.AddContent(ledAnimation);
			this.MarqueeListContentList();
			int selectedIndex = this.nowMarquee.SelectedIndex;
			this.marqueeContentListBox.SelectedIndex = selectedIndex;
			this.MarqueeEditContent(selectedIndex, true);
			this.HeartbeatProcessing(true);
		}

		private void marqueeConGrid_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			string text = LedCommon.GetDateTimeNow() + ".zhl";
			FileStream fileStream = new FileStream(formMain.ledsys.SelectedPanel.GetSaveDirectory() + text, FileMode.Create);
			fileStream.Write(Resources.zhGridModel, 0, Resources.zhGridModel.Length);
			fileStream.Close();
			LedTable ledTable = new LedTable(text);
			ledTable.AddEdge(formMain.NewEdgeData());
			this.nowMarquee.AddContent(ledTable);
			this.MarqueeListContentList();
			int selectedIndex = this.nowMarquee.SelectedIndex;
			this.marqueeContentListBox.SelectedIndex = selectedIndex;
			this.MarqueeEditContent(selectedIndex, true);
			this.HeartbeatProcessing(true);
		}

		private void marqueeConGif_Click(object sender, EventArgs e)
		{
			try
			{
				this.openFileDialog1.Filter = "Gif files(*.gif)|*.gif";
				try
				{
					if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
					{
						return;
					}
				}
				catch
				{
					this.openFileDialog1.InitialDirectory = formMain.DesktopPath;
					if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
					{
						return;
					}
				}
				LedGIF ledGIF = new LedGIF(this.openFileDialog1.FileName, formMain.ledsys.SelectedPanel.GetSaveDirectory());
				ledGIF.AddEdge(formMain.NewEdgeData());
				this.nowMarquee.AddContent(ledGIF);
				this.MarqueeListContentList();
				int selectedIndex = this.nowMarquee.SelectedIndex;
				this.marqueeContentListBox.SelectedIndex = selectedIndex;
				this.MarqueeChangeContent(selectedIndex);
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
		}

		private void marqueeConPicture_Click(object sender, EventArgs e)
		{
			try
			{
				this.openFileDialog1.Filter = "Image files(*.jpg *.bmp *.png)|*.jpg;*.bmp;*.png";
				try
				{
					if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
					{
						return;
					}
				}
				catch
				{
					this.openFileDialog1.InitialDirectory = formMain.DesktopPath;
					if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
					{
						return;
					}
				}
				LedPicture ledPicture = new LedPicture(this.openFileDialog1.FileName, formMain.ledsys.SelectedPanel.GetSaveDirectory());
				ledPicture.AddEdge(formMain.NewEdgeData());
				this.nowMarquee.AddContent(ledPicture);
				this.MarqueeListContentList();
				int selectedIndex = this.nowMarquee.SelectedIndex;
				this.marqueeContentListBox.SelectedIndex = selectedIndex;
				this.MarqueeChangeContent(selectedIndex);
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
		}

		private void marqueeConWord_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.openFileDialog1.Filter = "Word 97-2003 files(*.doc *.docx)|*.doc;*.docx";
			try
			{
				if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
				{
					return;
				}
			}
			catch
			{
				this.openFileDialog1.InitialDirectory = formMain.DesktopPath;
				if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
				{
					return;
				}
			}
			string text = LedCommon.GetDateTimeNow() + ".rtf";
			LedMText ledMText = new LedMText(text);
			ledMText.AddEdge(formMain.NewEdgeData());
			formRichtext formRichtext = new formRichtext(this.nowSubarea.Width, false);
			formRichtext.ReDraw += new LedGlobal.LedContentEvent(this.fg_ReDraw);
			RichTextBox richTextBox = new RichTextBox();
			richTextBox.Text = formRichtext.Doc2Text(this.openFileDialog1.FileName);
			richTextBox.SelectAll();
			richTextBox.ForeColor = LedColorConst.Red;
			richTextBox.SaveFile(formMain.ledsys.SelectedPanel.GetSaveDirectory() + text);
			this.nowMarquee.AddContent(ledMText);
			this.MarqueeListContentList();
			int selectedIndex = this.nowMarquee.SelectedIndex;
			this.marqueeContentListBox.SelectedIndex = selectedIndex;
			this.MarqueeChangeContent(selectedIndex);
			richTextBox.Dispose();
			formRichtext.Edit(formMain.ledsys.SelectedPanel.GetSaveDirectory() + text, ledMText);
			this.HeartbeatProcessing(true);
		}

		private void marqueeConExcel_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			if (this.ImportExcelNew())
			{
				this.MarqueeListContentList();
				int selectedIndex = this.nowMarquee.SelectedIndex;
				this.marqueeContentListBox.SelectedIndex = selectedIndex;
				this.MarqueeEditContent(selectedIndex, true);
			}
			this.HeartbeatProcessing(true);
		}

		private bool ImportExcelNew()
		{
			bool flag = false;
			try
			{
				this.openFileDialog1.Filter = "Excel 97-2007 files|*.xls;*.xlsx";
				try
				{
					if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
					{
						bool result = flag;
						return result;
					}
				}
				catch
				{
					this.openFileDialog1.InitialDirectory = formMain.DesktopPath;
					if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
					{
						bool result = flag;
						return result;
					}
				}
				string fileName = this.openFileDialog1.FileName;
				string extension = Path.GetExtension(fileName);
				if (extension.ToLower() != ".xls" && extension.ToLower() != ".xlsx")
				{
					MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Correct_Excel_File"));
					bool result = flag;
					return result;
				}
				formGrid.ImportFileName = fileName;
				ExcelTool excelTool = new ExcelTool(fileName);
				List<string> sheetNameList = excelTool.GetSheetNameList();
				if (sheetNameList.Count == 0)
				{
					bool result = flag;
					return result;
				}
				formSelectIndex formSelectIndex = new formSelectIndex(formMain.ML.GetStr("Display_PleaseSelect"), formMain.ML.GetStr("Prompt_PleaseChooseTheSheetyouwantimport"), sheetNameList);
				int index = formSelectIndex.GetIndex();
				if (index == -1)
				{
					bool result = flag;
					return result;
				}
				formGrid.ImportSheetIndex = index;
				formGrid.NeedImport = true;
				string text = LedCommon.GetDateTimeNow() + ".zhl";
				FileStream fileStream = new FileStream(formMain.ledsys.SelectedPanel.GetSaveDirectory() + text, FileMode.Create);
				fileStream.Write(Resources.zhGridModel, 0, Resources.zhGridModel.Length);
				fileStream.Close();
				LedTable ledTable = new LedTable(text);
				ledTable.AddEdge(formMain.NewEdgeData());
				this.nowMarquee.AddContent(ledTable);
				flag = true;
			}
			catch (Exception ex)
			{
				MessageBox.Show(this, ex.Message);
				flag = false;
			}
			return flag;
		}

		private void marqueeConentUp_Click(object sender, EventArgs e)
		{
			try
			{
				if (this.nowMarquee.Contents.Count >= 2)
				{
					if (this.marqueeContentListBox.SelectedIndex != -1 && this.marqueeContentListBox.SelectedIndex != 0)
					{
						int selectedIndex = this.marqueeContentListBox.SelectedIndex;
						this.nowMarquee.Contents = formMain.SortIList(this.nowMarquee.Contents, selectedIndex, true);
						this.MarqueeListContentList();
						this.marqueeContentListBox.SelectedIndex = (this.nowMarquee.SelectedIndex = selectedIndex - 1);
					}
				}
			}
			catch
			{
			}
		}

		private void marqueeConentDown_Click(object sender, EventArgs e)
		{
			try
			{
				if (this.nowMarquee.Contents.Count >= 2)
				{
					if (this.marqueeContentListBox.SelectedIndex != -1)
					{
						int selectedIndex = this.marqueeContentListBox.SelectedIndex;
						if (selectedIndex != this.nowMarquee.Contents.Count - 1)
						{
							this.nowMarquee.Contents = formMain.SortIList(this.nowMarquee.Contents, selectedIndex, false);
							this.MarqueeListContentList();
							this.marqueeContentListBox.SelectedIndex = (this.nowMarquee.SelectedIndex = selectedIndex + 1);
						}
					}
				}
			}
			catch
			{
			}
		}

		private void marqueDeleteButton_Click(object sender, EventArgs e)
		{
			this.deleteMarqueeToolStripMenuItem_Click(null, null);
			if (this.nowMarquee.Contents.Count == 0)
			{
				if (this.nowPanel.IsMSeries())
				{
					this.zhGroupBoxContentBackground.Enabled = false;
				}
				else
				{
					this.contentBackgroundSettingGroupBox.Enabled = false;
				}
				this.subareaEdgeSetting.Enabled = false;
				this.subareaEffectSetting.Enabled = false;
				this.marqueDeleteButton.Enabled = false;
				this.marqueeEdit.Enabled = false;
				this.marqueeConentUp.Enabled = false;
				this.marqueeConentDown.Enabled = false;
				this.animationEffect1.Enabled = false;
			}
		}

		private void deleteMarqueeToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ListBox listBox = this.marqueeContentListBox;
			if (listBox.SelectedIndex == -1)
			{
				return;
			}
			listBox.Items.RemoveAt(listBox.SelectedIndex);
			this.nowMarquee.RemoveContent();
			this.MarqueeListContentList();
			if (listBox.Items.Count > 0)
			{
				int selectedIndex = this.nowMarquee.SelectedIndex;
				this.MarqueeChangeContent(selectedIndex);
				listBox.SelectedIndex = selectedIndex;
				return;
			}
			this.AnimationEffectSettingzhGroupBox.SendToBack();
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxContentBackground.Enabled = false;
			}
			else
			{
				this.contentBackgroundSettingGroupBox.Enabled = false;
			}
			this.subareaEdgeSetting.Enabled = false;
			this.subareaEffectSetting.Enabled = false;
			this.marqueDeleteButton.Enabled = false;
			this.marqueeEdit.Enabled = false;
			this.marqueeConentUp.Enabled = false;
			this.marqueeConentDown.Enabled = false;
			this.RedrawSubarea();
		}

		private void marqueeReverseToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (this.nowMarqueeContent.PictureTextType == LedPictureTextType.Picture)
			{
				LedPicture ledPicture = (LedPicture)this.nowMarqueeContent;
				ledPicture.Inverted = !ledPicture.Inverted;
			}
			this.RedrawSubarea();
		}

		private void marqueeContentListBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ListBox listBox = (ListBox)sender;
			if (!listBox.Focused)
			{
				return;
			}
			if (listBox.SelectedIndex < 0)
			{
				return;
			}
			if (listBox.SelectedIndex != this.nowMarquee.SelectedIndex)
			{
				this.MarqueeChangeContent(listBox.SelectedIndex);
			}
			formMain.LastSelectedContentType = 0;
		}

		private void marqueeContentListBox_DoubleClick(object sender, EventArgs e)
		{
			ListBox listBox = (ListBox)sender;
			int selectedIndex = listBox.SelectedIndex;
			if (selectedIndex != -1)
			{
				this.HeartbeatProcessing(false);
				if (selectedIndex != this.nowMarquee.SelectedIndex)
				{
					this.MarqueeEditContent(selectedIndex, true);
				}
				else
				{
					this.MarqueeEditContent(selectedIndex, false);
				}
				this.HeartbeatProcessing(true);
			}
		}

		private void marqueeTextEditor_UpdateEvent(LedContentEventType type, object sender)
		{
			this.marqueeTextChanged = true;
		}

		private void marqueeTextEditor_VisibleChanged(object sender, EventArgs e)
		{
			if (!this.marqueeTextEditor.Visible)
			{
				this.marqueeTimerRefresh.Stop();
			}
		}

		private void marqueeTimerRefresh_Tick(object sender, EventArgs e)
		{
			if (this.marqueeTextChanged)
			{
				this.marqueeTextChanged = false;
				this.RedrawSubarea();
			}
		}

		private void MarqueeOffsetYValue_DoubleClick(object sender, EventArgs e)
		{
		}

		private void fg_ReDraw(LedContentEventType type, object sender)
		{
			if (type == LedContentEventType.DataSourceEnabled)
			{
				bool flag = false;
				if (this.threadList.Count > 0)
				{
					foreach (Thread current in this.threadList)
					{
						if (current.Name == "SendDataTick")
						{
							flag = true;
							break;
						}
					}
				}
				if (!flag)
				{
					new Thread(new ThreadStart(this.SendDataTick))
					{
						IsBackground = true
					}.Start();
					return;
				}
			}
			else
			{
				this.nowMarqueeContent.Elements[0].PageNumber = 0;
				this.RedrawSubarea();
			}
		}

		private void MarqueeListContentList()
		{
			this.marqueeContentListBox.Items.Clear();
			int num = 1;
			using (IEnumerator<LedContent> enumerator = this.nowMarquee.Contents.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					LedPictureText ledPictureText = (LedPictureText)enumerator.Current;
					if (ledPictureText.GetType() == typeof(LedPText))
					{
						this.marqueeContentListBox.Items.Add(num.ToString() + "." + formMain.ML.GetStr("Mar_PublicText"));
					}
					else
					{
						this.marqueeContentListBox.Items.Add(num.ToString() + "." + formMain.ML.GetStr(ledPictureText.Name));
					}
					num++;
				}
			}
			if (this.nowMarquee.Contents.Count > 0)
			{
				if (this.nowPanel.IsMSeries())
				{
					this.zhGroupBoxContentBackground.Enabled = true;
				}
				else
				{
					this.contentBackgroundSettingGroupBox.Enabled = true;
				}
				this.subareaEdgeSetting.Enabled = true;
				this.subareaEffectSetting.Enabled = true;
				this.marqueDeleteButton.Enabled = true;
				this.marqueeEdit.Enabled = true;
				this.marqueeConentUp.Enabled = true;
				this.marqueeConentDown.Enabled = true;
			}
		}

		private void MarqueeChangeContent(int pIndex)
		{
			if (pIndex != this.nowMarquee.SelectedIndex)
			{
				this.nowMarquee.SelectContent(pIndex);
			}
			this.nowMarqueeContent = (LedPictureText)this.nowMarquee.SelectedContent;
			this.nowEffectSetting = this.nowMarqueeContent.EffectsSetting;
			if (this.nowMarqueeContent.PictureTextType == LedPictureTextType.GIF)
			{
				this.SetEffectDisable();
				this.EffectSettingShowParam_GIF();
			}
			else
			{
				this.SetEffectEnable();
				this.EffectSettingShowParam();
			}
			this.nowSubareaEdgeData = this.nowMarquee.SelectedContent.Edge;
			this.EdgeShowSubareaParam();
			this.nowSubareaHolder.Redraw();
			this.nowBackGround = this.nowMarqueeContent.Background;
			this.ContentLoadBackgroundParam();
			if (this.nowMarqueeContent.PictureTextType == LedPictureTextType.Animation)
			{
				this.AnimationEffectSettingzhGroupBox.BringToFront();
				this.AnimationEffectSettingzhGroupBox.Visible = true;
				this.animationEffect1.Enabled = true;
				this.animationEffect1.Edit((LedAnimation)this.nowMarqueeContent);
			}
			else
			{
				if (this.nowPanel.IsMSeries())
				{
					this.zhGroupBoxContentBackground.BringToFront();
					this.colorfulBackgroundContent.LoadBackground(this.nowMarqueeContent);
				}
				else
				{
					this.contentBackgroundSettingGroupBox.BringToFront();
				}
				this.subareaEffectSetting.BringToFront();
			}
			this.SetPanelToolStrip();
		}

		private void MarqueeEditContent(int pIndex, bool neeChangeContent = true)
		{
			if (neeChangeContent)
			{
				this.MarqueeChangeContent(pIndex);
			}
			LedPictureText ledPictureText = (LedPictureText)this.nowMarquee.Contents[pIndex];
			if (this.nowPanel.IsMSeries())
			{
				this.zhGroupBoxContentBackground.BringToFront();
			}
			else
			{
				this.contentBackgroundSettingGroupBox.BringToFront();
			}
			this.subareaEffectSetting.BringToFront();
			switch (ledPictureText.PictureTextType)
			{
			case LedPictureTextType.Text:
				this.marqueeTimerRefresh.Start();
				this.marqueeTextEditor.Edit((LedDText)ledPictureText);
				return;
			case LedPictureTextType.MultilineText:
			{
				formRichtext formRichtext = new formRichtext(ledPictureText.GetSize().Width, false);
				formRichtext.ReDraw += new LedGlobal.LedContentEvent(this.fg_ReDraw);
				formRichtext.Edit(formMain.ledsys.SelectedPanel.GetSaveDirectory() + ledPictureText.FileName, (LedMText)ledPictureText);
				return;
			}
			case LedPictureTextType.Animation:
			{
				LedAnimation ledAnimation = (LedAnimation)ledPictureText;
				formAnimation formAnimation = new formAnimation();
				this.AnimationEffectSettingzhGroupBox.BringToFront();
				this.AnimationEffectSettingzhGroupBox.Visible = true;
				int height = 400;
				int width = 800;
				formAnimation.Size = new System.Drawing.Size(width, height);
				formAnimation.Edit(ledAnimation.GetSize(), ledAnimation);
				this.animationEffect1.Edit(ledAnimation);
				this.nowSubareaHolder.Redraw();
				break;
			}
			case LedPictureTextType.Table:
			{
				formGrid formGrid = new formGrid(ledPictureText.GetSize().Width, 0);
				formGrid.FormMain = this;
				if (File.Exists(formMain.ledsys.SelectedPanel.GetSaveDirectory() + ledPictureText.FileName))
				{
					formGrid.Edit(formMain.ledsys.SelectedPanel.GetSaveDirectory() + ledPictureText.FileName);
				}
				else
				{
					formGrid.NewGrid(formMain.ledsys.SelectedPanel.GetSaveDirectory() + ledPictureText.FileName);
				}
				formGrid.ShowDialog();
				return;
			}
			case LedPictureTextType.Picture:
			case LedPictureTextType.GIF:
				break;
			case LedPictureTextType.PublicText:
			{
				formRichtext formRichtext2 = new formRichtext(ledPictureText.GetSize().Width, true);
				formRichtext2.ReDraw += new LedGlobal.LedContentEvent(this.fg_ReDraw);
				formRichtext2.Edit(formMain.ledsys.SelectedPanel.GetSaveDirectory() + ledPictureText.FileName, (LedPText)ledPictureText);
				return;
			}
			default:
				return;
			}
		}

		public bool CheckEmptyMarquee()
		{
			for (int i = 0; i < this.nowPanel.Items.Count; i++)
			{
				foreach (LedSubarea current in this.nowPanel.Items[i].Subareas)
				{
					if (current.Type == LedSubareaType.PictureText && current.Contents.Count == 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		private void DialShowParam()
		{
			try
			{
				this.isLoadingParm = true;
				this.dialHandColorHour.Items.Clear();
				this.dialHandColorMinute.Items.Clear();
				this.dialHandColorSecond.Items.Clear();
				this.dialHandColorScale369.Items.Clear();
				this.dialHandColorScaleColorHour.Items.Clear();
				this.dialHandColorScaleMinute.Items.Clear();
				if (this.nowPanel != null)
				{
					IList<System.Drawing.Color> colorList = LedColorConst.GetColorList(this.nowPanel.ColorMode);
					foreach (System.Drawing.Color current in colorList)
					{
						this.dialHandColorHour.Items.Add(current);
						this.dialHandColorMinute.Items.Add(current);
						this.dialHandColorSecond.Items.Add(current);
						this.dialHandColorScale369.Items.Add(current);
						this.dialHandColorScaleColorHour.Items.Add(current);
						this.dialHandColorScaleMinute.Items.Add(current);
					}
				}
				if (this.nowDial != null)
				{
					this.dialComboBoxScaleShape.SelectedIndex = (int)this.nowDial.DialBackground.DialScaleStyle;
					this.dialComboBoxHandStyle.SelectedIndex = (int)this.nowDial.DialHandStyle;
					this.dialNumberHourHandWidthPlus.Value = this.nowDial.DialHourHand.WidthDelta;
					this.dialNumberMinuteHandWidthPlus.Value = this.nowDial.DialMinuteHand.WidthDelta;
					this.dialNumberSecondHandWidthPlus.Value = this.nowDial.DialSecondHand.WidthDelta;
					this.dialNumberHourHandPlus.Value = this.nowDial.DialHourHand.LengthDelta;
					this.dialNumberMinuteHandPlus.Value = this.nowDial.DialMinuteHand.LengthDelta;
					this.dialNumberSecondHandPlus.Value = this.nowDial.DialSecondHand.LengthDelta;
					this.dialNumberScaleHourPlus.Value = this.nowDial.DialBackground.HourScaleDelta;
					this.dialNumnberScaleMinutePlus.Value = this.nowDial.DialBackground.MinuteScaleDelta;
					this.dialNumberScaleCrossPlus.Value = this.nowDial.DialBackground.TSNTScaleDelta;
					this.dialTimeJetType.SelectedIndex = (int)this.nowDial.TimeDifference;
					DateTime value = new DateTime(2000, 1, 1, this.nowDial.TimeDifferenceHour, this.nowDial.TimeDifferenceMinute, this.nowDial.TimeDifferenceSecond);
					this.dialTimeJetPicker.Value = value;
					if (this.dialHandColorHour.Items.Count > 0)
					{
						int num = formMain.FromColorToIndex(this.nowDial.DialHourHand.ForeColor);
						int count = this.dialHandColorHour.Items.Count;
						if (num > count - 1)
						{
							num = count - 1;
						}
						this.dialHandColorHour.SelectedIndex = num;
					}
					if (this.dialHandColorMinute.Items.Count > 0)
					{
						int num2 = formMain.FromColorToIndex(this.nowDial.DialMinuteHand.ForeColor);
						int count2 = this.dialHandColorMinute.Items.Count;
						if (num2 > count2 - 1)
						{
							num2 = count2 - 1;
						}
						this.dialHandColorMinute.SelectedIndex = num2;
					}
					if (this.dialHandColorSecond.Items.Count > 0)
					{
						int num3 = formMain.FromColorToIndex(this.nowDial.DialSecondHand.ForeColor);
						int count3 = this.dialHandColorSecond.Items.Count;
						if (num3 > count3 - 1)
						{
							num3 = count3 - 1;
						}
						this.dialHandColorSecond.SelectedIndex = num3;
					}
					if (this.dialHandColorScale369.Items.Count > 0)
					{
						int num4 = formMain.FromColorToIndex(this.nowDial.DialBackground.TSNTScaleColor);
						int count4 = this.dialHandColorScale369.Items.Count;
						if (num4 > count4 - 1)
						{
							num4 = count4 - 1;
						}
						this.dialHandColorScale369.SelectedIndex = num4;
					}
					if (this.dialHandColorScaleColorHour.Items.Count > 0)
					{
						int num5 = formMain.FromColorToIndex(this.nowDial.DialBackground.HourScaleColor);
						int count5 = this.dialHandColorScaleColorHour.Items.Count;
						if (num5 > count5 - 1)
						{
							num5 = count5 - 1;
						}
						this.dialHandColorScaleColorHour.SelectedIndex = num5;
					}
					if (this.dialHandColorScaleMinute.Items.Count > 0)
					{
						int num6 = formMain.FromColorToIndex(this.nowDial.DialBackground.MinuteScaleColor);
						int count6 = this.dialHandColorScaleMinute.Items.Count;
						if (num6 > count6 - 1)
						{
							num6 = count6 - 1;
						}
						this.dialHandColorScaleMinute.SelectedIndex = num6;
					}
					this.dialHandColorHour.Enabled = formMain.GetColorComboBoxEnable(true);
					this.dialHandColorMinute.Enabled = formMain.GetColorComboBoxEnable(true);
					this.dialHandColorSecond.Enabled = formMain.GetColorComboBoxEnable(true);
					this.dialHandColorScale369.Enabled = formMain.GetColorComboBoxEnable(true);
					this.dialHandColorScaleColorHour.Enabled = formMain.GetColorComboBoxEnable(true);
					this.dialHandColorScaleMinute.Enabled = formMain.GetColorComboBoxEnable(true);
					this.dialAreaTextCheckBox.Checked = this.nowDial.DialBackground.FixedTextEnabled;
					this.dialAreaTextTextBox.Enabled = this.nowDial.DialBackground.FixedTextEnabled;
					this.dialAreaTextTextBox.Text = this.nowDial.DialBackground.FixedText.Text;
					this.dialConnerTextCheckBox.Checked = this.nowDial.DialBackground.CornersTextEnabled;
					this.dialConnerTextTextBox.Enabled = this.nowDial.DialBackground.CornersTextEnabled;
					this.dialConnerTextTextBox.Text = this.nowDial.DialBackground.CornersText.Text;
					this.dialLeftAndRightTextCheckBox.Checked = this.nowDial.DialBackground.CoupletTextEnabled;
					this.dialLeftTextTextBox.Enabled = this.nowDial.DialBackground.CoupletTextEnabled;
					this.dialRightTextTextBox.Enabled = this.nowDial.DialBackground.CoupletTextEnabled;
					this.dialLeftTextTextBox.Text = this.nowDial.DialBackground.CoupletTextLeft.Text;
					this.dialRightTextTextBox.Text = this.nowDial.DialBackground.CoupletTextRight.Text;
				}
				this.isLoadingParm = false;
			}
			catch
			{
			}
		}

		private void dialLoadTextElementParam()
		{
			this.dialFontColorComboBox.Items.Clear();
			if (this.nowPanel != null)
			{
				IList<System.Drawing.Color> colorList = LedColorConst.GetColorList(this.nowPanel.ColorMode);
				foreach (System.Drawing.Color current in colorList)
				{
					this.dialFontColorComboBox.Items.Add(current);
				}
			}
			if (this.nowDial != null)
			{
				LedFont ledFont = new LedFont();
				System.Drawing.Color pColor = LedColorConst.Red;
				bool pEnable = false;
				if (this.dialTextMode == 1)
				{
					ledFont = this.nowDial.DialBackground.FixedText.Font;
					pColor = this.nowDial.DialBackground.FixedText.ForeColor;
					pEnable = this.nowDial.DialBackground.FixedTextEnabled;
				}
				else if (this.dialTextMode == 2)
				{
					ledFont = this.nowDial.DialBackground.CornersText.Font;
					pColor = this.nowDial.DialBackground.CornersText.ForeColor;
					pEnable = this.nowDial.DialBackground.CornersTextEnabled;
				}
				else if (this.dialTextMode == 3)
				{
					ledFont = this.nowDial.DialBackground.CoupletTextLeft.Font;
					pColor = this.nowDial.DialBackground.CoupletTextLeft.ForeColor;
					pEnable = this.nowDial.DialBackground.CoupletTextEnabled;
				}
				if (this.dialFontComboBox.Items.Count > 0)
				{
					int num = -1;
					for (int i = 0; i < this.dialFontComboBox.Items.Count; i++)
					{
						if (this.dialFontComboBox.Items[i].ToString() == ledFont.FamilyName)
						{
							num = i;
							break;
						}
						if (this.dialFontComboBox.Items[i].ToString() == formMain.DefalutForeignTradeFamilyName)
						{
							num = i;
						}
					}
					this.dialFontComboBox.SelectedIndex = ((num < 0) ? 0 : num);
				}
				this.dialFontSizeComboBox.Text = ledFont.Size.ToString();
				if (ledFont.Bold)
				{
					this.dialFontBoldButton.BackColor = System.Drawing.Color.LightBlue;
				}
				else
				{
					this.dialFontBoldButton.BackColor = Control.DefaultBackColor;
				}
				if (ledFont.Italic)
				{
					this.dialItalicBoldButton.BackColor = System.Drawing.Color.LightBlue;
				}
				else
				{
					this.dialItalicBoldButton.BackColor = Control.DefaultBackColor;
				}
				if (ledFont.Underline)
				{
					this.dialUnderlineBoldButton.BackColor = System.Drawing.Color.LightBlue;
				}
				else
				{
					this.dialUnderlineBoldButton.BackColor = Control.DefaultBackColor;
				}
				if (this.dialFontColorComboBox.Items.Count > 0)
				{
					int num2 = formMain.FromColorToIndex(pColor);
					int count = this.dialFontColorComboBox.Items.Count;
					if (num2 > count - 1)
					{
						num2 = count - 1;
					}
					this.dialFontColorComboBox.SelectedIndex = num2;
				}
				this.dialFontColorComboBox.Enabled = formMain.GetColorComboBoxEnable(pEnable);
			}
		}

		private void dialComboBoxScaleShape_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			this.nowDial.DialBackground.DialScaleStyle = (LedDialScaleStyle)comboBox.SelectedIndex;
			this.RedrawSubarea();
		}

		private void dialComboBoxHandStyle_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			this.nowDial.DialHandStyle = (LedDialHandStyle)comboBox.SelectedIndex;
			this.RedrawSubarea();
		}

		private void dialTimeJetType_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowDial.TimeDifference = (LedDialTimeDifference)comboBox.SelectedIndex;
			this.RedrawSubarea();
		}

		private void dialTimeJetPicker_ValueChanged(object sender, EventArgs e)
		{
			DateTimePicker dateTimePicker = (DateTimePicker)sender;
			if (!dateTimePicker.Focused)
			{
				return;
			}
			this.nowDial.TimeDifferenceHour = dateTimePicker.Value.Hour;
			this.nowDial.TimeDifferenceMinute = dateTimePicker.Value.Minute;
			this.nowDial.TimeDifferenceSecond = dateTimePicker.Value.Second;
			this.RedrawSubarea();
		}

		private void dialAreaTextCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.FixedTextEnabled = checkBox.Checked;
			this.dialAreaTextTextBox.Enabled = checkBox.Checked;
			this.dialTextMode = 1;
			this.dialLoadTextElementParam();
			this.RedrawSubarea();
		}

		private void dialAreaTextTextBox_TextChanged(object sender, EventArgs e)
		{
			TextBox textBox = (TextBox)sender;
			if (!textBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.FixedText.Text = textBox.Text;
			this.dialTextMode = 1;
			this.dialLoadTextElementParam();
			this.RedrawSubarea();
		}

		private void dialAreaTextTextBox_Enter(object sender, EventArgs e)
		{
			this.dialTextMode = 1;
			this.dialLoadTextElementParam();
		}

		private void dialConnerTextCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.CornersTextEnabled = checkBox.Checked;
			this.dialConnerTextTextBox.Enabled = checkBox.Checked;
			this.dialTextMode = 2;
			this.dialLoadTextElementParam();
			this.RedrawSubarea();
		}

		private void dialConnerTextTextBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			string[] array = comboBox.Text.Split(new char[]
			{
				','
			});
			if (array.Length < 4)
			{
				return;
			}
			this.nowDial.DialBackground.CornersText.Text = comboBox.Text;
			this.dialTextMode = 2;
			this.dialLoadTextElementParam();
			this.RedrawSubarea();
		}

		private void dialConnerTextTextBox_Enter(object sender, EventArgs e)
		{
			this.dialTextMode = 2;
			this.dialLoadTextElementParam();
		}

		private void dialLeftAndRightTextCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.CoupletTextEnabled = checkBox.Checked;
			this.dialLeftTextTextBox.Enabled = checkBox.Checked;
			this.dialRightTextTextBox.Enabled = checkBox.Checked;
			this.dialTextMode = 3;
			this.dialLoadTextElementParam();
			this.RedrawSubarea();
		}

		private void dialLeftTextTextBox_TextChanged(object sender, EventArgs e)
		{
			TextBox textBox = (TextBox)sender;
			if (!textBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.CoupletTextLeft.Text = textBox.Text;
			this.dialTextMode = 3;
			this.dialLoadTextElementParam();
			this.RedrawSubarea();
		}

		private void dialLeftTextTextBox_Enter(object sender, EventArgs e)
		{
			this.dialTextMode = 3;
			this.dialLoadTextElementParam();
		}

		private void dialRightTextTextBox_TextChanged(object sender, EventArgs e)
		{
			TextBox textBox = (TextBox)sender;
			if (!textBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.CoupletTextRight.Text = textBox.Text;
			this.dialTextMode = 3;
			this.dialLoadTextElementParam();
			this.RedrawSubarea();
		}

		private void dialRightTextTextBox_Enter(object sender, EventArgs e)
		{
			this.dialTextMode = 3;
			this.dialLoadTextElementParam();
		}

		private void dialFontComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			try
			{
				ComboBox comboBox = (ComboBox)sender;
				if (comboBox.Focused)
				{
					if (this.dialTextMode == 1)
					{
						this.nowDial.DialBackground.FixedText.Font.FamilyName = comboBox.Text;
					}
					else if (this.dialTextMode == 2)
					{
						this.nowDial.DialBackground.CornersText.Font.FamilyName = comboBox.Text;
					}
					else if (this.dialTextMode == 3)
					{
						this.nowDial.DialBackground.CoupletTextLeft.Font.FamilyName = comboBox.Text;
						this.nowDial.DialBackground.CoupletTextRight.Font.FamilyName = comboBox.Text;
					}
					this.RedrawSubarea();
				}
			}
			catch
			{
			}
		}

		private void diaoFontSizeComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			try
			{
				ComboBox comboBox = (ComboBox)sender;
				if (comboBox.Focused)
				{
					if (this.dialTextMode == 1)
					{
						this.nowDial.DialBackground.FixedText.Font.Size = float.Parse(comboBox.Text);
					}
					else if (this.dialTextMode == 2)
					{
						this.nowDial.DialBackground.CornersText.Font.Size = float.Parse(comboBox.Text);
					}
					else if (this.dialTextMode == 3)
					{
						this.nowDial.DialBackground.CoupletTextLeft.Font.Size = float.Parse(comboBox.Text);
						this.nowDial.DialBackground.CoupletTextRight.Font.Size = float.Parse(comboBox.Text);
					}
					this.RedrawSubarea();
				}
			}
			catch
			{
			}
		}

		private void dialFontBoldButton_Click(object sender, EventArgs e)
		{
			try
			{
				Button button = (Button)sender;
				if (button.Focused)
				{
					bool flag = false;
					if (this.dialTextMode == 1)
					{
						flag = !this.nowDial.DialBackground.FixedText.Font.Bold;
						this.nowDial.DialBackground.FixedText.Font.Bold = flag;
					}
					else if (this.dialTextMode == 2)
					{
						flag = !this.nowDial.DialBackground.CornersText.Font.Bold;
						this.nowDial.DialBackground.CornersText.Font.Bold = flag;
					}
					else if (this.dialTextMode == 3)
					{
						flag = !this.nowDial.DialBackground.CoupletTextLeft.Font.Bold;
						this.nowDial.DialBackground.CoupletTextLeft.Font.Bold = flag;
						this.nowDial.DialBackground.CoupletTextRight.Font.Bold = flag;
					}
					if (flag)
					{
						button.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						button.BackColor = Control.DefaultBackColor;
					}
					this.RedrawSubarea();
				}
			}
			catch
			{
			}
		}

		private void dialItalicBoldButton_Click(object sender, EventArgs e)
		{
			try
			{
				Button button = (Button)sender;
				if (button.Focused)
				{
					bool flag = false;
					if (this.dialTextMode == 1)
					{
						flag = !this.nowDial.DialBackground.FixedText.Font.Italic;
						this.nowDial.DialBackground.FixedText.Font.Italic = flag;
					}
					else if (this.dialTextMode == 2)
					{
						flag = !this.nowDial.DialBackground.CornersText.Font.Italic;
						this.nowDial.DialBackground.CornersText.Font.Italic = flag;
					}
					else if (this.dialTextMode == 3)
					{
						flag = !this.nowDial.DialBackground.CoupletTextLeft.Font.Italic;
						this.nowDial.DialBackground.CoupletTextLeft.Font.Italic = flag;
						this.nowDial.DialBackground.CoupletTextRight.Font.Italic = flag;
					}
					if (flag)
					{
						button.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						button.BackColor = Control.DefaultBackColor;
					}
					this.RedrawSubarea();
				}
			}
			catch
			{
			}
		}

		private void dialUnderlineBoldButton_Click(object sender, EventArgs e)
		{
			try
			{
				Button button = (Button)sender;
				if (button.Focused)
				{
					bool flag = false;
					if (this.dialTextMode == 1)
					{
						flag = !this.nowDial.DialBackground.FixedText.Font.Underline;
						this.nowDial.DialBackground.FixedText.Font.Underline = flag;
					}
					else if (this.dialTextMode == 2)
					{
						flag = !this.nowDial.DialBackground.CornersText.Font.Underline;
						this.nowDial.DialBackground.CornersText.Font.Underline = flag;
					}
					else if (this.dialTextMode == 3)
					{
						flag = !this.nowDial.DialBackground.CoupletTextLeft.Font.Underline;
						this.nowDial.DialBackground.CoupletTextLeft.Font.Underline = flag;
						this.nowDial.DialBackground.CoupletTextRight.Font.Underline = flag;
					}
					if (flag)
					{
						button.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						button.BackColor = Control.DefaultBackColor;
					}
					this.RedrawSubarea();
				}
			}
			catch
			{
			}
		}

		private void dialFontColorComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			try
			{
				ComboBox comboBox = (ComboBox)sender;
				if (comboBox.Focused)
				{
					if (this.dialTextMode == 1)
					{
						this.nowDial.DialBackground.FixedText.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
					}
					else if (this.dialTextMode == 2)
					{
						this.nowDial.DialBackground.CornersText.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
					}
					else if (this.dialTextMode == 3)
					{
						this.nowDial.DialBackground.CoupletTextLeft.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
						this.nowDial.DialBackground.CoupletTextRight.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
					}
					this.RedrawSubarea();
				}
			}
			catch
			{
			}
		}

		private void dialElementLeft_Click(object sender, EventArgs e)
		{
			try
			{
				int num = 1;
				if (this.IsPressCtrl())
				{
					num = 5;
				}
				if (this.dialTextMode == 1)
				{
					this.nowDial.DialBackground.FixedText.HorizontalOffset -= num;
				}
				else if (this.dialTextMode == 2)
				{
					this.nowDial.DialBackground.CornersText.HorizontalOffset -= num;
				}
				this.RedrawSubarea();
			}
			catch
			{
			}
		}

		private void dialElementRight_Click(object sender, EventArgs e)
		{
			try
			{
				int num = 1;
				if (this.IsPressCtrl())
				{
					num = 5;
				}
				if (this.dialTextMode == 1)
				{
					this.nowDial.DialBackground.FixedText.HorizontalOffset += num;
				}
				else if (this.dialTextMode == 2)
				{
					this.nowDial.DialBackground.CornersText.HorizontalOffset += num;
				}
				this.RedrawSubarea();
			}
			catch
			{
			}
		}

		private void dialElementUp_Click(object sender, EventArgs e)
		{
			try
			{
				int num = 1;
				if (this.IsPressCtrl())
				{
					num = 5;
				}
				if (this.dialTextMode == 1)
				{
					this.nowDial.DialBackground.FixedText.VerticalOffset -= num;
				}
				else if (this.dialTextMode == 2)
				{
					this.nowDial.DialBackground.CornersText.VerticalOffset -= num;
				}
				else if (this.dialTextMode == 3)
				{
					this.nowDial.DialBackground.CoupletTextLeft.VerticalOffset -= num;
					this.nowDial.DialBackground.CoupletTextRight.VerticalOffset -= num;
				}
				this.RedrawSubarea();
			}
			catch
			{
			}
		}

		private void dialElementDown_Click(object sender, EventArgs e)
		{
			try
			{
				int num = 1;
				if (this.IsPressCtrl())
				{
					num = 5;
				}
				if (this.dialTextMode == 1)
				{
					this.nowDial.DialBackground.FixedText.VerticalOffset += num;
				}
				else if (this.dialTextMode == 2)
				{
					this.nowDial.DialBackground.CornersText.VerticalOffset += num;
				}
				else if (this.dialTextMode == 3)
				{
					this.nowDial.DialBackground.CoupletTextLeft.VerticalOffset += num;
					this.nowDial.DialBackground.CoupletTextRight.VerticalOffset += num;
				}
				this.RedrawSubarea();
			}
			catch
			{
			}
		}

		private void dialElementLeft_MouseHover(object sender, EventArgs e)
		{
			if (this.IsPressCtrl())
			{
				return;
			}
			this.toolTip1.Show(formMain.ML.GetStr("Prompt_PressControlFaster"), (PictureBox)sender);
		}

		private void dialNumberHourHandPlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialHourHand.LengthDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialNumberHourHandWidthPlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialHourHand.WidthDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialHandColorHour_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowDial.DialHourHand.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void dialNumberMinuteHandPlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialMinuteHand.LengthDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialNumberMinuteHandWidthPlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialMinuteHand.WidthDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialHandColorMinute_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowDial.DialMinuteHand.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void dialNumberSecondHandPlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialSecondHand.LengthDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialNumberSecondHandWidthPlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialSecondHand.WidthDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialHandColorSecond_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowDial.DialSecondHand.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void dialNumberScaleCrossPlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialBackground.TSNTScaleDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialHandColorScale369_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.TSNTScaleColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void dialNumberScaleHourPlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialBackground.HourScaleDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialHandColorScaleColor_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.HourScaleColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void dialNumnberScaleMinutePlus_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowDial.DialBackground.MinuteScaleDelta = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void dialHandColorScaleMinute_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowDial.DialBackground.MinuteScaleColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		public bool IsPressCtrl()
		{
			return (Control.ModifierKeys & Keys.Control) == Keys.Control;
		}

		private void ClockShowParam()
		{
			try
			{
				this.isLoadingParm = true;
				this.clockNewContentColorComboBox.Items.Clear();
				this.clockNewDateColorComboBox.Items.Clear();
				this.clockNewWeekColorComboBox.Items.Clear();
				this.clockNewTimeColorComboBox.Items.Clear();
				if (this.nowPanel != null)
				{
					IList<System.Drawing.Color> colorList = LedColorConst.GetColorList(this.nowPanel.ColorMode);
					foreach (System.Drawing.Color current in colorList)
					{
						this.clockNewContentColorComboBox.Items.Add(current);
						this.clockNewDateColorComboBox.Items.Add(current);
						this.clockNewWeekColorComboBox.Items.Add(current);
						this.clockNewTimeColorComboBox.Items.Add(current);
					}
				}
				if (this.nowTime != null)
				{
					if (this.clockNewFontFamily.Items.Count > 0)
					{
						int num = -1;
						for (int i = 0; i < this.clockNewFontFamily.Items.Count; i++)
						{
							if (this.clockNewFontFamily.Items[i].ToString() == this.nowTime.Font.FamilyName)
							{
								num = i;
								break;
							}
							if (this.clockNewFontFamily.Items[i].ToString() == formMain.DefalutForeignTradeFamilyName)
							{
								num = i;
							}
						}
						this.clockNewFontFamily.SelectedIndex = ((num < 0) ? 0 : num);
					}
					this.clockNewLineModel.SelectedIndex = (int)this.nowTime.LineStyle;
					this.clockNewContentTextBox.Text = this.nowTime.TimeBackground.Text;
					if (this.nowTime.Font.Bold)
					{
						this.clockNewBoldButton.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						this.clockNewBoldButton.BackColor = Control.DefaultBackColor;
					}
					if (this.nowTime.Font.Italic)
					{
						this.clockNewItalicButton.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						this.clockNewItalicButton.BackColor = Control.DefaultBackColor;
					}
					if (this.nowTime.Font.Underline)
					{
						this.clockNewUnderlineButton.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						this.clockNewUnderlineButton.BackColor = Control.DefaultBackColor;
					}
					this.clockNewFontSize.Text = this.nowTime.Font.Size.ToString();
					if (!formMain.IsforeignTradeMode)
					{
						this.clockNewDateStyleComboBox.SelectedIndex = this.nowTime.DateStyle;
						this.clockNewWeekStyleComboBox.SelectedIndex = this.nowTime.WeekStyle;
						this.clockNewTimeStyleComboBox.SelectedIndex = this.nowTime.TimeStyle;
					}
					else
					{
						if (this.nowTime.DateStyle < 2)
						{
							this.nowTime.DateStyle = 2;
						}
						this.clockNewDateStyleComboBox.SelectedIndex = this.nowTime.DateStyle - 2;
						if (this.nowTime.WeekStyle < 2)
						{
							this.nowTime.WeekStyle = 2;
						}
						this.clockNewWeekStyleComboBox.SelectedIndex = this.nowTime.WeekStyle - 2;
						if (this.nowTime.TimeStyle >= 2)
						{
							this.nowTime.TimeStyle = 0;
						}
						this.clockNewTimeStyleComboBox.SelectedIndex = this.nowTime.TimeStyle;
					}
					this.clockNewDateIsShowCheckBox.Checked = this.nowTime.DateEnabled;
					this.clockNewWeekIsShowCheckBox.Checked = this.nowTime.WeekEnabled;
					this.clockNewTimeIsShowCheckBox.Checked = this.nowTime.TimeEnabled;
					this.clockNewDateStyleComboBox.Enabled = this.nowTime.DateEnabled;
					this.clockNewWeekStyleComboBox.Enabled = this.nowTime.WeekEnabled;
					this.clockNewTimeStyleComboBox.Enabled = this.nowTime.TimeEnabled;
					if (this.clockNewContentColorComboBox.Items.Count > 0)
					{
						int num2 = formMain.FromColorToIndex(this.nowTime.TimeBackground.ForeColor);
						int count = this.clockNewContentColorComboBox.Items.Count;
						if (num2 > count - 1)
						{
							num2 = count - 1;
						}
						this.clockNewContentColorComboBox.SelectedIndex = num2;
					}
					if (this.clockNewDateColorComboBox.Items.Count > 0)
					{
						int num3 = formMain.FromColorToIndex(this.nowTime.DateForeColor);
						int count2 = this.clockNewDateColorComboBox.Items.Count;
						if (num3 > count2 - 1)
						{
							num3 = count2 - 1;
						}
						this.clockNewDateColorComboBox.SelectedIndex = num3;
					}
					if (this.clockNewWeekColorComboBox.Items.Count > 0)
					{
						int num4 = formMain.FromColorToIndex(this.nowTime.WeekForeColor);
						int count3 = this.clockNewWeekColorComboBox.Items.Count;
						if (num4 > count3 - 1)
						{
							num4 = count3 - 1;
						}
						this.clockNewWeekColorComboBox.SelectedIndex = num4;
					}
					if (this.clockNewTimeColorComboBox.Items.Count > 0)
					{
						int num5 = formMain.FromColorToIndex(this.nowTime.TimeForeColor);
						int count4 = this.clockNewTimeColorComboBox.Items.Count;
						if (num5 > count4 - 1)
						{
							num5 = count4 - 1;
						}
						this.clockNewTimeColorComboBox.SelectedIndex = num5;
					}
					this.clockNewContentColorComboBox.Enabled = formMain.GetColorComboBoxEnable(this.nowTime.TimeBackground.TextEnabled);
					this.clockNewDateColorComboBox.Enabled = formMain.GetColorComboBoxEnable(this.nowTime.DateEnabled);
					this.clockNewWeekColorComboBox.Enabled = formMain.GetColorComboBoxEnable(this.nowTime.WeekEnabled);
					this.clockNewTimeColorComboBox.Enabled = formMain.GetColorComboBoxEnable(this.nowTime.TimeEnabled);
					this.clockNewContentTextBox.Text = this.nowTime.TimeBackground.Text;
					this.clockNewContentTextBox.Enabled = this.nowTime.TimeBackground.TextEnabled;
					this.clockNewContentIsShowCheckBox.Checked = this.nowTime.TimeBackground.TextEnabled;
				}
				this.isLoadingParm = false;
			}
			catch
			{
			}
		}

		private void clockNewFontFamily_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			string familyName = comboBox.Text.Trim();
			this.nowTime.Font.FamilyName = familyName;
			this.RedrawSubarea();
		}

		private void clockNewFontSize_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			float size = float.Parse(comboBox.Text.Trim());
			this.nowTime.Font.Size = size;
			this.RedrawSubarea();
		}

		private void clockNewBoldButton_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (!button.Focused)
			{
				return;
			}
			bool flag = !this.nowTime.Font.Bold;
			if (flag)
			{
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			else
			{
				button.BackColor = Control.DefaultBackColor;
			}
			this.nowTime.Font.Bold = flag;
			this.RedrawSubarea();
		}

		private void clockNewItalicButton_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (!button.Focused)
			{
				return;
			}
			bool flag = !this.nowTime.Font.Italic;
			if (flag)
			{
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			else
			{
				button.BackColor = Control.DefaultBackColor;
			}
			this.nowTime.Font.Italic = flag;
			this.RedrawSubarea();
		}

		private void clockNewUnderlineButton_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (!button.Focused)
			{
				return;
			}
			bool flag = !this.nowTime.Font.Underline;
			if (flag)
			{
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			else
			{
				button.BackColor = Control.DefaultBackColor;
			}
			this.nowTime.Font.Underline = flag;
			this.RedrawSubarea();
		}

		private void clockNewLineModel_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTime.LineStyle = (LedTimeLineStyle)comboBox.SelectedIndex;
			this.RedrawSubarea();
		}

		private void clockNewContentTextBox_TextChanged(object sender, EventArgs e)
		{
			TextBox textBox = (TextBox)sender;
			if (!textBox.Focused)
			{
				return;
			}
			this.nowTime.TimeBackground.Text = textBox.Text;
			this.RedrawSubarea();
		}

		private void clockNewContentColorComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTime.TimeBackground.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void clockNewContentIsShowCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowTime.TimeBackground.TextEnabled = checkBox.Checked;
			this.clockNewContentTextBox.Enabled = checkBox.Checked;
			this.clockNewContentColorComboBox.Enabled = formMain.GetColorComboBoxEnable(checkBox.Checked);
			this.RedrawSubarea();
		}

		private void clockNewDateStyleComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowTime.DateStyle = comboBox.SelectedIndex;
			}
			else
			{
				this.nowTime.DateStyle = comboBox.SelectedIndex + 2;
			}
			this.RedrawSubarea();
		}

		private void clockNewDateColorComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTime.DateForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void clockNewDateIsShowCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowTime.DateEnabled = checkBox.Checked;
			this.clockNewDateColorComboBox.Enabled = formMain.GetColorComboBoxEnable(checkBox.Checked);
			this.clockNewDateStyleComboBox.Enabled = checkBox.Checked;
			this.RedrawSubarea();
		}

		private void clockNewWeekStyleComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowTime.WeekStyle = comboBox.SelectedIndex;
			}
			else
			{
				this.nowTime.WeekStyle = comboBox.SelectedIndex + 2;
			}
			this.RedrawSubarea();
		}

		private void clockNewWeekColorComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTime.WeekForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void clockNewWeekIsShowCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowTime.WeekEnabled = checkBox.Checked;
			this.clockNewWeekColorComboBox.Enabled = formMain.GetColorComboBoxEnable(checkBox.Checked);
			this.clockNewWeekStyleComboBox.Enabled = checkBox.Checked;
			this.RedrawSubarea();
		}

		private void clockNewTimeStyleComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowTime.TimeStyle = comboBox.SelectedIndex;
			}
			else
			{
				this.nowTime.TimeStyle = comboBox.SelectedIndex;
			}
			this.RedrawSubarea();
		}

		private void clockNewTimeColorComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTime.TimeForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void clockNewTimeIsShowCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowTime.TimeEnabled = checkBox.Checked;
			this.clockNewTimeColorComboBox.Enabled = formMain.GetColorComboBoxEnable(checkBox.Checked);
			this.clockNewTimeStyleComboBox.Enabled = checkBox.Checked;
			this.RedrawSubarea();
		}

		private void clockNewDateColorComboBox_DrawItem(object sender, DrawItemEventArgs e)
		{
			System.Drawing.Graphics arg_06_0 = e.Graphics;
			System.Drawing.Rectangle bounds = e.Bounds;
			ComboBox comboBox = (ComboBox)sender;
			if (e.Index >= 0 && e.Index < comboBox.Items.Count)
			{
				System.Drawing.Color color = (System.Drawing.Color)comboBox.Items[e.Index];
				using (System.Drawing.Brush brush = new System.Drawing.SolidBrush(color))
				{
					e.Graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor;
					e.Graphics.FillRectangle(brush, new System.Drawing.Rectangle(bounds.X, bounds.Y + 1, bounds.Width, bounds.Height - 2));
					e.DrawFocusRectangle();
				}
			}
		}

		private void CounterShowParam()
		{
			this.isLoadingParm = true;
			this.counterNewColor.Items.Clear();
			this.counterNewContentColorComboBox.Items.Clear();
			if (this.nowPanel != null)
			{
				IList<System.Drawing.Color> colorList = LedColorConst.GetColorList(this.nowPanel.ColorMode);
				foreach (System.Drawing.Color current in colorList)
				{
					this.counterNewColor.Items.Add(current);
					this.counterNewContentColorComboBox.Items.Add(current);
				}
			}
			if (this.nowCounter != null)
			{
				this.counterShowUnit.Checked = this.nowCounter.UnitsEnabled;
				this.counterTargetYear.Value = this.nowCounter.TargetTimeYear;
				this.counterTargetMonth.Value = this.nowCounter.TargetTimeMonth;
				this.counterTargetDay.Value = this.nowCounter.TargetTimeDay;
				this.counterTargetHour.Value = this.nowCounter.TargetTimeHour;
				this.counterTargetMinute.Value = this.nowCounter.TargetTimeMinute;
				if (this.nowCounter.Mode == LedCounterMode.Countdown)
				{
					this.counterTypeUp.Checked = false;
					this.counterTypeDown.Checked = true;
				}
				else
				{
					this.counterTypeUp.Checked = true;
					this.counterTypeDown.Checked = false;
				}
				this.counterOptionDay.Checked = false;
				this.counterOptionHour.Checked = false;
				this.counterOptionMinute.Checked = false;
				this.counterOptionSecond.Checked = false;
				this.counterOptionYear.Checked = false;
				if (this.nowCounter.DayEnabled)
				{
					this.counterOptionDay.Checked = true;
				}
				if (this.nowCounter.HourEnabled)
				{
					this.counterOptionHour.Checked = true;
				}
				if (this.nowCounter.MinuteEnabled)
				{
					this.counterOptionMinute.Checked = true;
				}
				if (this.nowCounter.SecondEnabled)
				{
					this.counterOptionSecond.Checked = true;
				}
				if (this.nowCounter.YearEnabled)
				{
					this.counterOptionYear.Checked = true;
				}
				this.counterNewContentCheckBox.Checked = this.nowCounter.CounterBackground.ToolTipEnabled;
				this.counterNewContentColorComboBox.Enabled = this.nowCounter.CounterBackground.ToolTipEnabled;
				this.CounterNewContentTextBox.Enabled = this.nowCounter.CounterBackground.ToolTipEnabled;
				if (this.counterNewFont.Items.Count > 0)
				{
					int num = -1;
					for (int i = 0; i < this.counterNewFont.Items.Count; i++)
					{
						if (this.counterNewFont.Items[i].ToString() == this.nowCounter.Font.FamilyName)
						{
							num = i;
							break;
						}
						if (this.counterNewFont.Items[i].ToString() == formMain.DefalutForeignTradeFamilyName)
						{
							num = i;
						}
					}
					this.counterNewFont.SelectedIndex = ((num < 0) ? 0 : num);
				}
				this.counterNewSize.Text = this.nowCounter.Font.Size.ToString();
				if (this.nowCounter.Font.Bold)
				{
					this.counterNewBlod.BackColor = System.Drawing.Color.LightBlue;
				}
				else
				{
					this.counterNewBlod.BackColor = Control.DefaultBackColor;
				}
				if (this.nowCounter.Font.Italic)
				{
					this.counterNewItalic.BackColor = System.Drawing.Color.LightBlue;
				}
				else
				{
					this.counterNewItalic.BackColor = Control.DefaultBackColor;
				}
				if (this.nowCounter.Font.Underline)
				{
					this.counterNewUnderline.BackColor = System.Drawing.Color.LightBlue;
				}
				else
				{
					this.counterNewUnderline.BackColor = Control.DefaultBackColor;
				}
				if (this.counterNewColor.Items.Count > 0)
				{
					int num2 = formMain.FromColorToIndex(this.nowCounter.ForeColor);
					int count = this.counterNewColor.Items.Count;
					if (num2 > count - 1)
					{
						num2 = count - 1;
					}
					this.counterNewColor.SelectedIndex = num2;
				}
				this.counterNewColor.Enabled = formMain.GetColorComboBoxEnable(true);
				this.counterNewLineModel.SelectedIndex = (int)this.nowCounter.LineStyle;
				this.CounterNewContentTextBox.Text = this.nowCounter.CounterBackground.ToolTip;
				this.CounterNewContentTextBox.Enabled = this.nowCounter.CounterBackground.ToolTipEnabled;
				if (this.counterNewContentColorComboBox.Items.Count > 0)
				{
					int num3 = formMain.FromColorToIndex(this.nowCounter.CounterBackground.ForeColor);
					int count2 = this.counterNewContentColorComboBox.Items.Count;
					if (num3 > count2 - 1)
					{
						num3 = count2 - 1;
					}
					this.counterNewContentColorComboBox.SelectedIndex = num3;
				}
				this.counterNewContentColorComboBox.Enabled = formMain.GetColorComboBoxEnable(this.nowCounter.CounterBackground.ToolTipEnabled);
				this.counterNewYearUnit.Enabled = this.nowCounter.YearEnabled;
				this.counterNewDayUnit.Enabled = this.nowCounter.DayEnabled;
				this.counterNewMinuteUnit.Enabled = this.nowCounter.MinuteEnabled;
				this.counterNewHourUnit.Enabled = this.nowCounter.HourEnabled;
				this.counterNewSecondUnit.Enabled = this.nowCounter.SecondEnabled;
				if (!formMain.IsforeignTradeMode)
				{
					this.counterNewYearUnit.Text = LedCommonConst.CounterYearUnits[(int)this.nowCounter.CounterYearUnit.UnitStyle];
					this.counterNewDayUnit.Text = LedCommonConst.CounterDayUnits[(int)this.nowCounter.CounterDayUnit.UnitStyle];
					this.counterNewMinuteUnit.Text = LedCommonConst.CounterMinuteUnits[(int)this.nowCounter.CounterMinuteUnit.UnitStyle];
					this.counterNewHourUnit.Text = LedCommonConst.CounterHourUnits[(int)this.nowCounter.CounterHourUnit.UnitStyle];
					this.counterNewSecondUnit.Text = LedCommonConst.CounterSecondUnits[(int)this.nowCounter.CounterSecondUnit.UnitStyle];
				}
				else
				{
					if (this.nowCounter.CounterYearUnit.UnitStyle < LedCounterYearUnitStyle.Year_Abb)
					{
						this.nowCounter.CounterYearUnit.UnitStyle = LedCounterYearUnitStyle.Year_Abb;
					}
					this.counterNewYearUnit.Text = LedCommonConst.CounterYearUnits[(int)this.nowCounter.CounterYearUnit.UnitStyle];
					if (this.nowCounter.CounterDayUnit.UnitStyle < LedCounterDayUnitStyle.Day_Abb)
					{
						this.nowCounter.CounterDayUnit.UnitStyle = LedCounterDayUnitStyle.Day_Abb;
					}
					this.counterNewDayUnit.Text = LedCommonConst.CounterDayUnits[(int)this.nowCounter.CounterDayUnit.UnitStyle];
					if (this.nowCounter.CounterMinuteUnit.UnitStyle < LedCounterMinuteUnitStyle.Minute_Abb)
					{
						this.nowCounter.CounterMinuteUnit.UnitStyle = LedCounterMinuteUnitStyle.Minute_Abb;
					}
					this.counterNewMinuteUnit.Text = LedCommonConst.CounterMinuteUnits[(int)this.nowCounter.CounterMinuteUnit.UnitStyle];
					if (this.nowCounter.CounterHourUnit.UnitStyle < LedCounterHourUnitStyle.Hour_Abb)
					{
						this.nowCounter.CounterHourUnit.UnitStyle = LedCounterHourUnitStyle.Hour_Abb;
					}
					this.counterNewHourUnit.Text = LedCommonConst.CounterHourUnits[(int)this.nowCounter.CounterHourUnit.UnitStyle];
					if (this.nowCounter.CounterSecondUnit.UnitStyle < LedCounterSecondUnitStyle.Second_Abb)
					{
						this.nowCounter.CounterSecondUnit.UnitStyle = LedCounterSecondUnitStyle.Second_Abb;
					}
					this.counterNewSecondUnit.Text = LedCommonConst.CounterSecondUnits[(int)this.nowCounter.CounterSecondUnit.UnitStyle];
				}
			}
			this.isLoadingParm = false;
		}

		private void counterNewFont_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowCounter.Font.FamilyName = comboBox.Text;
			this.RedrawSubarea();
		}

		private void counterNewSize_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowCounter.Font.Size = float.Parse(comboBox.Text);
			this.RedrawSubarea();
		}

		private void counterNewBlod_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (this.nowCounter.Font.Bold)
			{
				this.nowCounter.Font.Bold = false;
				button.BackColor = Control.DefaultBackColor;
			}
			else
			{
				this.nowCounter.Font.Bold = true;
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			this.RedrawSubarea();
		}

		private void counterNewItalic_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (this.nowCounter.Font.Italic)
			{
				this.nowCounter.Font.Italic = false;
				button.BackColor = Control.DefaultBackColor;
			}
			else
			{
				this.nowCounter.Font.Italic = true;
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			this.RedrawSubarea();
		}

		private void counterNewUnderline_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (this.nowCounter.Font.Underline)
			{
				this.nowCounter.Font.Underline = false;
				button.BackColor = Control.DefaultBackColor;
			}
			else
			{
				this.nowCounter.Font.Underline = true;
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			this.RedrawSubarea();
		}

		private void counterNewColor_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowCounter.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void counterNewLineModel_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowCounter.LineStyle = (LedCounterLineStyle)comboBox.SelectedIndex;
			this.RedrawSubarea();
		}

		private void CounterNewContentTextBox_TextChanged(object sender, EventArgs e)
		{
			TextBox textBox = (TextBox)sender;
			if (!textBox.Focused)
			{
				return;
			}
			this.nowCounter.CounterBackground.ToolTip = textBox.Text;
			this.RedrawSubarea();
		}

		private void counterNewContentColorComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowCounter.CounterBackground.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void counterNewContentCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowCounter.CounterBackground.ToolTipEnabled = checkBox.Checked;
			this.CounterNewContentTextBox.Enabled = checkBox.Checked;
			this.counterNewContentColorComboBox.Enabled = formMain.GetColorComboBoxEnable(checkBox.Checked);
			this.RedrawSubarea();
		}

		private void counterTargetYear_ValueChanged(object sender, EventArgs e)
		{
			this.CheckMaxDay();
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowCounter.TargetTimeYear = (int)numericUpDown.Value;
			this.RedrawSubarea();
			this.CheckMaxDay();
		}

		private void counterTargetMonth_ValueChanged(object sender, EventArgs e)
		{
			this.CheckMaxDay();
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowCounter.TargetTimeMonth = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void counterTargetDay_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowCounter.TargetTimeDay = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void counterTargetHour_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowCounter.TargetTimeHour = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void counterTargetMinute_ValueChanged(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			this.nowCounter.TargetTimeMinute = (int)numericUpDown.Value;
			this.RedrawSubarea();
		}

		private void counterTypeUp_CheckedChanged(object sender, EventArgs e)
		{
			RadioButton radioButton = (RadioButton)sender;
			if (radioButton.Checked)
			{
				this.nowCounter.Mode = LedCounterMode.Countup;
			}
			this.RedrawSubarea();
		}

		private void counterTypeDown_CheckedChanged(object sender, EventArgs e)
		{
			RadioButton radioButton = (RadioButton)sender;
			if (radioButton.Checked)
			{
				this.nowCounter.Mode = LedCounterMode.Countdown;
			}
			this.RedrawSubarea();
		}

		private void counterShowUnit_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowCounter.UnitsEnabled = checkBox.Checked;
			this.RedrawSubarea();
		}

		private void counterOptionYear_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			bool @checked = checkBox.Checked;
			if (!this.counterOptionDay.Checked && !this.counterOptionHour.Checked && !this.counterOptionMinute.Checked && !this.counterOptionSecond.Checked && !@checked)
			{
				this.counterNewYearUnit.Focus();
				this.counterOptionYear.Checked = true;
				return;
			}
			this.nowCounter.YearEnabled = @checked;
			this.counterNewYearUnit.Enabled = @checked;
			this.RedrawSubarea();
		}

		private void counterNewYearUnit_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowCounter.CounterYearUnit.UnitStyle = (LedCounterYearUnitStyle)comboBox.SelectedIndex;
			}
			else
			{
				this.nowCounter.CounterYearUnit.UnitStyle = comboBox.SelectedIndex + LedCounterYearUnitStyle.Year_Abb;
			}
			this.RedrawSubarea();
		}

		private void counterOptionDay_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			bool @checked = checkBox.Checked;
			if (!this.counterOptionYear.Checked && !this.counterOptionHour.Checked && !this.counterOptionMinute.Checked && !this.counterOptionSecond.Checked && !@checked)
			{
				this.counterNewDayUnit.Focus();
				this.counterOptionDay.Checked = true;
				return;
			}
			this.nowCounter.DayEnabled = @checked;
			this.counterNewDayUnit.Enabled = @checked;
			this.RedrawSubarea();
		}

		private void counterNewDayUnit_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowCounter.CounterDayUnit.UnitStyle = (LedCounterDayUnitStyle)comboBox.SelectedIndex;
			}
			else
			{
				this.nowCounter.CounterDayUnit.UnitStyle = comboBox.SelectedIndex + LedCounterDayUnitStyle.Day_Abb;
			}
			this.RedrawSubarea();
		}

		private void counterOptionHour_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			bool @checked = checkBox.Checked;
			if (!this.counterOptionYear.Checked && !this.counterOptionDay.Checked && !this.counterOptionMinute.Checked && !this.counterOptionSecond.Checked && !@checked)
			{
				this.counterNewHourUnit.Focus();
				this.counterOptionHour.Checked = true;
				return;
			}
			this.nowCounter.HourEnabled = @checked;
			this.counterNewHourUnit.Enabled = @checked;
			this.RedrawSubarea();
		}

		private void counterNewHourUnit_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowCounter.CounterHourUnit.UnitStyle = (LedCounterHourUnitStyle)comboBox.SelectedIndex;
			}
			else
			{
				this.nowCounter.CounterHourUnit.UnitStyle = comboBox.SelectedIndex + LedCounterHourUnitStyle.Hour_Abb;
			}
			this.RedrawSubarea();
		}

		private void counterOptionMinute_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			bool @checked = checkBox.Checked;
			if (!this.counterOptionYear.Checked && !this.counterOptionDay.Checked && !this.counterOptionHour.Checked && !this.counterOptionSecond.Checked && !@checked)
			{
				this.counterNewMinuteUnit.Focus();
				this.counterOptionMinute.Checked = true;
				return;
			}
			this.nowCounter.MinuteEnabled = @checked;
			this.counterNewMinuteUnit.Enabled = @checked;
			this.RedrawSubarea();
		}

		private void counterNewMinuteUnit_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowCounter.CounterMinuteUnit.UnitStyle = (LedCounterMinuteUnitStyle)comboBox.SelectedIndex;
			}
			else
			{
				this.nowCounter.CounterMinuteUnit.UnitStyle = comboBox.SelectedIndex + LedCounterMinuteUnitStyle.Minute_Abb;
			}
			this.RedrawSubarea();
		}

		private void counterOptionSecond_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			bool @checked = checkBox.Checked;
			if (!this.counterOptionYear.Checked && !this.counterOptionDay.Checked && !this.counterOptionHour.Checked && !this.counterOptionMinute.Checked && !@checked)
			{
				this.counterNewSecondUnit.Focus();
				this.counterOptionSecond.Checked = true;
				return;
			}
			this.nowCounter.SecondEnabled = @checked;
			this.counterNewSecondUnit.Enabled = @checked;
			this.RedrawSubarea();
		}

		private void counterNewSecondUnit_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowCounter.CounterSecondUnit.UnitStyle = (LedCounterSecondUnitStyle)comboBox.SelectedIndex;
			}
			else
			{
				this.nowCounter.CounterSecondUnit.UnitStyle = comboBox.SelectedIndex + LedCounterSecondUnitStyle.Second_Abb;
			}
			this.RedrawSubarea();
		}

		private void CheckMaxDay()
		{
			int year = (int)this.counterTargetYear.Value;
			int num = (int)this.counterTargetMonth.Value;
			if (num == 1 | num == 3 | num == 5 | num == 7 | num == 8 | num == 10 | num == 12)
			{
				this.counterTargetDay.Maximum = 31m;
				return;
			}
			if (num != 2)
			{
				this.counterTargetDay.Maximum = 30m;
				return;
			}
			if (LedCommon.IsLeapYear(year))
			{
				this.counterTargetDay.Maximum = 29m;
				return;
			}
			this.counterTargetDay.Maximum = 28m;
		}

		private void TemperatureShowParam()
		{
			try
			{
				this.isLoadingParm = true;
				this.temperatureColorComboBox.Items.Clear();
				if (this.nowPanel != null)
				{
					IList<System.Drawing.Color> colorList = LedColorConst.GetColorList(this.nowPanel.ColorMode);
					foreach (System.Drawing.Color current in colorList)
					{
						this.temperatureColorComboBox.Items.Add(current);
					}
				}
				if (this.nowTemperature != null)
				{
					if (this.temperatureFontComboBox.Items.Count > 0)
					{
						int num = -1;
						for (int i = 0; i < this.temperatureFontComboBox.Items.Count; i++)
						{
							if (this.temperatureFontComboBox.Items[i].ToString() == this.nowTemperature.Font.FamilyName)
							{
								num = i;
								break;
							}
							if (this.temperatureFontComboBox.Items[i].ToString() == formMain.DefalutForeignTradeFamilyName)
							{
								num = i;
							}
						}
						this.temperatureFontComboBox.SelectedIndex = ((num < 0) ? 0 : num);
					}
					this.temperatureSizeComboBox.Text = this.nowTemperature.Font.Size.ToString();
					if (this.nowTemperature.Font.Bold)
					{
						this.temperatureBold.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						this.temperatureBold.BackColor = Control.DefaultBackColor;
					}
					if (this.nowTemperature.Font.Italic)
					{
						this.temperatureItalic.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						this.temperatureItalic.BackColor = Control.DefaultBackColor;
					}
					if (this.nowTemperature.Font.Underline)
					{
						this.temperatureUnderline.BackColor = System.Drawing.Color.LightBlue;
					}
					else
					{
						this.temperatureUnderline.BackColor = Control.DefaultBackColor;
					}
					if (this.temperatureColorComboBox.Items.Count > 0)
					{
						int num2 = formMain.FromColorToIndex(this.nowTemperature.ForeColor);
						int count = this.temperatureColorComboBox.Items.Count;
						if (num2 > count - 1)
						{
							num2 = count - 1;
						}
						this.temperatureColorComboBox.SelectedIndex = num2;
					}
					this.temperatureLineModelComboBox.SelectedIndex = (int)this.nowTemperature.LineStyle;
					this.temperatureContentTextBox.Text = this.nowTemperature.TemperatureBackground.ToolTip;
					this.temperatureContentTextBox.Enabled = this.nowTemperature.TemperatureBackground.ToolTipEnabled;
					this.temperatureIsUseContentCheckBox.Checked = this.nowTemperature.TemperatureBackground.ToolTipEnabled;
					if (!formMain.IsforeignTradeMode && this.nowTemperature.TemperatureUnit.UnitStyle == LedTemperatureUnitStyle.Degree_CHN)
					{
						this.nowTemperature.TemperatureUnit.UnitStyle = LedTemperatureUnitStyle.Degree;
					}
					this.temperatureDegreeUnitComboBox.Text = LedCommonConst.TemperatureUnits[(int)this.nowTemperature.TemperatureUnit.UnitStyle];
				}
				this.isLoadingParm = false;
			}
			catch
			{
			}
		}

		private void temperatureFontComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTemperature.Font.FamilyName = comboBox.Text;
			this.RedrawSubarea();
		}

		private void temperatureSizeComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTemperature.Font.Size = float.Parse(comboBox.Text);
			this.RedrawSubarea();
		}

		private void temperatureBold_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (!button.Focused)
			{
				return;
			}
			if (this.nowTemperature.Font.Bold)
			{
				this.nowTemperature.Font.Bold = false;
				button.BackColor = Control.DefaultBackColor;
			}
			else
			{
				this.nowTemperature.Font.Bold = true;
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			this.RedrawSubarea();
		}

		private void temperatureItalic_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (!button.Focused)
			{
				return;
			}
			if (this.nowTemperature.Font.Italic)
			{
				this.nowTemperature.Font.Italic = false;
				button.BackColor = Control.DefaultBackColor;
			}
			else
			{
				this.nowTemperature.Font.Italic = true;
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			this.RedrawSubarea();
		}

		private void temperatureUnderline_Click(object sender, EventArgs e)
		{
			Button button = (Button)sender;
			if (!button.Focused)
			{
				return;
			}
			if (this.nowTemperature.Font.Underline)
			{
				this.nowTemperature.Font.Underline = false;
				button.BackColor = Control.DefaultBackColor;
			}
			else
			{
				this.nowTemperature.Font.Underline = true;
				button.BackColor = System.Drawing.Color.LightBlue;
			}
			this.RedrawSubarea();
		}

		private void temperatureColorComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (comboBox.SelectedIndex == -1)
			{
				return;
			}
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTemperature.ForeColor = formMain.FromIndexToColor(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void temperatureLineModelComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			this.nowTemperature.LineStyle = (LedTemperatureLineStyle)comboBox.SelectedIndex;
			this.RedrawSubarea();
		}

		private void temperatureContentTextBox_TextChanged(object sender, EventArgs e)
		{
			TextBox textBox = (TextBox)sender;
			if (!textBox.Focused)
			{
				return;
			}
			this.nowTemperature.TemperatureBackground.ToolTip = textBox.Text;
			this.RedrawSubarea();
		}

		private void temperatureIsUseContentCheckBox_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox checkBox = (CheckBox)sender;
			if (!checkBox.Focused)
			{
				return;
			}
			this.nowTemperature.TemperatureBackground.ToolTipEnabled = checkBox.Checked;
			this.temperatureContentTextBox.Enabled = checkBox.Checked;
			this.RedrawSubarea();
		}

		private void temperatureDegreeUnitComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (!formMain.IsforeignTradeMode)
			{
				this.nowTemperature.TemperatureUnit.UnitStyle = (LedTemperatureUnitStyle)comboBox.SelectedIndex;
			}
			else if (comboBox.SelectedIndex >= 1)
			{
				this.nowTemperature.TemperatureUnit.UnitStyle = comboBox.SelectedIndex + LedTemperatureUnitStyle.Degree_CHN;
			}
			else
			{
				this.nowTemperature.TemperatureUnit.UnitStyle = (LedTemperatureUnitStyle)comboBox.SelectedIndex;
			}
			this.RedrawSubarea();
		}

		private void temperatureMaxDegreeNumericUpDown_Click(object sender, EventArgs e)
		{
		}

		private void temperatureMinDegreeNumericUpDown_Click(object sender, EventArgs e)
		{
		}

		private void temperatureAlarmType_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void temperatureAlarmOutput_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void WeatherShowParam()
		{
			this.weatherEditor1.Edit(this.nowWeather);
			this.contentBackgroundSettingGroupBox.BringToFront();
		}

		private void StringShowParam()
		{
			this.stringEditor1.Edit(this.nowString);
			this.contentBackgroundSettingGroupBox.BringToFront();
		}

		public void Display_changeLanguage()
		{
			try
			{
				Dictionary<string, string> arg_05_0 = MulitLanguageFresher.Language_Display;
				MessageBoxManager.OK = formMain.ML.GetStr("Global_Messagebox_OK");
				MessageBoxManager.Cancel = formMain.ML.GetStr("Global_Messagebox_Cancel");
				MessageBoxManager.Yes = formMain.ML.GetStr("Global_Messagebox_OK");
				MessageBoxManager.No = formMain.ML.GetStr("Global_Messagebox_Cancel");
				this.lblRunMode.Text = formMain.ML.GetStr("formMain_Label_RunMode");
				this.fileToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_file");
				this.openProjectToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_file_OpenPro");
				this.newPorjectToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_file_NewPro");
				this.projectSavaAsToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_file_SaveAs");
				this.exitToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_file_exit");
				this.editMenuToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit");
				this.addItemToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddProgram");
				this.addTextToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddSubtitle");
				this.addAnimationToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddAnimation");
				this.addMarqueeToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddPhoto");
				this.addClockToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddTime");
				this.addDialToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddDial");
				this.addLunarToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddLunar");
				this.addMenuToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddTiming");
				this.addTemperatureToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddTemperature");
				this.addWeatherToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddWeather");
				this.addStringToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddString");
				this.addHumidityToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddHumidity");
				this.addNoiseToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddNoise");
				this.deleteSelectionToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_RemoveTheOption");
				this.gPRSManagementToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_GPRS_Management");
				this.EditPublicTextToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddPublicText");
				this.EditDataSourceToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddDataSource");
				this.EditStringLibraryToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_edit_AddStringLibrary");
				this.setingMenuToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings");
				this.panelSettingToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_ScreenSettings");
				this.luminanceSettingToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_BrightnessSetting");
				this.timingRegulateToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_CheckHours");
				this.turnOfToolStripMenuItem2.Text = formMain.ML.GetStr("formMain_Menu_Settings_ForcedShutdown");
				this.turnOnToolStripMenuItem1.Text = formMain.ML.GetStr("formMain_Menu_Settings_ForcedBoot");
				this.autoStartAndCloseToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_TimingSwitch");
				this.buttonFunctionConfigurationToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_ButtonFunctionConfiguration");
				this.queryPanelStateToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_QueryPanelState");
				this.tsmiEthernetSettings.Text = formMain.ML.GetStr("formMain_Menu_Settings_EthernetAdvanced");
				this.tsmiGPRSSettings.Text = formMain.ML.GetStr("formMain_Menu_Settings_GPRSAdvanced");
				this.serialTestToolStripMenuItem3.Text = formMain.ML.GetStr("formMain_Menu_Settings_SerialTestingTools");
				this.configToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_SystemSettings");
				this.ethernetUpdateToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_NetworkProgramUpgrade");
				this.uSBUpdateToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_U_Disk_ProgramUpgrade");
				this.SendAll_ReSend_ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_AllSent");
				this.gprsSendToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_GPRS_Sending");
				this.saveWifiDataToolStripMenuItemToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Settings_SaveTheWifiForwardingData");
				this.timeSequenceToolStripMenuItem.Text = formMain.ML.GetStr("formTimeSequence_FormText");
				this.tsmiGroup.Text = formMain.ML.GetStr("formMain_Menu_Group");
				this.tsmiLocalServerSetting.Text = formMain.ML.GetStr("formMain_Menu_Group_LocalServerSettings");
				this.tsmiCloudLogin.Text = formMain.ML.GetStr("formMain_Menu_Group_CloudServerLogin");
				this.tsmiCloudLogout.Text = formMain.ML.GetStr("formMain_Menu_Group_CloudServerLogout");
				this.tsmiCloudRegister.Text = formMain.ML.GetStr("formMain_Menu_Group_CloudServerRegister");
				this.tsmiCloudQueryReview.Text = formMain.ML.GetStr("formMain_Menu_Group_CloudServerQueryReview");
				this.tsmiCloudManagement.Text = formMain.ML.GetStr("formMain_Menu_Group_CloudServerManagement");
				this.tsmiGroupLuminance.Text = formMain.ML.GetStr("formMain_Menu_Group_GroupLuminance");
				this.tsmiGroupTiming.Text = formMain.ML.GetStr("formMain_Menu_Group_GroupTiming");
				this.tsmiGroupPowerOff.Text = formMain.ML.GetStr("formMain_Menu_Group_GroupPowerOff");
				this.tsmiGroupPowerOn.Text = formMain.ML.GetStr("formMain_Menu_Group_GroupPowerOn");
				this.tsmiGroupTimerSwitch.Text = formMain.ML.GetStr("formMain_Menu_Group_GroupTimerSwitch");
				this.tsmiGroupSending.Text = formMain.ML.GetStr("formMain_Menu_Group_GroupSending");
				this.languateSelectToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Language");
				this.multiLanguageTemplatetoolStripMenuItem1.Text = formMain.ML.GetStr("formMain_Menu_Language_Multi_Language");
				this.skinSelectToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin");
				this.Skin_DefaultToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin_Default");
				this.skin1ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin_Custom_1");
				this.skinClassic1ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin_Nostalgia_1");
				this.skinClassic2ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin_Nostalgia_2");
				this.skinClassic3ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin_Nostalgia_3");
				this.skinXPBlueToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin_XP_Blue");
				this.skinXPSilverToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin_XP_Silver");
				this.skinXPOliveGreenToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_skin_XP_OliveGreen");
				this.helpToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_help");
				this.helpdocToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_help_File");
				this.softwareUpdateToolStripMenuItem.Text = formMain.ML.GetStr("formSoftwareUpdate_FormText");
				this.aboutToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_help_about");
				this.testStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Test");
				this.getSetting.Text = formMain.ML.GetStr("formMain_Menu_Test_GetParameters");
				this.TestToolStripMenuItem.Text = formMain.ML.GetStr("formMain_Menu_Test_form");
				this.zhToolButton_Open_Text.Text = formMain.ML.GetStr("formMain_PictureButton_OpenFile");
				this.zhToolButton_Item_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Program");
				this.zhToolButton_Text_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Subtitle");
				this.zhToolButton_Animation_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Animation");
				this.zhToolButton_Marquee_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Photo");
				this.zhToolButton_Clock_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Time");
				this.zhToolButton_Dial_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Dial");
				this.zhToolButton_Counter_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Timing");
				this.zhToolButton_Lunar_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Lunar");
				this.zhToolButton_Temperature_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Temperature");
				this.zhToolButton_Weather_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Weather");
				this.zhToolButton_String_Text.Text = formMain.ML.GetStr("formMain_PictureButton_String");
				this.zhToolButton_Humidity_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Humidity");
				this.zhToolButton_Noise_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Noise");
				this.zhToolButton_Score_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Score");
				this.zhToolButton_Delete_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Delete");
				this.zhToolButton_FindDevice_Text.Text = formMain.ML.GetStr("formMain_PictureButton_LookFor");
				this.zhToolButton_FindDeviceWifi_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Wifi");
				this.zhToolButton_Play_Text.Text = formMain.ML.GetStr("formMain_PictureButton_Preview");
				this.zhToolButton_Send_Text.Text = formMain.ML.GetStr("formMain_PictureButton_send");
				this.zhToolButton_Usb_Text.Text = formMain.ML.GetStr("formMain_PictureButton_U_Disk");
				this.groupBox1.Text = formMain.ML.GetStr("formMain_Panel_GroupBox_Screen_Properties");
				this.label1.Text = formMain.ML.GetStr("formMain_Panel_GroupBox_Screen_Description");
				this.label2.Text = formMain.ML.GetStr("formMain_Panel_GroupBox_Screen_Size");
				this.label5.Text = formMain.ML.GetStr("formMain_Panel_GroupBox_Screen_CommunicationMethod");
				this.label7.Text = formMain.ML.GetStr("formMain_Panel_GroupBox_Screen_CardInformation");
				this.label10.Text = formMain.ML.GetStr("formMain_Panel_GroupBox_Screen_ProgramsNumber");
				this.groupBox11.Text = formMain.ML.GetStr("formMain_Panel_GroupBox_Program_List");
				this.ItemAttribute.Text = formMain.ML.GetStr("formMain_Panel_Program_Attributes");
				this.label8.Text = formMain.ML.GetStr("formMain_Panel_Program_Name");
				this.label12.Text = formMain.ML.GetStr("formMain_Panel_Program_PartitionsNumber");
				this.itemClosedCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Program_Close");
				this.itemLockedCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Program_locking");
				this.itemByPeroidCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Program_Timed_Playback");
				this.label14.Text = formMain.ML.GetStr("formMain_Panel_Playback_Mode");
				this.itemByNumRadioButton.Text = formMain.ML.GetStr("formMain_Panel_Playback_ByNumber");
				this.itemByTimeLengthRadioButton.Text = formMain.ML.GetStr("formMain_Panel_Playback_ByDuration");
				this.itemByAstTimerRadioButton.Text = formMain.ML.GetStr("formMain_Panel_Playback_ByASTClock");
				this.label20.Text = formMain.ML.GetStr("formMain_Panel_Playback_PlayDuration");
				this.label16.Text = formMain.ML.GetStr("formMain_Panel_Playback_Day");
				this.label17.Text = formMain.ML.GetStr("formMain_Panel_Playback_Hour");
				this.label18.Text = formMain.ML.GetStr("formMain_Panel_Playback_Minute");
				this.label19.Text = formMain.ML.GetStr("formMain_Panel_Playback_second");
				this.itemPlayTimerByWeekRadioButton.Text = formMain.ML.GetStr("formMain_Panel_Playback_ByWeek");
				this.itemPlayTimerByDateRadioButton.Text = formMain.ML.GetStr("formMain_Panel_Playback_ByDate");
				this.itemPlayTimerEverydayRadioButton.Text = formMain.ML.GetStr("formMain_Panel_Playback_EveryDay");
				this.itemTimerWeekMondayCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Playback_Monday");
				this.itemTimerWeekTuesdayCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Playback_Tuesday");
				this.itemTimerWeekWednesdayCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Playback_Wednesday");
				this.itemTimerWeekThursdayCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Playback_Thursday");
				this.itemTimerWeekFridayCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Playback_Friday");
				this.itemTimerWeekSaturdayCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Playback_Saturday");
				this.itemTimerWeekSundayCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Playback_Sunday");
				this.label9.Text = formMain.ML.GetStr("formMain_Panel_Playback_To");
				this.label_Item_DateTo.Text = formMain.ML.GetStr("formMain_Panel_Playback_To");
				this.itemBackgroundSettingGroupBox.Text = formMain.ML.GetStr("formMain_Panel_ProgramBackground_Settings");
				this.zhGroupBoxItemBackground.Text = formMain.ML.GetStr("formMain_Panel_ProgramBackground_Settings");
				this.itemBackgroundIsUse.Text = formMain.ML.GetStr("formMain_Panel_ProgramBackground_UseBackground");
				this.label26.Text = formMain.ML.GetStr("formMain_Panel_ProgramBackground_Effect");
				this.label21.Text = formMain.ML.GetStr("formMain_Panel_ProgramBackground_Speed");
				this.itemBackgroundSelectButton.Text = formMain.ML.GetStr("formMain_Panel_ProgramBackground_Customize");
				this.subareaEdgeSetting.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_Settings");
				this.edgeUseEdge.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_UseRunEdge");
				this.edgeListLabel.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_RunEdge");
				this.edgeModeLabel.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_Mode");
				this.edgeSpeedLabel.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_Speed");
				this.itemEdgeSettingGroupBox.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_Settings");
				this.itemUseEdge.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_UseRunEdge");
				this.itemEdgeListLabel.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_RunEdge");
				this.itemEdgeModeLabel.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_Mode");
				this.itemEdgeSpeedLabel.Text = formMain.ML.GetStr("formMain_Panel_RunEdge_Speed");
				this.subareaAttribute.Text = formMain.ML.GetStr("formMain_Panel_Partition_Properties");
				this.subareaLabel21.Text = formMain.ML.GetStr("formMain_Panel_Partition_Name");
				this.subareaLabelX.Text = formMain.ML.GetStr("formMain_Panel_Partition_X_Coordinate");
				this.subareaLabelY.Text = formMain.ML.GetStr("formMain_Panel_Partition_Y_Coordinate");
				this.subareaLabelWidth.Text = formMain.ML.GetStr("formMain_Panel_Partition_Width");
				this.subareaLabelHeight.Text = formMain.ML.GetStr("formMain_Panel_Partition_Height");
				this.subareaEffectSetting.Text = formMain.ML.GetStr("formMain_Panel_Stunt_Display");
				this.effectLabelEntryEntry.Text = formMain.ML.GetStr("formMain_Panel_Stunt_Enter");
				this.effectLabelEntrySpeed.Text = formMain.ML.GetStr("formMain_Panel_Stunt_EnterSpeed");
				this.effectLabelSpeedExit.Text = formMain.ML.GetStr("formMain_Panel_Stunt_DropOut");
				this.effectLabelSpeedExitSpeed.Text = formMain.ML.GetStr("formMain_Panel_Stunt_DropOutSpeed");
				this.label24.Text = formMain.ML.GetStr("formMain_Panel_Stunt_Stay");
				this.contentBackgroundSettingGroupBox.Text = formMain.ML.GetStr("formMain_Panel_ContentBackground_Settings");
				this.zhGroupBoxContentBackground.Text = formMain.ML.GetStr("formMain_Panel_ContentBackground_Settings");
				this.contentBackgroundIsUse.Text = formMain.ML.GetStr("formMain_Panel_ContentBackground_UseBackground");
				this.label30.Text = formMain.ML.GetStr("formMain_Panel_ContentBackground_Effect");
				this.label29.Text = formMain.ML.GetStr("formMain_Panel_ContentBackground_Speed");
				this.contentBackgroundSelect.Text = formMain.ML.GetStr("formMain_Panel_ContentBackground_Customize");
				this.textAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Subtitle_Properties");
				this.WeatherEffectSettingzhGroupBox.Text = formMain.ML.GetStr("formMain_Panel_WeatherEffects_Settings");
				this.lblWeatherEntryMode.Text = formMain.ML.GetStr("formMain_Panel_Stunt_Enter");
				this.lblWeatherEntrySpeed.Text = formMain.ML.GetStr("formMain_Panel_Stunt_EnterSpeed");
				this.lblWeatherStay.Text = formMain.ML.GetStr("formMain_Panel_Stunt_Stay");
				this.StringEffectSettingzhGroupBox.Text = formMain.ML.GetStr("formMain_Panel_StringEffects_Settings");
				this.lblStringEntryMode.Text = formMain.ML.GetStr("formMain_Panel_Stunt_Enter");
				this.lblStringEntrySpeed.Text = formMain.ML.GetStr("formMain_Panel_Stunt_EnterSpeed");
				this.lblStringStay.Text = formMain.ML.GetStr("formMain_Panel_Stunt_Stay");
				this.AnimationEffectSettingzhGroupBox.Text = formMain.ML.GetStr("formMain_Panel_AnimationEffects_Settings");
				this.animationAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Animation_Properties");
				this.animationEditor1.Controls["startPreviewButton"].Text = formMain.ML.GetStr("formMain_Panel_Animation_OpenPreview");
				this.marqueeAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Graphic_Attributes");
				this.marqueeEdit.Text = formMain.ML.GetStr("formMain_Menu_edit");
				this.marqueeConText.Text = formMain.ML.GetStr("formMain_Panel_Graphic_Single_Line_Text");
				this.marqueeConRichText.Text = formMain.ML.GetStr("formMain_Panel_Graphic_Multiple_LinesOf_Text");
				this.marqueeConFlash.Text = formMain.ML.GetStr("formMain_Panel_Graphic_Animation");
				this.marqueeConGrid.Text = formMain.ML.GetStr("formMain_Panel_Graphic_Table");
				this.marqueeConGif.Text = formMain.ML.GetStr("formMain_Panel_Graphic_ImportAnimation");
				this.marqueeConPicture.Text = formMain.ML.GetStr("formMain_Panel_Graphic_ImportImage");
				this.marqueeConWord.Text = formMain.ML.GetStr("formMain_Panel_Graphic_ImportWord");
				this.marqueeConExcel.Text = formMain.ML.GetStr("formMain_Panel_Graphic_ImportExcel");
				this.marqueDeleteButton.Text = formMain.ML.GetStr("formMain_Panel_Graphic_Delete");
				this.marqueePublicText.Text = formMain.ML.GetStr("Mar_PublicText");
				this.clockAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Time_Attribute");
				this.clockNewFontFamilyLable.Text = formMain.ML.GetStr("formMain_Panel_Time_Fonts");
				this.clockNewSizeLable.Text = formMain.ML.GetStr("formMain_Panel_Time_Font_Size");
				this.clockNewTextLable.Text = formMain.ML.GetStr("formMain_Panel_Time_Text");
				this.lunarAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Lunar_Attribute");
				this.weatherAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Weather_Attribute");
				this.stringAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_String_Attribute");
				this.dialAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Dial_Properties");
				this.dialLabelScaleShape.Text = formMain.ML.GetStr("formMain_Panel_Dial_ScaleStyle");
				this.dialLabelHandStyle.Text = formMain.ML.GetStr("formMain_Panel_Dial_PointerStyle");
				this.label11.Text = formMain.ML.GetStr("formMain_Panel_Dial_JetLag");
				this.dialAreaTextCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Dial_FixedText");
				this.dialConnerTextCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Dial_FourWords");
				this.dialLeftAndRightTextCheckBox.Text = formMain.ML.GetStr("formMain_Panel_Dial_Couplet");
				this.dialLabelFont.Text = formMain.ML.GetStr("formMain_Panel_Dial_Fonts");
				this.dialLabelFontSize.Text = formMain.ML.GetStr("formMain_Panel_Dial_FontSize");
				this.dialLabelHourHandSizePlus.Text = formMain.ML.GetStr("formMain_Panel_Dial_HourHand");
				this.dialLabelMinuteHandSizePlus.Text = formMain.ML.GetStr("formMain_Panel_Dial_MinuteHand");
				this.dialLabelSecondHandWidthPlus.Text = formMain.ML.GetStr("formMain_Panel_Dial_SecondHand");
				this.dialLabelScaleCrossPlus.Text = formMain.ML.GetStr("formMain_Panel_Dial_369PointScale");
				this.dialLabelScaleHourPlus.Text = formMain.ML.GetStr("formMain_Panel_Dial_WholePointScale");
				this.dialLabelScaleMinutePlus.Text = formMain.ML.GetStr("formMain_Panel_Dial_PointScale");
				this.counterAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Timer_Properties");
				this.counterLabelElementsSetting.Text = formMain.ML.GetStr("formMain_Panel_Timer_ContentSettings");
				this.counternewlabel34.Text = formMain.ML.GetStr("formMain_Panel_Timer_PromptContent");
				this.counterLabelStartTime.Text = formMain.ML.GetStr("formMain_Panel_Timer_StartTime");
				this.counterLabelCounterModel.Text = formMain.ML.GetStr("formMain_Panel_Timer_TimekeepingMode");
				this.counterLabelOption.Text = formMain.ML.GetStr("formMain_Panel_Timer_DisplayOptions");
				this.counterOptionYear.Text = formMain.ML.GetStr("formMain_Panel_Timer_Year");
				this.counterLabelTargetMonth.Text = formMain.ML.GetStr("formMain_Panel_Timer_Month");
				this.counterLabelTargetDay.Text = formMain.ML.GetStr("formMain_Panel_Timer_Day");
				this.counterOptionHour.Text = formMain.ML.GetStr("formMain_Panel_Timer_Time");
				this.counterOptionMinute.Text = formMain.ML.GetStr("formMain_Panel_Timer_Minute");
				this.counterTypeUp.Text = formMain.ML.GetStr("formMain_Panel_Timer_ForwardTiming");
				this.counterTypeDown.Text = formMain.ML.GetStr("formMain_Panel_Timer_CountDown");
				this.counterShowUnit.Text = formMain.ML.GetStr("formMain_Panel_Timer_DisplayUnits");
				this.counterOptionDay.Text = formMain.ML.GetStr("formMain_Panel_Timer_Tian");
				this.counterOptionSecond.Text = formMain.ML.GetStr("formMain_Panel_Timer_Second");
				this.counterLabelTargetYear.Text = formMain.ML.GetStr("formMain_Panel_Timer_Year");
				this.counterLabelTargetMinute.Text = formMain.ML.GetStr("formMain_Panel_Timer_Time");
				this.counterLabelTargetSecond.Text = formMain.ML.GetStr("formMain_Panel_Timer_Minute");
				this.temperatureAttributeBox.Text = formMain.ML.GetStr("formMain_Panel_Temperature_Attribute");
				this.temperaturelabel6.Text = formMain.ML.GetStr("formMain_Panel_Temperature_ContentSettings");
				this.temperaturelabel13.Text = formMain.ML.GetStr("formMain_Panel_Temperature_PromptContent");
				this.label_TemperatuUnit.Text = formMain.ML.GetStr("formMain_Panel_Temperature_TemperatureUnit");
				this.panelToolStrip.Items["toolAlignRightLeft"].Text = formMain.ML.GetStr("formMain_ToolStrip_Horizontal_Expansion");
				this.panelToolStrip.Items["toolAlignTopBottom"].Text = formMain.ML.GetStr("formMain_ToolStrip_Vertical_Expansion");
				this.panelToolStrip.Items["toolAlignLeft"].Text = formMain.ML.GetStr("formMain_ToolStrip_DockLeft");
				this.panelToolStrip.Items["toolAlignRight"].Text = formMain.ML.GetStr("formMain_ToolStrip_DockRight");
				this.panelToolStrip.Items["toolAlignTop"].Text = formMain.ML.GetStr("formMain_ToolStrip_DockedUp");
				this.panelToolStrip.Items["toolAlignBottom"].Text = formMain.ML.GetStr("formMain_ToolStrip_DockedDown");
				this.panelToolStrip.Items["toolPrevousPage"].Text = formMain.ML.GetStr("formMain_ToolStrip_PreviousPage");
				this.panelToolStrip.Items["toolNextPage"].Text = formMain.ML.GetStr("formMain_ToolStrip_NextPage");
				this.panelToolStrip.Items["toolUpAdjustButton"].Text = formMain.ML.GetStr("formMain_ToolStrip_Upwards");
				this.panelToolStrip.Items["toolDownAdjustButton"].Text = formMain.ML.GetStr("formMain_ToolStrip_Downwards");
				this.panelToolStrip.Items["toolStretchButton"].Text = formMain.ML.GetStr("formMain_ToolStrip_VerticalStretching");
				this.panelToolStrip.Items["toolNarrowButton"].Text = formMain.ML.GetStr("formMain_ToolStrip_VerticalCompression");
				this.panelToolStrip.Items["maginfyToolsPanel"].Text = formMain.ML.GetStr("formMain_ToolStrip_Enlarge");
				this.panelToolStrip.Items["minifyToolsPanel"].Text = formMain.ML.GetStr("formMain_ToolStrip_Narrow");
				this.panelToolStrip.Items["originalZoonToolsPanel"].Text = formMain.ML.GetStr("formMain_ToolStrip_OriginalSize");
				this.deleteContentContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Partition_DeleteContent");
				this.addSubtitleToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddSubtitle");
				this.addAnimationContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddAnimation");
				this.addMarqueeContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddPhoto");
				this.addClockContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddTime");
				this.addDialContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddDial");
				this.addCounterContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddTiming");
				this.addLunarContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddLunar");
				this.addTemperatureContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddTemperature");
				this.addWeatherContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_Weather");
				this.addStringContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_String");
				this.addHumidityContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddHumidity");
				this.addNoiseContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddNoise");
				this.copyItemContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_CopyProgramTo");
				this.shareItemContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_ShareProgram");
				this.dropItemContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_DeleteProgram");
				this.tsmissAddSubtitle.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddSubtitle");
				this.tsmissAddAnimation.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddAnimation");
				this.tsmissAddPictureText.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddPhoto");
				this.tsmissAddTime.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddTime");
				this.tsmissAddDial.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddDial");
				this.tsmissAddCounter.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddTiming");
				this.tsmissAddLunar.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddLunar");
				this.tsmissAddTemperature.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_AddTemperature");
				this.tsmissAddWeather.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_Weather");
				this.tsmissAddString.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_String");
				this.tsmissCopyItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_CopyProgramTo");
				this.tsmissUnsharedItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_UnshareProgram");
				this.tsmissDeleteItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_DeleteProgram");
				this.tsmisEditSharedItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_EditSharedProgram");
				this.tsmisUnsharedItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_UnshareProgram");
				this.tsmisDeleteItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Program_DeleteProgram");
				this.addItemContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Screen_AddProgram");
				this.exportDataToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Screen_ExportData");
				this.copyPanelItemsContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Screen_CopyPanelItems");
				this.queryStateContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Screen_QueryState");
				this.marqueeReverseToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Graphic_ReversePhase");
				this.deleteMarqueeToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Graphic_Delete");
				this.Add_Marquee_Text_ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Graphic_AddSingleLine");
				this.Add_Marquee_Richtext_ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Graphic_AddMultipleLines");
				this.Add_Marquee_Animation_ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Graphic_AddAnimation");
				this.Add_Marquee_Grid_ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Graphic_AddExcel");
				this.Add_Marquee_Gif_ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Graphic_ImportAnimation");
				this.Add_Marquee_Image_ToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Graphic_ImportImage");
				this.addSubareaContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Item_AddPartition");
				this.deleteItemContentToolStripMenuItem.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Item_DeleteProgram");
				this.exportDataToolStripMenuItem1.Text = formMain.ML.GetStr("formMain_ContextMenuStrip_Item_ExportData");
				this.toolAlignRightLeft.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_Horizontal_Expansion");
				this.toolAlignTopBottom.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_Vertical_Expansion");
				this.toolAlignLeft.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_DockLeft");
				this.toolAlignRight.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_DockRight");
				this.toolAlignTop.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_DockedUp");
				this.toolAlignBottom.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_DockedDown");
				this.toolPrevousPage.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_PreviousPage");
				this.toolNextPage.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_NextPage");
				this.toolUpAdjustButton.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_Upwards");
				this.toolDownAdjustButton.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_Downwards");
				this.toolStretchButton.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_VerticalStretching");
				this.toolNarrowButton.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_VerticalCompression");
				this.maginfyToolsPanel.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_Enlarge");
				this.minifyToolsPanel.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_Narrow");
				this.originalZoonToolsPanel.ToolTipText = formMain.ML.GetStr("formMain_ToolStrip_OriginalSize");
				this.AnimationEffectSettingzhGroupBox.Controls[0].Controls["Animation_label1"].Text = formMain.ML.GetStr("formMain_Panel_AnimationEffects_Effect");
				this.AnimationEffectSettingzhGroupBox.Controls[0].Controls["Animation_label_wordspace"].Text = formMain.ML.GetStr("formMain_Panel_AnimationEffects_WordSpacing");
				this.AnimationEffectSettingzhGroupBox.Controls[0].Controls["Animation_label_Speed"].Text = formMain.ML.GetStr("formMain_Panel_AnimationEffects_Speed");
				this.AnimationEffectSettingzhGroupBox.Controls[0].Controls["Animation_label6_DisplayTimes"].Text = formMain.ML.GetStr("formMain_Panel_AnimationEffects_Views");
				this.textEditor1.Controls["chkCoupletWord"].Text = formMain.ML.GetStr("formMain_Panel_Subtitle_Couplet");
				this.lunarEditor1.Controls["lblFontFamily"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Fonts");
				this.lunarEditor1.Controls["lblFontSize"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Size");
				this.lunarEditor1.Controls["lblText"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Text");
				this.lunarEditor1.Controls["lblChineseEra"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Display_HeavenlyDry");
				this.lunarEditor1.Controls["lblDate"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Display_Lunar");
				this.lunarEditor1.Controls["lblZodiac"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Display_Zodiac");
				this.lunarEditor1.Controls["lblSolarTerm"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Display_SolarTerms");
				formMain.str_item_comboBox(this.lunarEditor1.Controls["cmbLineStyle"], "formMain_ComboBox_Panel_Lunar_Display", null);
				this.weatherEditor1.Controls["lblFontFamily"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Fonts");
				this.weatherEditor1.Controls["lblFontSize"].Text = formMain.ML.GetStr("formMain_Panel_LunarEditor_Size");
				this.weatherEditor1.Controls["lblCityList"].Text = formMain.ML.GetStr("formMain_Panel_Weather_City");
				this.weatherEditor1.Controls["lblCity"].Text = formMain.ML.GetStr("formMain_Panel_Weather_City");
				this.weatherEditor1.Controls["lblMeteorology"].Text = formMain.ML.GetStr("Weather");
				this.weatherEditor1.Controls["lblTemperature"].Text = formMain.ML.GetStr("formMain_Panel_Weather_temperature");
				this.weatherEditor1.Controls["lblAirQuality"].Text = formMain.ML.GetStr("formMain_Panel_Weather_AirQuality");
				this.weatherEditor1.Controls["lblWindDirectionForce"].Text = formMain.ML.GetStr("formMain_Panel_Weather_WindDirectionWind");
				this.weatherEditor1.Controls["lblDisaster"].Text = formMain.ML.GetStr("formMain_Panel_Weather_DisasterWarning");
				this.weatherEditor1.Controls["lblSendibleTemperatureIndex"].Text = formMain.ML.GetStr("formMain_Panel_Weather_BodyTemperatureIndex");
				this.weatherEditor1.Controls["lblColdIndex"].Text = formMain.ML.GetStr("formMain_Panel_Weather_ColdIndex");
				this.weatherEditor1.Controls["lblPollutionIndex"].Text = formMain.ML.GetStr("formMain_Panel_Weather_PollutionIndex");
				this.weatherEditor1.Controls["lblCarwashIndex"].Text = formMain.ML.GetStr("formMain_Panel_Weather_CarWashIndex");
				this.weatherEditor1.Controls["lblAirConditioningIndex"].Text = formMain.ML.GetStr("formMain_Panel_Weather_AirConditioningIndex");
				this.weatherEditor1.Controls["lblDressingIndex"].Text = formMain.ML.GetStr("formMain_Panel_Weather_DressIndex");
				this.weatherEditor1.Controls["lblUltravioletRayIndex"].Text = formMain.ML.GetStr("formMain_Panel_Weather_UVindex");
				this.weatherEditor1.Controls["lblExerciseIndex"].Text = formMain.ML.GetStr("formMain_Panel_Weather_MovementIndex");
				formMain.str_item_comboBox(this.weatherEditor1.Controls["cmbLineStyle"], "formMain_ComboBox_Panel_Lunar_Display", null);
				this.stringEditor1.Controls["lblNumberCount"].Text = formMain.ML.GetStr("formMain_Panel_StringEditor_Label_NumberCount");
				this.stringEditor1.Controls["lblEachNumber"].Text = formMain.ML.GetStr("formMain_Panel_StringEditor_Label_EachNumber");
				this.stringEditor1.Controls["lblNumberCountHint"].Text = formMain.ML.GetStr("formMain_Panel_StringEditor_Label_NumberCountHint");
				this.stringEditor1.Controls["lblEachNumberHint"].Text = formMain.ML.GetStr("formMain_Panel_StringEditor_Label_EachNumberHint");
				this.ItemAttribute.Text = formMain.ML.GetStr("formMain_Panel_Program_Attributes");
				this.label3.Text = formMain.ML.GetStr("formMain_Panel_Playback_PlayTimes");
				this.animationPreviewZhGroupBox.Text = formMain.ML.GetStr("formMain_Panel_Text_Animation_preview");
				this.RefreshZHGroupBox();
				formMain.str_item_comboBox(this.edgeModeComboBox, "formMain_ComboBox_Panel_RunEdge_Mode", null);
				formMain.str_item_comboBox(this.itemEdgeMode, "formMain_ComboBox_Panel_RunEdge_Mode", null);
				formMain.str_item_comboBox(this.clockNewLineModel, "formMain_ComboBox_Panel_Time_Display", null);
				formMain.str_item_comboBox(this.dialComboBoxScaleShape, "formMain_ComboBox_Panel_Dial_ScaleStyle", null);
				formMain.str_item_comboBox(this.dialComboBoxHandStyle, "formMain_ComboBox_Panel_Dial_PointerStyle", null);
				formMain.str_item_comboBox(this.dialConnerTextTextBox, "formMain_ComboBox_Panel_Dial_FourWords", null);
				formMain.str_item_comboBox(this.counterNewLineModel, "formMain_ComboBox_Panel_Timer_Display", null);
				formMain.str_item_comboBox(this.temperatureLineModelComboBox, "formMain_ComboBox_Panel_Temperature_Display", null);
				int num = 0;
				if (this.effectExitType.Items.Count != 0)
				{
					using (List<string>.Enumerator enumerator = MulitLanguageFresher.Language_Control_List["formMain_ComboBox_Panel_SubareaEffect_ExitModel"].GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							string current = enumerator.Current;
							string[] array = new string[1];
							array = current.Split(new char[]
							{
								','
							});
							this.effectExitType.Items[num] = array[0];
							num++;
						}
						goto IL_2844;
					}
				}
				foreach (string current2 in MulitLanguageFresher.Language_Control_List["formMain_ComboBox_Panel_SubareaEffect_ExitModel"])
				{
					string[] array2 = new string[1];
					array2 = current2.Split(new char[]
					{
						','
					});
					this.effectExitType.Items.Add(array2[0]);
				}
				IL_2844:
				num = 0;
				if (this.effectEntryType.Items.Count != 0)
				{
					using (List<string>.Enumerator enumerator3 = MulitLanguageFresher.Language_Control_List["formMain_ComboBox_Panel_SubareaEffect_EntryModel"].GetEnumerator())
					{
						while (enumerator3.MoveNext())
						{
							string current3 = enumerator3.Current;
							string[] array3 = new string[1];
							array3 = current3.Split(new char[]
							{
								','
							});
							this.effectEntryType.Items[num] = array3[0];
							num++;
						}
						goto IL_293C;
					}
				}
				foreach (string current4 in MulitLanguageFresher.Language_Control_List["formMain_ComboBox_Panel_SubareaEffect_EntryModel"])
				{
					string[] array4 = new string[1];
					array4 = current4.Split(new char[]
					{
						','
					});
					this.effectEntryType.Items.Add(array4[0]);
				}
				IL_293C:;
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
			}
		}

		public static string GetSendingCSWDescription(string key, int code)
		{
			string result = formMain.ML.GetStr("Display_CommunicationFailed");
			try
			{
				List<string> list = MulitLanguageFresher.Language_Control_List[key];
				if (list != null && list.Count > 0 && code - 1 < list.Count)
				{
					result = list[code - 1];
				}
			}
			catch
			{
			}
			return result;
		}

		public static void str_item_comboBox(Control item_str, string dic_key, int[] comboBoxIndex = null)
		{
			ComboBox comboBox = (ComboBox)item_str;
			try
			{
				if (comboBox.Items.Count >= MulitLanguageFresher.Language_Control_List[dic_key].Count)
				{
					for (int i = 0; i < comboBox.Items.Count; i++)
					{
						if (comboBoxIndex == null)
						{
							if (i < MulitLanguageFresher.Language_Control_List[dic_key].Count)
							{
								comboBox.Items[i] = MulitLanguageFresher.Language_Control_List[dic_key][i];
							}
						}
						else if (i < MulitLanguageFresher.Language_Control_List[dic_key].Count && Array.IndexOf<int>(comboBoxIndex, i) == -1)
						{
							comboBox.Items[i] = MulitLanguageFresher.Language_Control_List[dic_key][i];
						}
					}
				}
				else
				{
					for (int j = 0; j < MulitLanguageFresher.Language_Control_List[dic_key].Count; j++)
					{
						if (j < MulitLanguageFresher.Language_Control_List[dic_key].Count)
						{
							if (comboBoxIndex == null)
							{
								comboBox.Items[j] = MulitLanguageFresher.Language_Control_List[dic_key][j];
							}
							else if (Array.IndexOf<int>(comboBoxIndex, j) == -1)
							{
								comboBox.Items[j] = MulitLanguageFresher.Language_Control_List[dic_key][j];
							}
						}
					}
				}
			}
			catch
			{
			}
		}

		public static string GetComboBoxString(string dic_key, int index)
		{
			string result = string.Empty;
			List<string> list = MulitLanguageFresher.Language_Control_List[dic_key];
			if (list != null && index < list.Count)
			{
				result = list[index];
			}
			return result;
		}

		private void EditPublicTextToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formEditPublicText formEditPublicText = new formEditPublicText(this);
			formEditPublicText.ShowDialog();
			if (this.nowSubareaHolder != null)
			{
				this.nowSubareaHolder.Redraw();
			}
			else
			{
				using (IEnumerator<LedSubareaHolder> enumerator = this.subareaHolderList.GetEnumerator())
				{
					if (enumerator.MoveNext())
					{
						LedSubareaHolder current = enumerator.Current;
						current.Redraw();
					}
				}
			}
			this.isCloudTerminalMonitorEnabled = true;
			this.HeartbeatProcessing(true);
		}

		private void EditDataSourceToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formDataSource formDataSource = new formDataSource();
			formDataSource.ShowDialog();
			this.isCloudTerminalMonitorEnabled = true;
			this.HeartbeatProcessing(true);
		}

		private void EditStringLibraryToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			if (!formMain.ledsys.SelectedPanel.IsLSeries())
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_NotSupportStringLibrary"));
				this.isCloudTerminalMonitorEnabled = true;
				this.HeartbeatProcessing(true);
				return;
			}
			formStringLibrary formStringLibrary = new formStringLibrary(formMain.ledsys.SelectedPanel.StringLibrary, this);
			formStringLibrary.ShowDialog();
			this.isCloudTerminalMonitorEnabled = true;
			this.HeartbeatProcessing(true);
		}

		private void marqueePublicText_Click(object sender, EventArgs e)
		{
			try
			{
				string text = LedCommon.GetDateTimeNow() + ".rtf";
				LedPText ledPText = new LedPText(text);
				ledPText.Name = formMain.ML.GetStr("Mar_PublicText");
				ledPText.AddEdge(formMain.NewEdgeData());
				formRichtext formRichtext = new formRichtext(this.nowSubarea.Width, true);
				formRichtext.ReDraw += new LedGlobal.LedContentEvent(this.fg_ReDraw);
				RichTextBox richTextBox = new RichTextBox();
				richTextBox.SelectAll();
				richTextBox.SelectionColor = System.Drawing.Color.Red;
				richTextBox.SelectionBackColor = System.Drawing.Color.Black;
				richTextBox.SaveFile(formMain.ledsys.SelectedPanel.GetSaveDirectory() + text);
				this.nowMarquee.AddContent(ledPText);
				this.MarqueeListContentList();
				this.marqueeContentListBox.SelectedIndex = this.nowMarquee.SelectedIndex;
				this.MarqueeChangeContent(this.nowMarquee.SelectedIndex);
				formRichtext.Edit(formMain.ledsys.SelectedPanel.GetSaveDirectory() + text, ledPText);
			}
			catch
			{
			}
		}

		private void marqueeEdit_Click(object sender, EventArgs e)
		{
			int selectedIndex = this.marqueeContentListBox.SelectedIndex;
			if (selectedIndex != -1)
			{
				this.HeartbeatProcessing(false);
				if (selectedIndex != this.nowMarquee.SelectedIndex)
				{
					this.MarqueeEditContent(selectedIndex, true);
				}
				else
				{
					this.MarqueeEditContent(selectedIndex, false);
				}
				this.HeartbeatProcessing(true);
			}
		}

		private void cmbWeatherEntryMode_SelectedIndexChanged(object sender, EventArgs e)
		{
			this.toolTip1.Hide(this);
		}

		private void cmbWeatherEntryMode_DrawItem(object sender, DrawItemEventArgs e)
		{
			try
			{
				if (e.Index > -1 && this.cmbWeatherEntryMode.Items.Count > 0)
				{
					e.DrawBackground();
					e.Graphics.DrawString(this.cmbWeatherEntryMode.Items[e.Index].ToString(), e.Font, System.Drawing.Brushes.Black, e.Bounds);
					if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
					{
						int arg_7C_0 = Cursor.Position.X;
						int arg_8B_0 = base.Location.X;
						int arg_99_0 = Cursor.Position.Y;
						int arg_A8_0 = base.Location.Y;
					}
					e.DrawFocusRectangle();
				}
			}
			catch
			{
			}
		}

		private void cmbWeatherEntryMode_DropDownClosed(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowWeather.EffectsSetting.EntryMode = (byte)comboBox.SelectedIndex;
			this.SetWeatherEffectStayEnable(comboBox.SelectedIndex);
			this.RedrawSubarea();
		}

		private void cmbWeatherEntrySpeed_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowWeather.EffectsSetting.EntrySpeed = (byte)int.Parse(comboBox.Text);
		}

		private void cmbWeatherStay_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			int stay = (int)(Convert.ToSingle(comboBox.Text.Remove(comboBox.Text.Length - 1)) * 1000f);
			this.nowWeather.EffectsSetting.Stay = stay;
			this.nowWeather.EffectsSetting.StayIndex = comboBox.SelectedIndex;
		}

		private void cmbStringEntryMode_DrawItem(object sender, DrawItemEventArgs e)
		{
			try
			{
				if (e.Index > -1 && this.cmbStringEntryMode.Items.Count > 0)
				{
					e.DrawBackground();
					e.Graphics.DrawString(this.cmbStringEntryMode.Items[e.Index].ToString(), e.Font, System.Drawing.Brushes.Black, e.Bounds);
					if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
					{
						int arg_7C_0 = Cursor.Position.X;
						int arg_8B_0 = base.Location.X;
						int arg_99_0 = Cursor.Position.Y;
						int arg_A8_0 = base.Location.Y;
					}
					e.DrawFocusRectangle();
				}
			}
			catch
			{
			}
		}

		private void cmbStringEntryMode_DropDownClosed(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowString.EffectsSetting.EntryMode = (byte)comboBox.SelectedIndex;
			this.RedrawSubarea();
		}

		private void cmbStringEntryMode_SelectedIndexChanged(object sender, EventArgs e)
		{
			this.toolTip1.Hide(this);
		}

		private void cmbStringEntrySpeed_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			this.nowString.EffectsSetting.EntrySpeed = (byte)int.Parse(comboBox.Text);
		}

		private void cmbStringStay_SelectedIndexChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (!comboBox.Focused)
			{
				return;
			}
			if (this.isLoadingParm)
			{
				return;
			}
			int stay = (int)(Convert.ToSingle(comboBox.Text.Remove(comboBox.Text.Length - 1)) * 1000f);
			this.nowString.EffectsSetting.Stay = stay;
			this.nowString.EffectsSetting.StayIndex = comboBox.SelectedIndex;
		}

		public bool MaterialPathStatus()
		{
			return Directory.Exists(LedCommonConst.MaterialPath) && Directory.Exists(LedCommonConst.MaterialGifPath) && Directory.Exists(LedCommonConst.MaterialSwfPath) && Directory.Exists(LedCommonConst.MaterialImagePath) && Directory.Exists(LedCommonConst.MaterialPreviewPath) && File.Exists(LedCommonConst.MaterialInfoPath);
		}

		public bool JudgmentFormat(string materialName, string[] formats)
		{
			for (int i = 0; i < formats.Length; i++)
			{
				string b = formats[i];
				if (Path.GetExtension(materialName) == b)
				{
					return true;
				}
			}
			return false;
		}

		public IList<LedMaterial> ReadMaterialXml()
		{
			IList<LedMaterial> list = new List<LedMaterial>();
			IList<LedMaterial> result;
			try
			{
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.Load(LedCommonConst.MaterialInfoPath);
				XmlElement documentElement = xmlDocument.DocumentElement;
				XmlNodeList childNodes = documentElement.ChildNodes;
				foreach (XmlNode xmlNode in childNodes)
				{
					list.Add(new LedMaterial
					{
						Name = xmlNode.Name,
						SourceWidth = int.Parse(xmlNode.Attributes["SourceWidth"].Value),
						SourceHeight = int.Parse(xmlNode.Attributes["SourceHeight"].Value),
						Type = (LedMaterialType)byte.Parse(xmlNode.Attributes["Type"].Value)
					});
				}
				result = list;
			}
			catch
			{
				File.Delete(LedCommonConst.MaterialInfoPath);
				this.CreateMaterialXml();
				result = list;
			}
			return result;
		}

		public void InquireMaterialFile()
		{
			DirectoryInfo directoryInfo = new DirectoryInfo(LedCommonConst.MaterialPreviewPath);
			FileInfo[] files = directoryInfo.GetFiles();
			IList<string> list = new List<string>();
			IList<string> list2 = new List<string>();
			IList<string> list3 = new List<string>();
			IList<LedMaterial> list4 = this.ReadMaterialXml();
			if (list4 != null)
			{
				foreach (LedMaterial current in list4)
				{
					list3.Add(current.Name);
				}
			}
			FileInfo[] array = files;
			for (int i = 0; i < array.Length; i++)
			{
				FileInfo fileInfo = array[i];
				if (this.JudgmentFormat(fileInfo.Name, new string[]
				{
					".bmp"
				}))
				{
					list2.Add(Path.GetFileNameWithoutExtension(fileInfo.Name));
				}
			}
			DirectoryInfo directoryInfo2 = new DirectoryInfo(LedCommonConst.MaterialSwfPath);
			FileInfo[] files2 = directoryInfo2.GetFiles();
			FileInfo[] array2 = files2;
			for (int j = 0; j < array2.Length; j++)
			{
				FileInfo fileInfo2 = array2[j];
				if (this.JudgmentFormat(fileInfo2.Name, new string[]
				{
					".swf"
				}))
				{
					list.Add(fileInfo2.Name);
				}
			}
			DirectoryInfo directoryInfo3 = new DirectoryInfo(LedCommonConst.MaterialGifPath);
			FileInfo[] files3 = directoryInfo3.GetFiles();
			FileInfo[] array3 = files3;
			for (int k = 0; k < array3.Length; k++)
			{
				FileInfo fileInfo3 = array3[k];
				if (this.JudgmentFormat(fileInfo3.Name, new string[]
				{
					".gif"
				}))
				{
					list.Add(fileInfo3.Name);
				}
			}
			DirectoryInfo directoryInfo4 = new DirectoryInfo(LedCommonConst.MaterialImagePath);
			FileInfo[] files4 = directoryInfo4.GetFiles();
			FileInfo[] array4 = files4;
			for (int l = 0; l < array4.Length; l++)
			{
				FileInfo fileInfo4 = array4[l];
				if (this.JudgmentFormat(fileInfo4.Name, new string[]
				{
					".jpg",
					".bmp",
					".png"
				}))
				{
					list.Add(fileInfo4.Name);
				}
			}
			IList<string> list5 = new List<string>();
			for (int m = 0; m < list.Count; m++)
			{
				list5.Add(list[m].Replace(".", ""));
			}
			if (list.Count != 0)
			{
				if (this.IsArraySubset(list5, list2) && this.IsArraySubset(list3, list))
				{
					this.ExtractXmlData(list2);
					return;
				}
				if (this.IsArraySubset(list, list3))
				{
					this.ExtractXmlData(list2);
					return;
				}
				LedGlobal.LedMaterialList = new List<LedMaterial>();
				this.RemoveAllMaterialNode();
				using (IEnumerator<string> enumerator2 = list.GetEnumerator())
				{
					while (enumerator2.MoveNext())
					{
						string current2 = enumerator2.Current;
						string text = current2.Replace(".", "");
						LedMaterial ledMaterial = new LedMaterial();
						ledMaterial.Name = current2;
						if (current2.Contains(".swf"))
						{
							ledMaterial.Type = LedMaterialType.Flash;
						}
						else if (current2.Contains(".gif"))
						{
							ledMaterial.Type = LedMaterialType.Gif;
						}
						else if (current2.Contains(".png") || current2.Contains(".bmp") || current2.Contains(".jpg"))
						{
							ledMaterial.Type = LedMaterialType.image;
						}
						if (list2.Contains(text))
						{
							ledMaterial.MaterialPreview = System.Drawing.Image.FromFile(LedCommonConst.MaterialPreviewPath + text + ".bmp");
							this.WriteMaterialsXML(ledMaterial);
							LedGlobal.LedMaterialList.Add(ledMaterial);
							formBackgroundEffectSelecter.LoadedMaterials.Add(ledMaterial.Name, ledMaterial);
						}
						else
						{
							ledMaterial.MaterialPreview = Resources.Material_PreviewNull;
							this.WriteMaterialsXML(ledMaterial);
							LedGlobal.LedMaterialList.Add(ledMaterial);
							formBackgroundEffectSelecter.LoadedMaterials.Add(ledMaterial.Name, ledMaterial);
						}
					}
					return;
				}
			}
			this.FillMaterials();
		}

		public void NewFolder(string filepath)
		{
			if (Directory.Exists(filepath))
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(filepath);
				directoryInfo.Delete(true);
			}
			Directory.CreateDirectory(filepath);
		}

		public void FillMaterials()
		{
			this.NewFolder(LedCommonConst.MaterialPath);
			Directory.CreateDirectory(LedCommonConst.MaterialSwfPath);
			Directory.CreateDirectory(LedCommonConst.MaterialGifPath);
			Directory.CreateDirectory(LedCommonConst.MaterialImagePath);
			Directory.CreateDirectory(LedCommonConst.MaterialPreviewPath);
			this.CreateMaterialXml();
			BinaryFormatter binaryFormatter = new BinaryFormatter();
			Stream serializationStream = new MemoryStream(Resources.MaterialResources);
			LedGlobal.LedMaterialList = (IList<LedMaterial>)binaryFormatter.Deserialize(serializationStream);
			foreach (LedMaterial current in LedGlobal.LedMaterialList)
			{
				formBackgroundEffectSelecter.LoadedMaterials.Add(current.Name, current);
				if (current.Type == LedMaterialType.Flash)
				{
					File.WriteAllBytes(LedCommonConst.MaterialSwfPath + current.Name, current.MaterialFileData);
				}
				else if (current.Type == LedMaterialType.Gif)
				{
					File.WriteAllBytes(LedCommonConst.MaterialGifPath + current.Name, current.MaterialFileData);
				}
				current.MaterialPreview.Save(LedCommonConst.MaterialPreviewPath + Path.GetFileName(current.Name).Replace(".", "") + ".bmp");
			}
			this.RewriteMaterialsXML();
		}

		public bool IsArraySubset(IList<string> arrayA, IList<string> arrayB)
		{
			foreach (string current in arrayB)
			{
				if (!arrayA.Contains(current))
				{
					bool result = false;
					return result;
				}
			}
			foreach (string current2 in arrayA)
			{
				if (!arrayB.Contains(current2))
				{
					bool result = false;
					return result;
				}
			}
			return true;
		}

		public void CreateMaterialXml()
		{
			try
			{
				XmlDocument xmlDocument = new XmlDocument();
				XmlElement newChild = xmlDocument.CreateElement("Material");
				xmlDocument.AppendChild(newChild);
				xmlDocument.Save(LedCommonConst.MaterialInfoPath);
			}
			catch
			{
			}
		}

		public bool RewriteMaterialsXML()
		{
			XmlDocument xmlDocument = new XmlDocument();
			bool result;
			try
			{
				xmlDocument.Load(LedCommonConst.MaterialInfoPath);
				foreach (LedMaterial current in LedGlobal.LedMaterialList)
				{
					XmlElement xmlElement = xmlDocument.CreateElement(current.Name);
					xmlElement.SetAttribute("SourceWidth", current.SourceWidth.ToString());
					xmlElement.SetAttribute("SourceHeight", current.SourceHeight.ToString());
					xmlElement.SetAttribute("Type", ((byte)current.Type).ToString());
					xmlDocument.DocumentElement.AppendChild(xmlElement);
				}
				xmlDocument.Save(LedCommonConst.MaterialInfoPath);
				result = true;
			}
			catch
			{
				result = false;
			}
			return result;
		}

		public void RemoveAllMaterialNode()
		{
			XmlDocument xmlDocument = new XmlDocument();
			try
			{
				xmlDocument.Load(LedCommonConst.MaterialInfoPath);
				XmlElement xmlElement = (XmlElement)xmlDocument.SelectSingleNode("Material");
				xmlElement.RemoveAll();
				xmlDocument.Save(LedCommonConst.MaterialInfoPath);
			}
			catch
			{
			}
		}

		public bool WriteMaterialsXML(LedMaterial materialnode)
		{
			XmlDocument xmlDocument = new XmlDocument();
			xmlDocument.Load(LedCommonConst.MaterialInfoPath);
			bool result;
			try
			{
				XmlNode documentElement = xmlDocument.DocumentElement;
				XmlElement xmlElement = xmlDocument.CreateElement(materialnode.Name);
				xmlElement.SetAttribute("SourceWidth", materialnode.SourceWidth.ToString());
				xmlElement.SetAttribute("SourceHeight", materialnode.SourceHeight.ToString());
				xmlElement.SetAttribute("Type", ((byte)materialnode.Type).ToString());
				documentElement.AppendChild(xmlElement);
				xmlDocument.Save(LedCommonConst.MaterialInfoPath);
				result = true;
			}
			catch
			{
				result = false;
			}
			return result;
		}

		public bool ExtractXmlData(IList<string> PreviewList)
		{
			bool result;
			try
			{
				LedGlobal.LedMaterialList = new List<LedMaterial>();
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.Load(LedCommonConst.MaterialInfoPath);
				XmlElement documentElement = xmlDocument.DocumentElement;
				XmlNodeList childNodes = documentElement.ChildNodes;
				foreach (XmlNode xmlNode in childNodes)
				{
					LedMaterial ledMaterial = new LedMaterial();
					ledMaterial.Name = xmlNode.Name;
					ledMaterial.SourceWidth = int.Parse(xmlNode.Attributes["SourceWidth"].Value);
					ledMaterial.SourceHeight = int.Parse(xmlNode.Attributes["SourceHeight"].Value);
					ledMaterial.Type = (LedMaterialType)byte.Parse(xmlNode.Attributes["Type"].Value);
					if (PreviewList.Contains(ledMaterial.Name.Replace(".", "")))
					{
						ledMaterial.MaterialPreview = System.Drawing.Image.FromFile(LedCommonConst.MaterialPreviewPath + xmlNode.Name.Replace(".", "") + ".bmp");
					}
					else
					{
						ledMaterial.MaterialPreview = Resources.Material_PreviewNull;
					}
					LedGlobal.LedMaterialList.Add(ledMaterial);
					formBackgroundEffectSelecter.LoadedMaterials.Add(ledMaterial.Name, ledMaterial);
				}
				result = true;
			}
			catch
			{
				result = false;
			}
			return result;
		}

		private void copyPanelItemsContentToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formPanelSelectForItem formPanelSelectForItem = new formPanelSelectForItem(this.nowPanel);
			if (formPanelSelectForItem.ShowDialog(this) == DialogResult.OK)
			{
				this.AddPanelToTree();
				this.DisplayItem(LedDisplayMode.Load);
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void copyItemContentToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formPanelSelectForItem formPanelSelectForItem = new formPanelSelectForItem(this.nowItem);
			if (formPanelSelectForItem.ShowDialog(this) == DialogResult.OK)
			{
				this.AddPanelToTree();
				this.DisplayItem(LedDisplayMode.Load);
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void shareItemContentToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			string text = string.Empty;
			formSharedItemRename formSharedItemRename = new formSharedItemRename();
			if (formSharedItemRename.ShowDialog(this) == DialogResult.OK)
			{
				text = formSharedItemRename.itemName;
				if (!string.IsNullOrEmpty(text))
				{
					formPanelSelectForItem formPanelSelectForItem = new formPanelSelectForItem(this.nowItem, text);
					if (formPanelSelectForItem.ShowDialog(this) == DialogResult.OK)
					{
						this.AddPanelToTree();
						this.DisplayItem(LedDisplayMode.Load);
					}
				}
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void buttonFunctionConfigurationToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			string text = formMain.ledsys.SelectedPanel.CardType.ToString();
			if (text.IndexOf("5U2L") < 0)
			{
				MessageBox.Show(formMain.ML.GetStr("Prompt_OnlySupport5U2LControlCard"));
				this.HeartbeatProcessing(true);
				this.isCloudTerminalMonitorEnabled = true;
				return;
			}
			formButtonFunctionConfiguration formButtonFunctionConfiguration = new formButtonFunctionConfiguration();
			formButtonFunctionConfiguration.ShowDialog(this);
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void UnsharedItem_Click(object sender, EventArgs e)
		{
			if (this.nowItem != null && (this.nowItem.GetType() == typeof(LedItem) || this.nowItem.GetType() == typeof(LedSharedItem)))
			{
				string b = (this.nowItem.ParentPanel != null) ? this.nowItem.ParentPanel.ID : string.Empty;
				uint iD = this.nowItem.ID;
				for (int i = 0; i < this.nowItem.SharedItemOfPanelIDs.Count; i++)
				{
					string b2 = this.nowItem.SharedItemOfPanelIDs[i];
					int j = 0;
					while (j < formMain.ledsys.Panels.Count)
					{
						LedPanel ledPanel = formMain.ledsys.Panels[j];
						if (ledPanel.ID == b2)
						{
							int num = -1;
							for (int k = 0; k < ledPanel.Items.Count; k++)
							{
								LedItem ledItem = ledPanel.Items[k];
								if (ledItem.ID == this.nowItem.ID)
								{
									num = k;
									break;
								}
							}
							if (num > -1)
							{
								ledPanel.RemoveSharedItem(ledPanel.Items[num]);
								break;
							}
							break;
						}
						else
						{
							j++;
						}
					}
				}
				if (this.nowItem.GetType() == typeof(LedItem))
				{
					this.nowItem.Shared = false;
					this.nowItem.SharedItemOfPanelIDs.Clear();
				}
				else
				{
					this.nowItem = null;
					foreach (LedPanel current in formMain.ledsys.Panels)
					{
						if (current.ID == b)
						{
							using (IEnumerator<LedItem> enumerator2 = current.Items.GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									LedItem current2 = enumerator2.Current;
									if (current2.ID == iD)
									{
										current2.Shared = false;
										break;
									}
								}
								break;
							}
						}
					}
				}
				this.AddPanelToTree();
				this.DisplayItem(LedDisplayMode.Load);
			}
		}

		private void DeleteSharedItem_Click(object sender, EventArgs e)
		{
			if (this.nowItem != null && (this.nowItem.GetType() == typeof(LedItem) || this.nowItem.GetType() == typeof(LedSharedItem)))
			{
				string b = (this.nowItem.ParentPanel != null) ? this.nowItem.ParentPanel.ID : string.Empty;
				uint iD = this.nowItem.ID;
				for (int i = 0; i < this.nowItem.SharedItemOfPanelIDs.Count; i++)
				{
					string b2 = this.nowItem.SharedItemOfPanelIDs[i];
					int j = 0;
					while (j < formMain.ledsys.Panels.Count)
					{
						LedPanel ledPanel = formMain.ledsys.Panels[j];
						if (ledPanel.ID == b2)
						{
							int num = -1;
							for (int k = 0; k < ledPanel.Items.Count; k++)
							{
								LedItem ledItem = ledPanel.Items[k];
								if (ledItem.ID == this.nowItem.ID)
								{
									num = k;
									break;
								}
							}
							if (num > -1)
							{
								ledPanel.RemoveSharedItem(ledPanel.Items[num]);
								break;
							}
							break;
						}
						else
						{
							j++;
						}
					}
				}
				if (this.nowItem.GetType() == typeof(LedItem))
				{
					this.nowPanel.RemoveItem(this.nowItem);
					if (this.nowPanel.Items.Count == 0)
					{
						this.nowItem = null;
						this.DrawScreenBackground();
						this.SetToolsButtonEnable(false);
					}
				}
				else
				{
					int num2 = -1;
					foreach (LedPanel current in formMain.ledsys.Panels)
					{
						if (current.ID == b)
						{
							for (int l = 0; l < current.Items.Count; l++)
							{
								LedItem ledItem2 = current.Items[l];
								if (ledItem2.ID == iD)
								{
									num2 = l;
									break;
								}
							}
							if (num2 <= -1)
							{
								break;
							}
							current.RemoveItem(current.Items[num2]);
							if (current.Items.Count == 0)
							{
								this.nowItem = null;
								this.DrawScreenBackground();
								this.SetToolsButtonEnable(false);
								break;
							}
							break;
						}
					}
				}
				this.AddPanelToTree();
				this.DisplayItem(LedDisplayMode.Load);
			}
		}

		private void EditSharedItem_Click(object sender, EventArgs e)
		{
			if (this.nowItem != null && this.nowItem.GetType() == typeof(LedSharedItem))
			{
				bool flag = false;
				LedPanel parentPanel = this.nowItem.ParentPanel;
				if (parentPanel != null)
				{
					foreach (TreeNode treeNode in this.ledTree.Nodes)
					{
						if (treeNode != null && treeNode.Nodes != null && treeNode.Nodes.Count != 0)
						{
							foreach (TreeNode treeNode2 in treeNode.Nodes)
							{
								if (treeNode2 != null && treeNode2.Tag != null && !(treeNode2.Tag.GetType() != typeof(LedPanel)))
								{
									LedPanel ledPanel = (LedPanel)treeNode2.Tag;
									if (parentPanel.ID == ledPanel.ID)
									{
										foreach (TreeNode treeNode3 in treeNode2.Nodes)
										{
											if (treeNode3 != null && treeNode3.Tag != null && !(treeNode3.Tag.GetType() != typeof(LedItem)))
											{
												LedItem ledItem = (LedItem)treeNode3.Tag;
												if (ledItem.ID == this.nowItem.ID)
												{
													this.SelectSourceSharedItem(treeNode3);
													flag = true;
													break;
												}
											}
										}
										if (flag)
										{
											break;
										}
									}
								}
							}
							if (flag)
							{
								break;
							}
						}
					}
				}
			}
		}

		private void SelectSourceSharedItem(TreeNode newSelectedNode)
		{
			System.Drawing.Color color = System.Drawing.Color.FromArgb(51, 153, 255);
			System.Drawing.Color groupBox_BackColor = Template.GroupBox_BackColor;
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode == newSelectedNode)
			{
				return;
			}
			int level = newSelectedNode.Level;
			if (selectedNode != null)
			{
				int level2 = selectedNode.Level;
				if (level2 >= this.levelGroup)
				{
					selectedNode.BackColor = groupBox_BackColor;
					if (level2 >= this.levelPanel)
					{
						TreeNode parent = selectedNode.Parent;
						TreeNode parent2 = newSelectedNode.Parent;
						if (parent != null && parent2 != parent)
						{
							if (!LedGraphics.EqualsColor(parent.BackColor, groupBox_BackColor))
							{
								parent.BackColor = groupBox_BackColor;
							}
							if (level2 >= this.levelItem)
							{
								TreeNode parent3 = parent.Parent;
								TreeNode treeNode = (parent2 != null) ? parent2.Parent : null;
								if (parent3 != null && treeNode != parent3)
								{
									if (!LedGraphics.EqualsColor(parent3.BackColor, groupBox_BackColor))
									{
										parent3.BackColor = groupBox_BackColor;
									}
									if (level2 == this.levelSubarea)
									{
										TreeNode parent4 = parent3.Parent;
										TreeNode treeNode2 = (treeNode != null) ? treeNode.Parent : null;
										if (parent4 != null && treeNode2 != parent4 && !LedGraphics.EqualsColor(parent4.BackColor, groupBox_BackColor))
										{
											parent4.BackColor = groupBox_BackColor;
										}
									}
								}
							}
						}
					}
				}
				if (level >= this.levelGroup)
				{
					newSelectedNode.BackColor = color;
					if (level >= this.levelPanel)
					{
						TreeNode parent5 = newSelectedNode.Parent;
						if (parent5 != null)
						{
							if (!LedGraphics.EqualsColor(parent5.BackColor, color))
							{
								parent5.BackColor = color;
							}
							if (level >= this.levelItem)
							{
								TreeNode parent6 = parent5.Parent;
								if (parent6 != null)
								{
									if (!LedGraphics.EqualsColor(parent6.BackColor, color))
									{
										parent6.BackColor = color;
									}
									if (level == this.levelSubarea)
									{
										TreeNode parent7 = parent6.Parent;
										if (parent7 != null && !LedGraphics.EqualsColor(parent7.BackColor, color))
										{
											parent7.BackColor = color;
										}
									}
								}
							}
						}
					}
				}
			}
			this.ledTree.SelectedNode = newSelectedNode;
			if (level == this.levelItem)
			{
				this.nowSubarea = null;
				LedItem ledItem = (LedItem)newSelectedNode.Tag;
				TreeNode parent8 = newSelectedNode.Parent;
				LedPanel ledPanel = null;
				if (parent8 != null && parent8.Tag.GetType() == typeof(LedPanel))
				{
					ledPanel = (LedPanel)parent8.Tag;
				}
				if (ledItem != this.nowItem || (ledPanel != null && ledPanel != this.nowPanel))
				{
					this.DisplayItem(newSelectedNode);
				}
				else
				{
					this.itemSubareaNumLabel.Text = this.nowItem.Subareas.Count.ToString();
					this.nowBackGround = formMain.ledsys.SelectedPanel.SelectedItem.Background;
				}
				this.Subarea_DeactiveSubarea();
				this.ShowItemAttribute();
			}
		}

		private void tsmiCloudLogin_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formCloudLogin formCloudLogin = new formCloudLogin();
			formCloudLogin.ShowDialog(this);
			if (formCloudLogin.DialogResult == DialogResult.OK)
			{
				this.StopPreview();
				string userName = LedGlobal.CloudAccount.UserName;
				this.label_Waitting_Picture.Text = formMain.ML.GetStr("Prompt_NowIsSyncingCloudTerminals");
				this.SetWaittingPanelVisable(true);
				Thread.Sleep(200);
				while (this.isCloudTerminalMonitoring)
				{
					Application.DoEvents();
					Thread.Sleep(100);
				}
				this.isCloudLogin = true;
				this.LoadFromCloudXML(string.Format(formMain.projectCloudPath, userName));
				formMain.ledsys.Cloud.LoginState = LedCloudLoginState.Login;
				formMain.ledsys.Cloud.Account = LedGlobal.CloudAccount;
				this.ShowCloudMenu();
				this.ResetCloudInfo();
				this.isCloudSyncing = false;
				Thread thread = new Thread(new ThreadStart(this.CloudTerminals));
				thread.Start();
				Thread.Sleep(100);
				while (this.isCloudSyncing)
				{
					Application.DoEvents();
					Thread.Sleep(100);
				}
				this.AddPanelToTree();
				this.DisplayItem(LedDisplayMode.Load);
				this.SetWaittingPanelVisable(false);
				this.MenuItemMouseLeave(this.tsmiCloudLogout, null);
				this.isCloudTerminalMonitorEnabled = true;
				new Thread(new ThreadStart(this.CloudTerminalMonitor))
				{
					IsBackground = true
				}.Start();
			}
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void tsmiCloudRegister_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			formCloudRegister formCloudRegister = new formCloudRegister(0);
			formCloudRegister.ShowDialog(this);
			this.HeartbeatProcessing(true);
		}

		private void tsmiCloudLogout_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.StopPreview();
			this.label_Waitting_Picture.Text = formMain.ML.GetStr("Prompt_NowIsLogoutingCloud");
			this.SetWaittingPanelVisable(true);
			Thread.Sleep(200);
			this.isCloudTerminalMonitorEnabled = false;
			this.isCloudlogouting = false;
			Thread thread = new Thread(new ThreadStart(this.CloudLogoutProcedure));
			thread.Start();
			Thread.Sleep(100);
			while (this.isCloudlogouting)
			{
				Application.DoEvents();
				Thread.Sleep(100);
			}
			this.AddPanelToTree();
			this.DisplayItem(LedDisplayMode.Load);
			this.SetWaittingPanelVisable(false);
			this.MenuItemMouseLeave(this.tsmiCloudLogout, null);
			this.HeartbeatProcessing(true);
		}

		private void tsmiCloudQueryReview_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formCloudQueryReview formCloudQueryReview = new formCloudQueryReview();
			formCloudQueryReview.ShowDialog(this);
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void tsmiCloudManagement_Click(object sender, EventArgs e)
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			this.StopPreview();
			formCloudManagement formCloudManagement = new formCloudManagement();
			formCloudManagement.ShowDialog(this);
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void tsmiGroupCloud_Click(object sender, EventArgs e)
		{
			TreeNode selectedNode = this.ledTree.SelectedNode;
			if (selectedNode == null)
			{
				return;
			}
			ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem)sender;
			if (toolStripMenuItem.Checked)
			{
				return;
			}
			if (selectedNode.Tag.GetType() != typeof(LedGroupCloud))
			{
				return;
			}
			LedGroupCloud ledGroupCloud = (LedGroupCloud)selectedNode.Tag;
			string text = string.Empty;
			if (toolStripMenuItem.Tag != null)
			{
				string text2 = toolStripMenuItem.Tag.ToString();
				if (text2 != "0")
				{
					text = text2;
				}
			}
			selectedNode.Nodes.Clear();
			foreach (LedPanel current in formMain.ledsys.Panels)
			{
				if (!(current.GetType() != typeof(LedPanelCloud)))
				{
					LedPanelCloud ledPanelCloud = (LedPanelCloud)current;
					if (string.IsNullOrEmpty(text) || ledPanelCloud.Group.Contains(text))
					{
						TreeNode treeNode = new TreeNode(ledPanelCloud.GetDescription());
						if (ledPanelCloud.State == LedPanelState.Online)
						{
							treeNode.ImageIndex = 1;
							treeNode.SelectedImageIndex = 1;
							treeNode.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Online") + ledPanelCloud.GetDescription();
						}
						else
						{
							treeNode.ImageIndex = 2;
							treeNode.SelectedImageIndex = 2;
							treeNode.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Offline") + ledPanelCloud.GetDescription();
						}
						treeNode.Tag = ledPanelCloud;
						treeNode.ContextMenuStrip = this.contextMenuStripPanel;
						this.AddNodesPanel(treeNode);
						treeNode.Expand();
						selectedNode.Nodes.Add(treeNode);
					}
				}
			}
			ledGroupCloud.SelectedGroup = null;
			if (string.IsNullOrEmpty(text))
			{
				ledGroupCloud.SelectedIndex = -2;
			}
			else if (text == ledGroupCloud.ID)
			{
				ledGroupCloud.SelectedIndex = -1;
			}
			else if (ledGroupCloud.Subgroups != null)
			{
				for (int i = 0; i < ledGroupCloud.Subgroups.Count; i++)
				{
					if (ledGroupCloud.Subgroups[i].ID == text)
					{
						ledGroupCloud.SelectedIndex = i;
						ledGroupCloud.SelectedGroup = ledGroupCloud.Subgroups[i];
						break;
					}
				}
			}
			ContextMenuStrip contextMenuStrip = selectedNode.ContextMenuStrip;
			if (contextMenuStrip != null)
			{
				foreach (ToolStripItem toolStripItem in contextMenuStrip.Items)
				{
					if (toolStripItem.GetType() == typeof(ToolStripMenuItem))
					{
						((ToolStripMenuItem)toolStripItem).Checked = false;
					}
				}
			}
			toolStripMenuItem.Checked = true;
			selectedNode.Text = string.Format("{0}({1})", ledGroupCloud.Name, toolStripMenuItem.Text);
			selectedNode.Expand();
		}

		private void CloudLogoutProcedure()
		{
			this.isCloudlogouting = true;
			Thread.Sleep(500);
			this.SaveProject();
			this.CloudLogout();
			this.isCloudlogouting = false;
		}

		private void CloudLogout()
		{
			if (this.isCloudLogin)
			{
				new AccountService().Logout(LedGlobal.CloudAccount.SessionID);
				this.isCloudLogin = false;
				string userName = LedGlobal.CloudAccount.UserName;
				formMain.ledsys.RemovePanelCloud(userName);
				formMain.ledsys.RemoveGroup(userName);
				formMain.ledsys.Cloud.LoginState = LedCloudLoginState.Logout;
				formMain.ledsys.Cloud.Account.Dispose();
				LedGlobal.CloudAccount.Dispose();
				LedGlobal.CloudAccount = null;
				base.Invoke(new MethodInvoker(delegate
				{
					this.ShowCloudMenu();
					this.ResetCloudInfo();
				}));
			}
		}

		private void CloudTerminals()
		{
			this.isCloudSyncing = true;
			string text = LedGlobal.CloudAccount.UserName;
			LedGroupCloud ledGroupCloud = null;
			IDictionary<string, IList<string>> dictionary = new Dictionary<string, IList<string>>();
			int num = 0;
			int num2 = 5;
			IList<GroupInfo> list = null;
			GroupService groupService = new GroupService();
			while (list == null && num < num2)
			{
				list = groupService.GetList(LedGlobal.CloudAccount.SessionID);
				Thread.Sleep(200);
				num++;
			}
			num = 0;
			IList<TerminalInfo> list2 = null;
			TerminalService terminalService = new TerminalService();
			while (list2 == null && num < num2)
			{
				list2 = terminalService.GetList(LedGlobal.CloudAccount.SessionID);
				Thread.Sleep(200);
				num++;
			}
			if (!formMain.ledsys.ContainsGroup(text))
			{
				ledGroupCloud = new LedGroupCloud();
				ledGroupCloud.Name = text;
				ledGroupCloud.Description = text;
				ledGroupCloud.CreationMethod = LedCreationMethod.Cloud;
				formMain.ledsys.AddGroup(ledGroupCloud);
			}
			else
			{
				ledGroupCloud = formMain.ledsys.ConvertGroupToCloud(text);
			}
			if (list != null)
			{
				dictionary.Clear();
				foreach (GroupInfo current in list)
				{
					bool flag = false;
					string text2 = current.Name;
					if (!string.IsNullOrEmpty(current.CreatorID))
					{
						text2 = text2 + "->" + current.CreatorName;
					}
					foreach (string[] current2 in current.Terminals)
					{
						string key = current2[2];
						string text3 = current2[3];
						if (text3.Contains(formMain.CloudModelDescription))
						{
							if (dictionary.ContainsKey(key))
							{
								IList<string> list3 = dictionary[key];
								if (!list3.Contains(text2))
								{
									list3.Add(text2);
									flag = true;
								}
							}
							else
							{
								dictionary.Add(key, new List<string>
								{
									text2
								});
								flag = true;
							}
						}
					}
					if (flag)
					{
						ledGroupCloud.AddSubgroup(new LedGroup
						{
							Name = text2,
							Description = text2,
							CreationMethod = LedCreationMethod.Cloud
						});
					}
				}
			}
			if (list2 != null)
			{
				foreach (TerminalInfo current3 in list2)
				{
					bool flag2 = false;
					foreach (LedPanel current4 in formMain.ledsys.Panels)
					{
						if (current4.CloudServerUserName == text && !string.IsNullOrEmpty(current4.DeviceID) && current4.DeviceID == current3.DeviceID)
						{
							this.SetPanelParam(current4, current3, null);
							if (current4.GetType() == typeof(LedPanel))
							{
								LedPanelCloud panel = LedPanelCloud.Parse(current4);
								formMain.ledsys.RemovePanel(current4);
								formMain.ledsys.AddPanel(panel);
							}
							flag2 = true;
							break;
						}
					}
					if (!flag2)
					{
						string groupID = string.Empty;
						if (dictionary.ContainsKey(current3.DeviceID))
						{
							IList<string> list4 = this.SubgroupNameToID(dictionary[current3.DeviceID], ledGroupCloud);
							groupID = string.Join(LedCommonConst.StringSeparator, ((List<string>)list4).ToArray());
						}
						this.AddPanelCloud(current3, groupID);
					}
					Thread.Sleep(10);
				}
			}
			if (list != null)
			{
				for (int i = 0; i < list.Count; i++)
				{
					list[i].Dispose();
					list[i] = null;
				}
				list.Clear();
				list = null;
			}
			if (list2 != null)
			{
				for (int j = 0; j < list2.Count; j++)
				{
					list2[j].Dispose();
					list2[j] = null;
				}
				list2.Clear();
				list2 = null;
			}
			text = null;
			ledGroupCloud = null;
			dictionary.Clear();
			dictionary = null;
			this.isCloudSyncing = false;
		}

		private void CloudTerminalMonitor()
		{
			//formMain.AnymousClass AnymousClass = new formMain.AnymousClass();
			//AnymousClass.括号是什么鬼4__this = this;
			//this.isCloudTerminalMonitoring = true;
			//int num = 15000;
			//string text = LedGlobal.CloudAccount.UserName;
			//GroupService groupService = new GroupService();
			//TerminalService terminalService = new TerminalService();
			//IList<GroupInfo> list = null;
			//IList<TerminalInfo> list2 = null;
			//IList<TerminalInfo> list3 = null;
			//IList<string> list4 = new List<string>();
			//AnymousClass.updateParamDescription = string.Empty;
			//bool flag = false;
			//IDictionary<string, IList<string>> dictionary = new Dictionary<string, IList<string>>();
			//LedGroupCloud ledGroupCloud = formMain.ledsys.GetGroupCloud(text);
			//if (string.IsNullOrEmpty(text) || ledGroupCloud == null)
			//{
			//	return;
			//}
			//while (this.isCloudLogin)
			//{
			//	if (!this.isCloudTerminalMonitorEnabled)
			//	{
			//		Thread.Sleep(num);
			//	}
			//	else if (this.isCloudLogin && this.isCloudTerminalMonitorEnabled)
			//	{
			//		list = groupService.GetList(LedGlobal.CloudAccount.SessionID);
			//		if (list != null)
			//		{
			//			list4.Clear();
			//			dictionary.Clear();
			//			foreach (GroupInfo current in list)
			//			{
			//				if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//				{
			//					break;
			//				}
			//				bool flag2 = false;
			//				string text2 = current.Name;
			//				if (!string.IsNullOrEmpty(current.CreatorID))
			//				{
			//					text2 = text2 + "->" + current.CreatorName;
			//				}
			//				foreach (string[] current2 in current.Terminals)
			//				{
			//					string key = current2[2];
			//					string text3 = current2[3];
			//					if (text3.Contains(formMain.CloudModelDescription))
			//					{
			//						if (dictionary.ContainsKey(key))
			//						{
			//							if (dictionary.ContainsKey(key))
			//							{
			//								IList<string> list5 = dictionary[key];
			//								if (!list5.Contains(text2))
			//								{
			//									list5.Add(text2);
			//									flag2 = true;
			//								}
			//							}
			//						}
			//						else
			//						{
			//							dictionary.Add(key, new List<string>
			//							{
			//								text2
			//							});
			//							flag2 = true;
			//						}
			//					}
			//				}
			//				if (flag2)
			//				{
			//					list4.Add(text2);
			//				}
			//			}
			//			if (ledGroupCloud.Subgroups != null)
			//			{
			//				foreach (string current3 in list4)
			//				{
			//					if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//					{
			//						break;
			//					}
			//					bool flag3 = false;
			//					for (int i = ledGroupCloud.Subgroups.Count - 1; i > -1; i--)
			//					{
			//						LedGroup ledGroup = ledGroupCloud.Subgroups[i];
			//						if (current3 == ledGroup.Name)
			//						{
			//							flag3 = true;
			//							break;
			//						}
			//						if (!list4.Contains(ledGroup.Name))
			//						{
			//							ledGroupCloud.RemoveSubgroup(ledGroup);
			//						}
			//					}
			//					if (!flag3)
			//					{
			//						if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//						{
			//							break;
			//						}
			//						ledGroupCloud.AddSubgroup(new LedGroup
			//						{
			//							Name = current3,
			//							Description = current3,
			//							CreationMethod = LedCreationMethod.Cloud
			//						});
			//					}
			//				}
			//			}
			//			IEnumerator enumerator4 = this.ledTree.Nodes.GetEnumerator();
			//			try
			//			{
			//				while (enumerator4.MoveNext())
			//				{
			//					TreeNode treeNode = (TreeNode)enumerator4.Current;
			//					if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//					{
			//						break;
			//					}
			//					if (treeNode != null && treeNode.Text.Contains(text))
			//					{
			//						ContextMenuStrip contextMenuStripGroupCloud = treeNode.ContextMenuStrip;
			//						if (contextMenuStripGroupCloud != null)
			//						{
			//							foreach (string current4 in list4)
			//							{
			//								bool flag4 = false;
			//								for (int j = contextMenuStripGroupCloud.Items.Count - 1; j > -1; j--)
			//								{
			//									ToolStripItem toolStripItem = contextMenuStripGroupCloud.Items[j];
			//									if (!(toolStripItem.GetType() != typeof(ToolStripMenuItem)))
			//									{
			//										if (current4 == toolStripItem.Text)
			//										{
			//											flag4 = true;
			//											break;
			//										}
			//										if (!list4.Contains(toolStripItem.Text))
			//										{
			//											if (treeNode.Text.Contains(toolStripItem.Text))
			//											{
			//												flag = true;
			//											}
			//											contextMenuStripGroupCloud.Items.Remove(toolStripItem);
			//										}
			//									}
			//								}
			//								if (!flag4)
			//								{
			//									if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//									{
			//										break;
			//									}
			//									ToolStripMenuItem toolStripMenuItem = new ToolStripMenuItem(current4);
			//									toolStripMenuItem.Tag = formMain.ledsys.GetGroupID(current4);
			//									toolStripMenuItem.Click += new EventHandler(this.tsmiGroupCloud_Click);
			//									contextMenuStripGroupCloud.Items.Add(toolStripMenuItem);
			//								}
			//							}
			//							if (flag)
			//							{
			//								if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//								{
			//									break;
			//								}
			//								base.Invoke(new MethodInvoker(delegate
			//								{
			//									AnymousClass.括号是什么鬼4__this.tsmiGroupCloud_Click(contextMenuStripGroupCloud.Items[0], null);
			//								}));
			//							}
			//						}
			//					}
			//				}
			//			}
			//			finally
			//			{
			//				IDisposable disposable = enumerator4 as IDisposable;
			//				if (disposable != null)
			//				{
			//					disposable.Dispose();
			//				}
			//			}
			//		}
			//		if (this.isCloudLogin && this.isCloudTerminalMonitorEnabled)
			//		{
			//			if (list3 == null)
			//			{
			//				list3 = new List<TerminalInfo>();
			//			}
			//			list3.Clear();
			//			AnymousClass.updateParamDescription = string.Empty;
			//			list2 = terminalService.GetList(LedGlobal.CloudAccount.SessionID);
			//			if (list2 != null)
			//			{
			//				using (IEnumerator<TerminalInfo> enumerator5 = list2.GetEnumerator())
			//				{
			//					while (enumerator5.MoveNext())
			//					{
			//						TerminalInfo terminal = enumerator5.Current;
			//						if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//						{
			//							break;
			//						}
			//						bool flag5 = false;
			//						LedPanelState ledPanelState = (LedPanelState)Convert.ToInt32(terminal.Online);
			//						IList<string> groupNames = null;
			//						if (dictionary.ContainsKey(terminal.DeviceID))
			//						{
			//							groupNames = dictionary[terminal.DeviceID];
			//						}
			//						foreach (TreeNode treeNode2 in this.ledTree.Nodes)
			//						{
			//							if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//							{
			//								break;
			//							}
			//							if (treeNode2 != null && treeNode2.Text.Contains(text) && treeNode2.Nodes != null)
			//							{
			//								foreach (TreeNode treeNode3 in treeNode2.Nodes)
			//								{
			//									if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//									{
			//										break;
			//									}
			//									if (treeNode3 != null && treeNode3.Tag != null && this.IsPanelCloud(treeNode3.Tag))
			//									{
			//										LedPanelCloud ledPanelCloud = (LedPanelCloud)treeNode3.Tag;
			//										if (ledPanelCloud.CloudServerUserName == text && ledPanelCloud.DeviceID == terminal.DeviceID)
			//										{
			//											flag5 = true;
			//											ledPanelCloud.LastUpdateTime = DateTime.Now;
			//											IList<string> list6 = this.SubgroupNameToID(groupNames, ledGroupCloud);
			//											if (list6 != null && list6.Count > 0)
			//											{
			//												bool flag6 = true;
			//												foreach (string current5 in list6)
			//												{
			//													bool flag7 = false;
			//													for (int k = ledPanelCloud.Group.Count - 1; k > -1; k--)
			//													{
			//														string text4 = ledPanelCloud.Group[k];
			//														if (text4 == current5)
			//														{
			//															flag7 = true;
			//															break;
			//														}
			//														if (!list6.Contains(text4))
			//														{
			//															if (!flag && ledGroupCloud.SelectedGroup != null && ledGroupCloud.SelectedGroup.ID == text4)
			//															{
			//																flag6 = false;
			//															}
			//															if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//															{
			//																break;
			//															}
			//															ledPanelCloud.Group.Remove(text4);
			//														}
			//													}
			//													if (!flag7)
			//													{
			//														if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//														{
			//															break;
			//														}
			//														ledPanelCloud.Group.Add(current5);
			//													}
			//												}
			//												if (!flag6)
			//												{
			//													if (this.isCloudLogin && this.isCloudTerminalMonitorEnabled)
			//													{
			//														treeNode3.Remove();
			//														break;
			//													}
			//													break;
			//												}
			//											}
			//											else if (!ledPanelCloud.Group.Contains(ledGroupCloud.ID))
			//											{
			//												if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//												{
			//													break;
			//												}
			//												ledPanelCloud.Group.Clear();
			//												ledPanelCloud.Group.Add(ledGroupCloud.ID);
			//											}
			//											if (ledPanelCloud.State == ledPanelState)
			//											{
			//												break;
			//											}
			//											ledPanelCloud.State = ledPanelState;
			//											if (ledPanelState == LedPanelState.Online)
			//											{
			//												treeNode3.ImageIndex = 1;
			//												treeNode3.SelectedImageIndex = 1;
			//												treeNode3.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Online") + ledPanelCloud.GetDescription();
			//												break;
			//											}
			//											treeNode3.ImageIndex = 2;
			//											treeNode3.SelectedImageIndex = 2;
			//											treeNode3.Text = formMain.ML.GetStr("formMain_TreeView_Node_Prefix_Offline") + ledPanelCloud.GetDescription();
			//											break;
			//										}
			//									}
			//								}
			//								if (flag5)
			//								{
			//									break;
			//								}
			//							}
			//						}
			//						if (!flag5)
			//						{
			//							foreach (LedPanel current6 in formMain.ledsys.Panels)
			//							{
			//								if (current6.GetType() == typeof(LedPanelCloud) && current6.DeviceID == terminal.DeviceID)
			//								{
			//									flag5 = true;
			//									LedPanelCloud ledPanelCloud2 = (LedPanelCloud)current6;
			//									ledPanelCloud2.LastUpdateTime = DateTime.Now;
			//									break;
			//								}
			//							}
			//						}
			//						if (flag5)
			//						{
			//							foreach (LedPanel current7 in formMain.ledsys.Panels)
			//							{
			//								if (current7.GetType() == typeof(LedPanelCloud) && current7.DeviceID == terminal.DeviceID)
			//								{
			//									LedPanelCloud ledPanelCloud3 = (LedPanelCloud)current7;
			//									if (!ledPanelCloud3.IsEquals(terminal.ToParameterArray()))
			//									{
			//										if (string.IsNullOrEmpty(AnymousClass.updateParamDescription))
			//										{
			//											AnymousClass.updateParamDescription = ledPanelCloud3.TextName;
			//										}
			//										else
			//										{
			//											formMain.AnymousClass expr_A26 = AnymousClass;
			//											expr_A26.updateParamDescription = expr_A26.updateParamDescription + "\r\n" + ledPanelCloud3.TextName;
			//										}
			//										list3.Add(terminal);
			//										break;
			//									}
			//									break;
			//								}
			//							}
			//						}
			//						if (!flag5)
			//						{
			//							LedCardType cardType = LedCommon.GetCardType(terminal.CardTypeDescription);
			//							if (cardType != LedCardType.Null)
			//							{
			//								if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//								{
			//									break;
			//								}
			//								base.Invoke(new MethodInvoker(delegate
			//								{
			//									new ToolTip
			//									{
			//										IsBalloon = true,
			//										UseAnimation = true
			//									}.Show(string.Format(formMain.ML.GetStr("Message_Find_New_Cloud_Terminal_And_Be_Added_Automatically_Five_Seconds_Later"), terminal.DeviceID), AnymousClass.括号是什么鬼4__this.menuStrip1, 5000);
			//								}));
			//								Thread.Sleep(5000);
			//								if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//								{
			//									break;
			//								}
			//								string groupID = string.Empty;
			//								IList<string> list7 = this.SubgroupNameToID(groupNames, ledGroupCloud);
			//								groupID = string.Join(LedCommonConst.StringSeparator, ((List<string>)list7).ToArray());
			//								this.AddPanelCloud(terminal, groupID);
			//								base.Invoke(new MethodInvoker(delegate
			//								{
			//									this.AddPanelToTree();
			//									this.DisplayItem(LedDisplayMode.Load);
			//								}));
			//							}
			//						}
			//					}
			//				}
			//				DateTime now = DateTime.Now;
			//				for (int l = formMain.ledsys.Panels.Count - 1; l > -1; l--)
			//				{
			//					if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//					{
			//						break;
			//					}
			//					LedPanel panel = formMain.ledsys.Panels[l];
			//					if (this.IsPanelCloud(panel) && !string.IsNullOrEmpty(panel.DeviceID) && now.Subtract(((LedPanelCloud)panel).LastUpdateTime).TotalMilliseconds > (double)(num * 2))
			//					{
			//						base.Invoke(new MethodInvoker(delegate
			//						{
			//							new ToolTip
			//							{
			//								IsBalloon = true,
			//								UseAnimation = true
			//							}.Show(string.Format(formMain.ML.GetStr("Message_Cloud_Terminal_Will_Be_Deleted_Automatically_Five_Seconds_Later"), panel.DeviceID), AnymousClass.括号是什么鬼4__this.menuStrip1, 5000);
			//						}));
			//						Thread.Sleep(5000);
			//						if (!this.isCloudLogin || !this.isCloudTerminalMonitorEnabled)
			//						{
			//							break;
			//						}
			//						formMain.ledsys.RemovePanel(panel);
			//						base.Invoke(new MethodInvoker(delegate
			//						{
			//							this.AddPanelToTree();
			//							this.DisplayItem(LedDisplayMode.Load);
			//						}));
			//					}
			//					Thread.Sleep(10);
			//				}
			//			}
			//			if (list3 != null && list3.Count > 0)
			//			{
			//				bool needUpdate = false;
			//				bool isUpdating = true;
			//				base.Invoke(new MethodInvoker(delegate
			//				{
			//					if (MessageBox.Show(AnymousClass.括号是什么鬼4__this, string.Format(formMain.ML.GetStr("Message_Parameters_Of_The_Panel_Have_Been_Updated_On_Cloud_Synchronize_Or_Not"), "\r\n\r\n", AnymousClass.updateParamDescription, "\r\n\r\n"), formMain.ML.GetStr("Display_Prompt"), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
			//					{
			//						needUpdate = true;
			//					}
			//					isUpdating = false;
			//				}));
			//				while (isUpdating)
			//				{
			//					Application.DoEvents();
			//					Thread.Sleep(100);
			//				}
			//				if (needUpdate)
			//				{
			//					foreach (TerminalInfo current8 in list3)
			//					{
			//						foreach (LedPanel current9 in formMain.ledsys.Panels)
			//						{
			//							if (current9.GetType() == typeof(LedPanelCloud) && current9.DeviceID == current8.DeviceID)
			//							{
			//								LedPanelCloud ledPanelCloud4 = (LedPanelCloud)current9;
			//								if (ledPanelCloud4.Width > current8.Width || ledPanelCloud4.Height > current8.Height)
			//								{
			//									ledPanelCloud4.SizeChangedMode = LedSizeChangedMode.Smaller;
			//								}
			//								else if (ledPanelCloud4.Width < current8.Width || ledPanelCloud4.Height < current8.Height)
			//								{
			//									ledPanelCloud4.SizeChangedMode = LedSizeChangedMode.Larger;
			//								}
			//								if (ledPanelCloud4.ColorMode != (LedColorMode)current8.Color)
			//								{
			//									ledPanelCloud4.SizeChangedMode = LedSizeChangedMode.Smaller;
			//								}
			//								ledPanelCloud4.Sync(current8.ToParameterArray());
			//								break;
			//							}
			//						}
			//					}
			//					base.Invoke(new MethodInvoker(delegate
			//					{
			//						this.AddPanelToTree();
			//						this.DisplayItem(LedDisplayMode.Load);
			//					}));
			//				}
			//			}
			//			if (!this.isCloudLogin)
			//			{
			//				break;
			//			}
			//			if (this.isCloudTerminalMonitorEnabled)
			//			{
			//				Thread.Sleep(num);
			//			}
			//		}
			//	}
			//}
			//groupService = null;
			//terminalService = null;
			//if (list != null)
			//{
			//	for (int m = 0; m < list.Count; m++)
			//	{
			//		list[m].Dispose();
			//		list[m] = null;
			//	}
			//	list.Clear();
			//	list = null;
			//}
			//if (list2 != null)
			//{
			//	for (int n = 0; n < list2.Count; n++)
			//	{
			//		list2[n].Dispose();
			//		list2[n] = null;
			//	}
			//	list2.Clear();
			//	list2 = null;
			//}
			//text = null;
			//ledGroupCloud = null;
			//dictionary.Clear();
			//dictionary = null;
			//this.isCloudTerminalMonitoring = false;
		}

		private IList<string> SubgroupNameToID(IList<string> groupNames, LedGroupCloud groupCloud)
		{
			IList<string> list = new List<string>();
			if (groupNames != null && groupNames.Count > 0)
			{
				foreach (string current in groupNames)
				{
					foreach (LedGroup current2 in groupCloud.Subgroups)
					{
						if (current2.Name == current)
						{
							list.Add(current2.ID);
							break;
						}
					}
				}
			}
			return list;
		}

		private void AddPanelCloud(TerminalInfo terminal, string groupID)
		{
			LedCardType cardType = LedCommon.GetCardType(terminal.CardTypeDescription);
			if (cardType != LedCardType.Null)
			{
				LedPanelCloud ledPanelCloud = new LedPanelCloud();
				this.SetPanelParam(ledPanelCloud, terminal, groupID);
				formMain.ledsys.Panels.Add(ledPanelCloud);
			}
		}

		private void SetPanelParam(LedPanel panel, TerminalInfo terminal, string groupID)
		{
			string userName = LedGlobal.CloudAccount.UserName;
			if (string.IsNullOrEmpty(groupID))
			{
				groupID = formMain.ledsys.GetGroupID(userName);
			}
			panel.TextName = terminal.Name;
			panel.ValueName = terminal.Name;
			panel.CardType = LedCommon.GetCardType(terminal.CardTypeDescription);
			panel.CloudServerUserName = userName;
			if (panel.GetType() == typeof(LedPanelCloud))
			{
				((LedPanelCloud)panel).Group = new List<string>(groupID.Split(new string[]
				{
					LedCommonConst.StringSeparator
				}, StringSplitOptions.RemoveEmptyEntries));
			}
			else
			{
				panel.Group = groupID;
			}
			panel.CloudID = terminal.ID;
			panel.DeviceID = terminal.DeviceID;
			panel.Width = terminal.Width;
			panel.Height = terminal.Height;
			panel.RoutingSetting.ScanTypeIndex = terminal.ScanTypeIndex;
			panel.RoutingSetting.RoutingIndex = terminal.RoutingIndex;
			panel.OEPolarity = terminal.OEPolarity;
			panel.DataPolarity = terminal.DataPolarity;
			panel.ScanFrequency = terminal.ScanFrequency;
			panel.BlankingTime = terminal.BlankingTime;
			panel.LTPolarity = terminal.LTPolarity;
			panel.ColorMode = (LedColorMode)terminal.Color;
			panel.State = (LedPanelState)Convert.ToInt32(terminal.Online);
			if (terminal.CardTypeDescription.IndexOf('G') > -1)
			{
				panel.PortType = LedPortType.GPRS;
				panel.EthernetCommunicaitonMode = LedEthernetCommunicationMode.Directly;
				panel.GPRSCommunicaitonMode = LedGPRSCommunicationMode.CloudServer;
			}
		}

		private void ResetCloudInfo()
		{
			if (this.isCloudLogin)
			{
				this.lblCloudLoginInfo.Text = ((LedGlobal.CloudAccount != null && !string.IsNullOrEmpty(LedGlobal.CloudAccount.UserName)) ? LedGlobal.CloudAccount.UserName : Settings.Default.CloudServerUserName);
				this.picCloudLoginInfo.Visible = true;
				this.lblCloudLoginInfo.Visible = true;
			}
			else
			{
				this.picCloudLoginInfo.Visible = false;
				this.lblCloudLoginInfo.Visible = false;
			}
			this.lblCloudLoginInfo.Left = this.pictureBox_Min.Left - this.lblCloudLoginInfo.Width - 10;
			this.picCloudLoginInfo.Left = this.lblCloudLoginInfo.Left - this.picCloudLoginInfo.Width;
		}

		private void ShowCloudMenu()
		{
			this.tsmiCloudLogin.Visible = !this.isCloudLogin;
			this.tsmiCloudRegister.Visible = !this.isCloudLogin;
			this.tsmiCloudLogout.Visible = this.isCloudLogin;
			this.tsmiCloudQueryReview.Visible = this.isCloudLogin;
			this.tsmiCloudManagement.Visible = this.isCloudLogin;
		}

		private bool IsPanelCloud(object obj)
		{
			return obj != null && obj.GetType() == typeof(LedPanelCloud);
		}

		private void queryPanelStateToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.QueryPanelState();
		}

		private void queryStateContentToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.QueryPanelState();
		}

		private void QueryPanelState()
		{
			this.HeartbeatProcessing(false);
			this.isCloudTerminalMonitorEnabled = false;
			formPanelStateQuery formPanelStateQuery = new formPanelStateQuery();
			formPanelStateQuery.ShowDialog(this);
			this.HeartbeatProcessing(true);
			this.isCloudTerminalMonitorEnabled = true;
		}

		private void tsmiEthernetSettings_Click(object sender, EventArgs e)
		{
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				return;
			}
			if (this.nowPanel.GetType() != typeof(LedPanel))
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Local_And_Manual_Panel"));
				return;
			}
			if (!Regex.IsMatch(this.nowPanel.CardType.ToString(), "^ZH_E([0-9]|[a-z])L") || (this.nowPanel.PortType != LedPortType.Ethernet && this.nowPanel.PortType != LedPortType.SerialPort))
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_ExL_Panel_And_Use_Ethernet_Or_SerialPort"));
				return;
			}
			formCheckCode formCheckCode = new formCheckCode();
			if (formCheckCode.Check("888", false))
			{
				formAdvancedSettings formAdvancedSettings = new formAdvancedSettings(this.nowPanel, this);
				formAdvancedSettings.SetPanel_Sizeandcontent(LedEthernetCommunicationMode.CloudServer, true);
				formAdvancedSettings.ShowDialog();
			}
		}

		private void tsmiGPRSSettings_Click(object sender, EventArgs e)
		{
			if (this.nowPanel == null)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Panel"));
				return;
			}
			if (this.nowPanel.GetType() != typeof(LedPanel))
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_Local_And_Manual_Panel"));
				return;
			}
			if (!Regex.IsMatch(this.nowPanel.CardType.ToString(), "^ZH_G([0-9]|[a-z])L") || this.nowPanel.PortType != LedPortType.GPRS)
			{
				MessageBox.Show(this, formMain.ML.GetStr("Message_Please_Select_GxL_Panel_And_Use_GPRS"));
				return;
			}
			formCheckCode formCheckCode = new formCheckCode();
			if (formCheckCode.Check("888", false))
			{
				formGPRSAdvancedSettings formGPRSAdvancedSettings = new formGPRSAdvancedSettings(this.nowPanel);
				formGPRSAdvancedSettings.ShowDialog();
			}
		}

		private void ResetRunMode()
		{
			if (Settings.Default.RunMode == 0)
			{
				this.lblRunMode.Visible = true;
			}
			else
			{
				this.lblRunMode.Visible = false;
			}
			this.lblRunMode.Left = (this.pictureBox_Min.Left - (this.menuStrip1.Left + this.menuStrip1.Width - 50) - this.lblRunMode.Width) / 2 + this.menuStrip1.Left + this.menuStrip1.Width - 50;
		}

		private void SendDataTick()
		{
			Thread.Sleep(2000);
			while (true)
			{
				if (this.nowPanel == null)
				{
					Thread.Sleep(1000);
				}
				else if (this.isSendDataTickPause)
				{
					Thread.Sleep(600);
				}
				else
				{
					int millisecondsTimeout = 10000;
					bool flag = false;
					foreach (LedItem current in this.nowPanel.Items)
					{
						foreach (LedSubarea current2 in current.Subareas)
						{
							foreach (LedContent current3 in current2.Contents)
							{
								if (current3.DataSourceSetting.Enabled && current3.DataSourceSetting.State == LedRunningState.Running)
								{
									millisecondsTimeout = current3.DataSourceSetting.Interval * 1000;
									flag = true;
									break;
								}
							}
						}
					}
					if (!flag)
					{
						break;
					}
					if (this.isSendDataTickPause)
					{
						Thread.Sleep(600);
					}
					else
					{
						bool isSending = true;
						base.Invoke(new MethodInvoker(delegate
						{
							this.return_stop = false;
							this.isUpdataCode = false;
							this.isDownloadStringLibrary = false;
							this.Panel_Handle(false);
							if (!this.return_stop)
							{
								if (this.IsPanelCloud(this.nowPanel))
								{
									this.CloudStartSend(this);
								}
								else
								{
									this.StartSend(false, this);
								}
							}
							isSending = false;
						}));
						while (isSending)
						{
							Thread.Sleep(100);
						}
						Thread.Sleep(millisecondsTimeout);
					}
				}
			}
			if (this.threadList.Count > 0)
			{
				int num = -1;
				for (int i = 0; i < this.threadList.Count; i++)
				{
					if (this.threadList[i].Name == "SendDataTick")
					{
						num = i;
						break;
					}
				}
				if (num > -1)
				{
					this.threadList.RemoveAt(num);
				}
			}
		}

		private void formMain_Shown(object sender, EventArgs e)
		{
			Thread thread = new Thread(new ThreadStart(this.SendDataTick));
			thread.Name = "SendDataTick";
			thread.IsBackground = true;
			this.threadList.Add(thread);
			thread.Start();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && this.components != null)
			{
				this.components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(formMain));
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openProjectToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.newPorjectToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.projectSavaAsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.editMenuToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addItemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new ZHUI.ZhToolStripSeparator();
            this.addTextToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addAnimationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addMarqueeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addClockToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addDialToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addMenuToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addLunarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addTemperatureToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addWeatherToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addStringToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addNoiseToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addHumidityToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.zhToolStripSeparator2 = new ZHUI.ZhToolStripSeparator();
            this.EditStringLibraryToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.EditPublicTextToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.EditDataSourceToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.zhToolStripSeparator3 = new ZHUI.ZhToolStripSeparator();
            this.deleteSelectionToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.gPRSManagementToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.setingMenuToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.panelSettingToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssSetting1 = new ZHUI.ZhToolStripSeparator();
            this.luminanceSettingToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.timingRegulateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.turnOfToolStripMenuItem2 = new System.Windows.Forms.ToolStripMenuItem();
            this.turnOnToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.autoStartAndCloseToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.queryPanelStateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssSetting2 = new ZHUI.ZhToolStripSeparator();
            this.tsmiEthernetSettings = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiGPRSSettings = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssSetting3 = new ZHUI.ZhToolStripSeparator();
            this.serialTestToolStripMenuItem3 = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssSetting4 = new ZHUI.ZhToolStripSeparator();
            this.ethernetUpdateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.uSBUpdateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssSetting5 = new ZHUI.ZhToolStripSeparator();
            this.saveWifiDataToolStripMenuItemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.buttonFunctionConfigurationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.timeSequenceToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.SendAll_ReSend_ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.gprsSendToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.configToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiGroup = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiLocalServerSetting = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssGroup1 = new ZHUI.ZhToolStripSeparator();
            this.tsmiCloudLogin = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiCloudLogout = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiCloudRegister = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiCloudQueryReview = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiCloudManagement = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssGroup2 = new ZHUI.ZhToolStripSeparator();
            this.tsmiGroupLuminance = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiGroupTiming = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiGroupPowerOff = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiGroupPowerOn = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmiGroupTimerSwitch = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssGroup3 = new ZHUI.ZhToolStripSeparator();
            this.tsmiGroupSending = new System.Windows.Forms.ToolStripMenuItem();
            this.languateSelectToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.multiLanguageTemplatetoolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.skinSelectToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.Skin_DefaultToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.skin1ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.skinClassic1ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.skinClassic2ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.skinClassic3ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.skinXPBlueToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.skinXPSilverToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.skinXPOliveGreenToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpdocToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssHelp1 = new ZHUI.ZhToolStripSeparator();
            this.softwareUpdateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.zhtssHelp2 = new ZHUI.ZhToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.testStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.getSetting = new System.Windows.Forms.ToolStripMenuItem();
            this.TestToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.panelTreeNodeImageList = new System.Windows.Forms.ImageList(this.components);
            this.contextMenuStripSubarea = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.addSubtitleToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addAnimationContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addMarqueeContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addClockContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addDialContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addCounterContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addLunarContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addTemperatureContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addWeatherContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addStringContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addHumidityContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addNoiseContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorSubarea1 = new System.Windows.Forms.ToolStripSeparator();
            this.copyItemContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorSubarea2 = new System.Windows.Forms.ToolStripSeparator();
            this.shareItemContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorSubarea3 = new System.Windows.Forms.ToolStripSeparator();
            this.dropItemContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.fontDialog1 = new System.Windows.Forms.FontDialog();
            this.contextMenuStripPanel = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.addItemContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exportDataToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorPanel1 = new System.Windows.Forms.ToolStripSeparator();
            this.copyPanelItemsContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorPanel2 = new System.Windows.Forms.ToolStripSeparator();
            this.queryStateContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripItem = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.addSubareaContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.deleteItemContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exportDataToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripContent = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.deleteContentContentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.timerSubareaRefresh = new System.Windows.Forms.Timer(this.components);
            this.marqueeTimerRefresh = new System.Windows.Forms.Timer(this.components);
            this.openFileDialog1 = new System.Windows.Forms.OpenFileDialog();
            this.pictureBox_LeftTop = new System.Windows.Forms.PictureBox();
            this.pictureBox_RightTop = new System.Windows.Forms.PictureBox();
            this.panel_Top = new System.Windows.Forms.Panel();
            this.lblRunMode = new System.Windows.Forms.Label();
            this.picLogo = new System.Windows.Forms.PictureBox();
            this.picCloudLoginInfo = new System.Windows.Forms.PictureBox();
            this.lblCloudLoginInfo = new System.Windows.Forms.Label();
            this.pictureBox_Close = new System.Windows.Forms.PictureBox();
            this.pictureBox_Max = new System.Windows.Forms.PictureBox();
            this.pictureBox_Min = new System.Windows.Forms.PictureBox();
            this.label_Logo = new System.Windows.Forms.Label();
            this.panel_BorderLeft = new System.Windows.Forms.Panel();
            this.pictureBox_BorderLeftBottom = new System.Windows.Forms.PictureBox();
            this.pictureBox_BorderRightBottom = new System.Windows.Forms.PictureBox();
            this.panel_BorderRight = new System.Windows.Forms.Panel();
            this.panel_BordertTop = new System.Windows.Forms.Panel();
            this.panel_BorderBottom = new System.Windows.Forms.Panel();
            this.pictureBox_BorderRightTop = new System.Windows.Forms.PictureBox();
            this.pictureBox_BorderLeftTop = new System.Windows.Forms.PictureBox();
            this.panel_Nagivator = new System.Windows.Forms.Panel();
            this.zhToolButton_String = new System.Windows.Forms.PictureBox();
            this.zhToolButton_String_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Weather_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Weather = new System.Windows.Forms.PictureBox();
            this.zhToolButton_FindDeviceWifi_Text = new System.Windows.Forms.Label();
            this.zhToolButton_FindDeviceWifi = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Usb_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Send_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Play_Text = new System.Windows.Forms.Label();
            this.zhToolButton_FindDevice_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Delete_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Score_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Noise_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Humidity_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Temperature_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Lunar_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Counter_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Dial_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Clock_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Marquee_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Animation_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Text_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Item_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Save_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Open_Text = new System.Windows.Forms.Label();
            this.zhToolButton_Usb = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Send = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Play = new System.Windows.Forms.PictureBox();
            this.zhToolButton_FindDevice = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Delete = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Score = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Noise = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Humidity = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Temperature = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Lunar = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Counter = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Dial = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Clock = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Marquee = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Animation = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Text = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Item = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Save = new System.Windows.Forms.PictureBox();
            this.zhToolButton_Open = new System.Windows.Forms.PictureBox();
            this.pictureBox_Spliter2 = new System.Windows.Forms.PictureBox();
            this.pictureBox_Spliter1 = new System.Windows.Forms.PictureBox();
            this.pictureBox_ChangeSize = new System.Windows.Forms.PictureBox();
            this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
            this.folderBrowserDialog1 = new System.Windows.Forms.FolderBrowserDialog();
            this.contextMenuStrip1_Marquee = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.marqueeReverseToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.deleteMarqueeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.Add_Marquee_Text_ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.Add_Marquee_Richtext_ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.Add_Marquee_Animation_ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.Add_Marquee_Grid_ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
            this.Add_Marquee_Gif_ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.Add_Marquee_Image_ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolTip_picture_formain = new System.Windows.Forms.ToolTip(this.components);
            this.imageListCountry = new System.Windows.Forms.ImageList(this.components);
            this.contextMenuStripSharedSource = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.tsmissAddSubtitle = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddAnimation = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddPictureText = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddTime = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddDial = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddCounter = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddLunar = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddTemperature = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddWeather = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmissAddString = new System.Windows.Forms.ToolStripMenuItem();
            this.tssss1 = new System.Windows.Forms.ToolStripSeparator();
            this.tsmissCopyItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tssss2 = new System.Windows.Forms.ToolStripSeparator();
            this.tsmissUnsharedItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tssss3 = new System.Windows.Forms.ToolStripSeparator();
            this.tsmissDeleteItem = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripShared = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.tsmisEditSharedItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tsmisUnsharedItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tsss1 = new System.Windows.Forms.ToolStripSeparator();
            this.tsmisDeleteItem = new System.Windows.Forms.ToolStripMenuItem();
            this.StringEffectSettingzhGroupBox = new ZHUI.ZhGroupBox();
            this.cmbStringStay = new System.Windows.Forms.ComboBox();
            this.cmbStringEntrySpeed = new System.Windows.Forms.ComboBox();
            this.cmbStringEntryMode = new System.Windows.Forms.ComboBox();
            this.lblStringStay = new System.Windows.Forms.Label();
            this.lblStringEntrySpeed = new System.Windows.Forms.Label();
            this.lblStringEntryMode = new System.Windows.Forms.Label();
            this.stringAttributeBox = new ZHUI.ZhGroupBox();
            this.stringEditor1 = new LedControlSystem.StringEditor();
            this.zhGroupBoxItemBackground = new ZHUI.ZhGroupBox();
            this.colorfulBackgroundItem = new LedControlSystem.ColorfulBackground();
            this.zhGroupBoxContentBackground = new ZHUI.ZhGroupBox();
            this.colorfulBackgroundContent = new LedControlSystem.ColorfulBackground();
            this.WeatherEffectSettingzhGroupBox = new ZHUI.ZhGroupBox();
            this.cmbWeatherStay = new System.Windows.Forms.ComboBox();
            this.cmbWeatherEntrySpeed = new System.Windows.Forms.ComboBox();
            this.cmbWeatherEntryMode = new System.Windows.Forms.ComboBox();
            this.lblWeatherStay = new System.Windows.Forms.Label();
            this.lblWeatherEntrySpeed = new System.Windows.Forms.Label();
            this.lblWeatherEntryMode = new System.Windows.Forms.Label();
            this.weatherAttributeBox = new ZHUI.ZhGroupBox();
            this.weatherEditor1 = new LedControlSystem.WeatherEditor();
            this.lunarAttributeBox = new ZHUI.ZhGroupBox();
            this.lunarEditor1 = new LedControlSystem.LunarEditor();
            this.textAttributeBox = new ZHUI.ZhGroupBox();
            this.textEditor1 = new LedControlSystem.TextEditor();
            this.marqueeAttributeBox = new ZHUI.ZhGroupBox();
            this.marqueeEdit = new System.Windows.Forms.Button();
            this.marqueePublicText = new System.Windows.Forms.Button();
            this.marqueeConExcel = new System.Windows.Forms.Button();
            this.marqueeConentDown = new System.Windows.Forms.Button();
            this.marqueeConentUp = new System.Windows.Forms.Button();
            this.marqueDeleteButton = new System.Windows.Forms.Button();
            this.marqueeConRichText = new System.Windows.Forms.Button();
            this.marqueeConText = new System.Windows.Forms.Button();
            this.marqueeContentListBox = new System.Windows.Forms.ListBox();
            this.marqueeConNoise = new System.Windows.Forms.Button();
            this.marqueeConHumidity = new System.Windows.Forms.Button();
            this.marqueeConTemperature = new System.Windows.Forms.Button();
            this.marqueeConLunar = new System.Windows.Forms.Button();
            this.marqueeConGrid = new System.Windows.Forms.Button();
            this.marqueeConCounter = new System.Windows.Forms.Button();
            this.marqueeConWord = new System.Windows.Forms.Button();
            this.marqueeConDial = new System.Windows.Forms.Button();
            this.marqueeConFlash = new System.Windows.Forms.Button();
            this.marqueeConClock = new System.Windows.Forms.Button();
            this.marqueeConPicture = new System.Windows.Forms.Button();
            this.marqueeConGif = new System.Windows.Forms.Button();
            this.itemEdgeSettingGroupBox = new ZHUI.ZhGroupBox();
            this.itemEdgeSpeed = new System.Windows.Forms.ComboBox();
            this.itemEdgeList = new System.Windows.Forms.ComboBox();
            this.itemEdgeMode = new System.Windows.Forms.ComboBox();
            this.itemEdgeSpeedLabel = new System.Windows.Forms.Label();
            this.itemUseEdge = new System.Windows.Forms.CheckBox();
            this.itemEdgeModeLabel = new System.Windows.Forms.Label();
            this.itemEdgeListLabel = new System.Windows.Forms.Label();
            this.zhGroupBox_PanelAttribute = new ZHUI.ZhGroupBox();
            this.groupBox11 = new System.Windows.Forms.GroupBox();
            this.panelItemsDownbutton = new System.Windows.Forms.Button();
            this.panelItemsUpbutton = new System.Windows.Forms.Button();
            this.panelItemslistBox = new System.Windows.Forms.ListBox();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.panelDeviceIDLabel = new System.Windows.Forms.Label();
            this.label6 = new System.Windows.Forms.Label();
            this.panelNamelabel = new System.Windows.Forms.Label();
            this.panelItemNumlabel = new System.Windows.Forms.Label();
            this.label10 = new System.Windows.Forms.Label();
            this.panelModelInfolabel = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.panelCommInfolabel = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.panelPanelSizelabel = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.AnimationEffectSettingzhGroupBox = new ZHUI.ZhGroupBox();
            this.animationEffect1 = new LedControlSystem.AnimationEffect();
            this.clockAttributeBox = new ZHUI.ZhGroupBox();
            this.clockNewContentTextBox = new System.Windows.Forms.TextBox();
            this.clockNewTimeIsShowCheckBox = new System.Windows.Forms.CheckBox();
            this.clockNewWeekIsShowCheckBox = new System.Windows.Forms.CheckBox();
            this.clockNewContentIsShowCheckBox = new System.Windows.Forms.CheckBox();
            this.clockNewDateIsShowCheckBox = new System.Windows.Forms.CheckBox();
            this.clockNewUnderlineButton = new System.Windows.Forms.Button();
            this.clockNewItalicButton = new System.Windows.Forms.Button();
            this.clockNewTextLable = new System.Windows.Forms.Label();
            this.clockNewFontFamilyLable = new System.Windows.Forms.Label();
            this.clockNewBoldButton = new System.Windows.Forms.Button();
            this.clockNewLineModel = new System.Windows.Forms.ComboBox();
            this.clockNewFontSize = new System.Windows.Forms.ComboBox();
            this.clockNewSizeLable = new System.Windows.Forms.Label();
            this.clockNewFontFamily = new System.Windows.Forms.ComboBox();
            this.clockNewTimeColorComboBox = new System.Windows.Forms.ComboBox();
            this.clockNewTimeStyleComboBox = new System.Windows.Forms.ComboBox();
            this.clockNewWeekColorComboBox = new System.Windows.Forms.ComboBox();
            this.clockNewWeekStyleComboBox = new System.Windows.Forms.ComboBox();
            this.clockNewContentColorComboBox = new System.Windows.Forms.ComboBox();
            this.clockNewDateColorComboBox = new System.Windows.Forms.ComboBox();
            this.clockNewDateStyleComboBox = new System.Windows.Forms.ComboBox();
            this.ItemAttribute = new ZHUI.ZhGroupBox();
            this.itemByPeroidCheckBox = new System.Windows.Forms.CheckBox();
            this.label12 = new System.Windows.Forms.Label();
            this.itemClosedCheckBox = new System.Windows.Forms.CheckBox();
            this.label8 = new System.Windows.Forms.Label();
            this.itemLockedCheckBox = new System.Windows.Forms.CheckBox();
            this.itemNameTextBox = new System.Windows.Forms.TextBox();
            this.itemSubareaNumLabel = new System.Windows.Forms.Label();
            this.itemByPeroidGroupBox = new ZHUI.ZhGroupBox();
            this.label_Item_DateTo = new System.Windows.Forms.Label();
            this.itemPlayTimerByWeekRadioButton = new System.Windows.Forms.RadioButton();
            this.itemTimerEndTime = new System.Windows.Forms.DateTimePicker();
            this.itemTimerStartTime = new System.Windows.Forms.DateTimePicker();
            this.itemPlayTimerByDatePanel = new System.Windows.Forms.Panel();
            this.itemTimerNoGap = new System.Windows.Forms.CheckBox();
            this.label9 = new System.Windows.Forms.Label();
            this.itemTimerEndDate = new System.Windows.Forms.DateTimePicker();
            this.itemTimerStartDate = new System.Windows.Forms.DateTimePicker();
            this.itemPlayTimerEverydayRadioButton = new System.Windows.Forms.RadioButton();
            this.itemPlayTimerByDateRadioButton = new System.Windows.Forms.RadioButton();
            this.itemPlayTimerByWeekPanel = new System.Windows.Forms.Panel();
            this.itemTimerWeekThursdayCheckBox = new System.Windows.Forms.CheckBox();
            this.itemTimerWeekMondayCheckBox = new System.Windows.Forms.CheckBox();
            this.itemTimerWeekTuesdayCheckBox = new System.Windows.Forms.CheckBox();
            this.itemTimerWeekWednesdayCheckBox = new System.Windows.Forms.CheckBox();
            this.itemTimerWeekFridayCheckBox = new System.Windows.Forms.CheckBox();
            this.itemTimerWeekSaturdayCheckBox = new System.Windows.Forms.CheckBox();
            this.itemTimerWeekSundayCheckBox = new System.Windows.Forms.CheckBox();
            this.dialAttributeBox = new ZHUI.ZhGroupBox();
            this.dialNumberSecondHandPlus = new System.Windows.Forms.NumericUpDown();
            this.dialNumberMinuteHandPlus = new System.Windows.Forms.NumericUpDown();
            this.dialRightTextTextBox = new System.Windows.Forms.TextBox();
            this.dialConnerTextTextBox = new System.Windows.Forms.ComboBox();
            this.dialFontColorComboBox = new System.Windows.Forms.ComboBox();
            this.dialTimeJetType = new System.Windows.Forms.ComboBox();
            this.dialElementLeftDown = new System.Windows.Forms.PictureBox();
            this.dialElementUp = new System.Windows.Forms.PictureBox();
            this.dialElementRight = new System.Windows.Forms.PictureBox();
            this.dialElementLeft = new System.Windows.Forms.PictureBox();
            this.dialUnderlineBoldButton = new System.Windows.Forms.Button();
            this.dialItalicBoldButton = new System.Windows.Forms.Button();
            this.dialLabelFont = new System.Windows.Forms.Label();
            this.dialFontBoldButton = new System.Windows.Forms.Button();
            this.dialFontSizeComboBox = new System.Windows.Forms.ComboBox();
            this.dialLabelFontSize = new System.Windows.Forms.Label();
            this.dialFontComboBox = new System.Windows.Forms.ComboBox();
            this.dialLeftTextTextBox = new System.Windows.Forms.TextBox();
            this.dialAreaTextTextBox = new System.Windows.Forms.TextBox();
            this.dialLeftAndRightTextCheckBox = new System.Windows.Forms.CheckBox();
            this.dialConnerTextCheckBox = new System.Windows.Forms.CheckBox();
            this.dialTimeJetPicker = new System.Windows.Forms.DateTimePicker();
            this.dialAreaTextCheckBox = new System.Windows.Forms.CheckBox();
            this.label11 = new System.Windows.Forms.Label();
            this.dialHandColorScaleMinute = new System.Windows.Forms.ComboBox();
            this.dialHandColorScaleColorHour = new System.Windows.Forms.ComboBox();
            this.dialHandColorScale369 = new System.Windows.Forms.ComboBox();
            this.dialHandColorSecond = new System.Windows.Forms.ComboBox();
            this.dialHandColorMinute = new System.Windows.Forms.ComboBox();
            this.dialHandColorHour = new System.Windows.Forms.ComboBox();
            this.dialNumberSecondHandWidthPlus = new System.Windows.Forms.NumericUpDown();
            this.dialNumberMinuteHandWidthPlus = new System.Windows.Forms.NumericUpDown();
            this.dialNumberHourHandWidthPlus = new System.Windows.Forms.NumericUpDown();
            this.label31 = new System.Windows.Forms.Label();
            this.label32 = new System.Windows.Forms.Label();
            this.label33 = new System.Windows.Forms.Label();
            this.dialLabelScaleShape = new System.Windows.Forms.Label();
            this.dialComboBoxScaleShape = new System.Windows.Forms.ComboBox();
            this.dialLabelHandStyle = new System.Windows.Forms.Label();
            this.dialComboBoxHandStyle = new System.Windows.Forms.ComboBox();
            this.dialLabelSecondHandWidthPlus = new System.Windows.Forms.Label();
            this.dialNumberHourHandPlus = new System.Windows.Forms.NumericUpDown();
            this.dialLabelMinuteHandSizePlus = new System.Windows.Forms.Label();
            this.dialLabelHourHandSizePlus = new System.Windows.Forms.Label();
            this.dialLabelHourHandPlus = new System.Windows.Forms.Label();
            this.dialLabelMinuteHandPlus = new System.Windows.Forms.Label();
            this.dialLabelSecondHandPlus = new System.Windows.Forms.Label();
            this.dialNumnberScaleMinutePlus = new System.Windows.Forms.NumericUpDown();
            this.dialNumberScaleHourPlus = new System.Windows.Forms.NumericUpDown();
            this.dialNumberScaleCrossPlus = new System.Windows.Forms.NumericUpDown();
            this.dialLabelScaleMinutePlus = new System.Windows.Forms.Label();
            this.dialLabelScaleHourPlus = new System.Windows.Forms.Label();
            this.dialLabelScaleCrossPlus = new System.Windows.Forms.Label();
            this.subareaEdgeSetting = new ZHUI.ZhGroupBox();
            this.checkBox2 = new System.Windows.Forms.CheckBox();
            this.checkBox1 = new System.Windows.Forms.CheckBox();
            this.edgeListComboBox = new System.Windows.Forms.ComboBox();
            this.edgeSpeedComboBox = new System.Windows.Forms.ComboBox();
            this.edgeModeComboBox = new System.Windows.Forms.ComboBox();
            this.edgeUseEdge = new System.Windows.Forms.CheckBox();
            this.edgeSpeedLabel = new System.Windows.Forms.Label();
            this.edgeListLabel = new System.Windows.Forms.Label();
            this.edgeModeLabel = new System.Windows.Forms.Label();
            this.generateAnimationZhGroupBox = new ZHUI.ZhGroupBox();
            this.subareaEffectSetting = new ZHUI.ZhGroupBox();
            this.effectLoop = new System.Windows.Forms.ComboBox();
            this.effectStay = new System.Windows.Forms.ComboBox();
            this.effectEntrySpeed = new System.Windows.Forms.ComboBox();
            this.effectExitSpeed = new System.Windows.Forms.ComboBox();
            this.effectEntryType = new System.Windows.Forms.ComboBox();
            this.effectExitType = new System.Windows.Forms.ComboBox();
            this.label25 = new System.Windows.Forms.Label();
            this.label24 = new System.Windows.Forms.Label();
            this.effectLabelEntrySpeed = new System.Windows.Forms.Label();
            this.effectLabelEntryEntry = new System.Windows.Forms.Label();
            this.effectLabelSpeedExitSpeed = new System.Windows.Forms.Label();
            this.effectLabelSpeedExit = new System.Windows.Forms.Label();
            this.counterAttributeBox = new ZHUI.ZhGroupBox();
            this.counterShowUnit = new System.Windows.Forms.CheckBox();
            this.counterTargetHour = new System.Windows.Forms.NumericUpDown();
            this.counterTargetDay = new System.Windows.Forms.NumericUpDown();
            this.counterTargetMonth = new System.Windows.Forms.NumericUpDown();
            this.counterTargetYear = new System.Windows.Forms.NumericUpDown();
            this.CounterNewContentTextBox = new System.Windows.Forms.TextBox();
            this.counterNewSecondUnit = new System.Windows.Forms.ComboBox();
            this.counterNewMinuteUnit = new System.Windows.Forms.ComboBox();
            this.counterNewHourUnit = new System.Windows.Forms.ComboBox();
            this.counterNewYearUnit = new System.Windows.Forms.ComboBox();
            this.counterNewDayUnit = new System.Windows.Forms.ComboBox();
            this.counternewlabel34 = new System.Windows.Forms.Label();
            this.counterNewContentCheckBox = new System.Windows.Forms.CheckBox();
            this.counterNewContentColorComboBox = new System.Windows.Forms.ComboBox();
            this.counterNewColor = new System.Windows.Forms.ComboBox();
            this.counterNewUnderline = new System.Windows.Forms.Button();
            this.counterNewItalic = new System.Windows.Forms.Button();
            this.counterNewBlod = new System.Windows.Forms.Button();
            this.counterNewSize = new System.Windows.Forms.ComboBox();
            this.counterNewFont = new System.Windows.Forms.ComboBox();
            this.counterNewLineModel = new System.Windows.Forms.ComboBox();
            this.counterLabelStartTime = new System.Windows.Forms.Label();
            this.counterOptionYear = new System.Windows.Forms.CheckBox();
            this.counterLabelTargetSecond = new System.Windows.Forms.Label();
            this.counterLabelCounterModel = new System.Windows.Forms.Label();
            this.counterLabelTargetMinute = new System.Windows.Forms.Label();
            this.counterTargetMinute = new System.Windows.Forms.NumericUpDown();
            this.counterLabelElementsSetting = new System.Windows.Forms.Label();
            this.counterLabelTargetDay = new System.Windows.Forms.Label();
            this.counterLabelTargetMonth = new System.Windows.Forms.Label();
            this.counterLabelTargetYear = new System.Windows.Forms.Label();
            this.counterTypeDown = new System.Windows.Forms.RadioButton();
            this.counterTypeUp = new System.Windows.Forms.RadioButton();
            this.counterOptionSecond = new System.Windows.Forms.CheckBox();
            this.counterOptionDay = new System.Windows.Forms.CheckBox();
            this.counterLabelOption = new System.Windows.Forms.Label();
            this.counterOptionHour = new System.Windows.Forms.CheckBox();
            this.counterOptionMinute = new System.Windows.Forms.CheckBox();
            this.animationAttributeBox = new ZHUI.ZhGroupBox();
            this.animationEditor1 = new LedControlSystem.AnimationEditor();
            this.animationPreviewZhGroupBox = new ZHUI.ZhGroupBox();
            this.temperatureAttributeBox = new ZHUI.ZhGroupBox();
            this.temperatureDegreeUnitComboBox = new System.Windows.Forms.ComboBox();
            this.label_TemperatuUnit = new System.Windows.Forms.Label();
            this.temperatureContentTextBox = new System.Windows.Forms.TextBox();
            this.temperatureFontComboBox = new System.Windows.Forms.ComboBox();
            this.temperatureLineModelComboBox = new System.Windows.Forms.ComboBox();
            this.temperatureAlarmOutput = new System.Windows.Forms.ComboBox();
            this.temperatureAlarmType = new System.Windows.Forms.ComboBox();
            this.temperatureMinDegreeNumericUpDown = new System.Windows.Forms.NumericUpDown();
            this.temperatureMaxDegreeNumericUpDown = new System.Windows.Forms.NumericUpDown();
            this.temperatureIsUseContentCheckBox = new System.Windows.Forms.CheckBox();
            this.temperaturelabel13 = new System.Windows.Forms.Label();
            this.temperatureColorComboBox = new System.Windows.Forms.ComboBox();
            this.temperatureUnderline = new System.Windows.Forms.Button();
            this.temperatureItalic = new System.Windows.Forms.Button();
            this.temperatureBold = new System.Windows.Forms.Button();
            this.temperatureSizeComboBox = new System.Windows.Forms.ComboBox();
            this.temperaturelabel6 = new System.Windows.Forms.Label();
            this.temperaturelabel65 = new System.Windows.Forms.Label();
            this.temperaturelabel66 = new System.Windows.Forms.Label();
            this.temperaturelabel61 = new System.Windows.Forms.Label();
            this.temperaturelabel62 = new System.Windows.Forms.Label();
            this.itemBackgroundSettingGroupBox = new ZHUI.ZhGroupBox();
            this.itemBackgroundEffectComboBox = new System.Windows.Forms.ComboBox();
            this.itemBackgroundSizeModel = new System.Windows.Forms.ComboBox();
            this.itemBackgroundGradation = new System.Windows.Forms.ComboBox();
            this.itemBackgroundSpeed = new System.Windows.Forms.ComboBox();
            this.itemBackgroundUseGif = new System.Windows.Forms.CheckBox();
            this.label26 = new System.Windows.Forms.Label();
            this.label23 = new System.Windows.Forms.Label();
            this.itemBackgroundIsUse = new System.Windows.Forms.CheckBox();
            this.itemBackgroundSelectButton = new System.Windows.Forms.Button();
            this.label22 = new System.Windows.Forms.Label();
            this.label21 = new System.Windows.Forms.Label();
            this.subareaAttribute = new ZHUI.ZhGroupBox();
            this.subareaLabelHeight = new System.Windows.Forms.Label();
            this.subareaLabel21 = new System.Windows.Forms.Label();
            this.subareaLabelWidth = new System.Windows.Forms.Label();
            this.subareaTitle = new System.Windows.Forms.TextBox();
            this.subareaLabelY = new System.Windows.Forms.Label();
            this.subareaLocaltionX = new System.Windows.Forms.NumericUpDown();
            this.subareaLabelX = new System.Windows.Forms.Label();
            this.subareaSizeWidth = new System.Windows.Forms.NumericUpDown();
            this.subareaSizeHeight = new System.Windows.Forms.NumericUpDown();
            this.subareaLocaltionY = new System.Windows.Forms.NumericUpDown();
            this.zhGroupBox_Panel = new ZHUI.ZhGroupBox();
            this.panelToolStrip = new System.Windows.Forms.ToolStrip();
            this.toolAlignRightLeft = new System.Windows.Forms.ToolStripButton();
            this.toolAlignTopBottom = new System.Windows.Forms.ToolStripButton();
            this.toolAlignLeft = new System.Windows.Forms.ToolStripButton();
            this.toolAlignRight = new System.Windows.Forms.ToolStripButton();
            this.toolAlignTop = new System.Windows.Forms.ToolStripButton();
            this.toolAlignBottom = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator6 = new System.Windows.Forms.ToolStripSeparator();
            this.toolPrevousPage = new System.Windows.Forms.ToolStripButton();
            this.toolStripLabelPageNumber = new System.Windows.Forms.ToolStripLabel();
            this.toolNextPage = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator7 = new System.Windows.Forms.ToolStripSeparator();
            this.toolUpAdjustButton = new System.Windows.Forms.ToolStripButton();
            this.MarqueeOffsetYValue = new System.Windows.Forms.ToolStripLabel();
            this.toolDownAdjustButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator9 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStretchButton = new System.Windows.Forms.ToolStripButton();
            this.StretchLabel = new System.Windows.Forms.ToolStripLabel();
            this.toolNarrowButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator8 = new System.Windows.Forms.ToolStripSeparator();
            this.maginfyToolsPanel = new System.Windows.Forms.ToolStripButton();
            this.zoonToolsPanel = new System.Windows.Forms.ToolStripLabel();
            this.minifyToolsPanel = new System.Windows.Forms.ToolStripButton();
            this.originalZoonToolsPanel = new System.Windows.Forms.ToolStripButton();
            this.panel_Item = new System.Windows.Forms.Panel();
            this.panel_Waitting = new System.Windows.Forms.Panel();
            this.label_Waitting_Picture = new System.Windows.Forms.Label();
            this.pictureBox2 = new System.Windows.Forms.PictureBox();
            this.panelCover = new System.Windows.Forms.Panel();
            this.panelEdgeBottom = new System.Windows.Forms.Panel();
            this.panelEdgeRight = new System.Windows.Forms.Panel();
            this.panelEdgeLeft = new System.Windows.Forms.Panel();
            this.screenPanelMain = new System.Windows.Forms.Panel();
            this.panelEdgeTop = new System.Windows.Forms.Panel();
            this.zhGroupBox_Tree = new ZHUI.ZhGroupBox();
            this.ledTree = new System.Windows.Forms.TreeView();
            this.contentBackgroundSettingGroupBox = new ZHUI.ZhGroupBox();
            this.contentBackgroundUseGif = new System.Windows.Forms.CheckBox();
            this.contentBackgroundEffectComboBox = new System.Windows.Forms.ComboBox();
            this.label30 = new System.Windows.Forms.Label();
            this.label27 = new System.Windows.Forms.Label();
            this.contentBackgroundIsUse = new System.Windows.Forms.CheckBox();
            this.contentBackgroundSize = new System.Windows.Forms.ComboBox();
            this.contentBackgroundGradition = new System.Windows.Forms.ComboBox();
            this.contentBackgroundSelect = new System.Windows.Forms.Button();
            this.label28 = new System.Windows.Forms.Label();
            this.label29 = new System.Windows.Forms.Label();
            this.contentBackgroundSpeed = new System.Windows.Forms.ComboBox();
            this.itemPlaySettingGroupBox = new ZHUI.ZhGroupBox();
            this.itemByTimeLengthPanel = new System.Windows.Forms.Panel();
            this.itemPlayLengthMinute = new System.Windows.Forms.NumericUpDown();
            this.label17 = new System.Windows.Forms.Label();
            this.itemPlayLengthHour = new System.Windows.Forms.NumericUpDown();
            this.label20 = new System.Windows.Forms.Label();
            this.itemPlayLengthDay = new System.Windows.Forms.NumericUpDown();
            this.label16 = new System.Windows.Forms.Label();
            this.label18 = new System.Windows.Forms.Label();
            this.label19 = new System.Windows.Forms.Label();
            this.itemPlayLengthSecond = new System.Windows.Forms.NumericUpDown();
            this.itemByNumPanel = new System.Windows.Forms.Panel();
            this.label3 = new System.Windows.Forms.Label();
            this.itemPlaySeetingPlayNum = new System.Windows.Forms.NumericUpDown();
            this.itemByAstTimerPanel = new System.Windows.Forms.Panel();
            this.itemByNumRadioButton = new System.Windows.Forms.RadioButton();
            this.itemByTimeLengthRadioButton = new System.Windows.Forms.RadioButton();
            this.itemByAstTimerRadioButton = new System.Windows.Forms.RadioButton();
            this.label14 = new System.Windows.Forms.Label();
            this.menuStrip1.SuspendLayout();
            this.contextMenuStripSubarea.SuspendLayout();
            this.contextMenuStripPanel.SuspendLayout();
            this.contextMenuStripItem.SuspendLayout();
            this.contextMenuStripContent.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_LeftTop)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_RightTop)).BeginInit();
            this.panel_Top.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picLogo)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picCloudLoginInfo)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Close)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Max)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Min)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_BorderLeftBottom)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_BorderRightBottom)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_BorderRightTop)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_BorderLeftTop)).BeginInit();
            this.panel_Nagivator.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_String)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Weather)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_FindDeviceWifi)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Usb)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Send)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Play)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_FindDevice)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Delete)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Score)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Noise)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Humidity)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Temperature)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Lunar)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Counter)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Dial)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Clock)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Marquee)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Animation)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Text)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Item)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Save)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Open)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Spliter2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Spliter1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_ChangeSize)).BeginInit();
            this.contextMenuStrip1_Marquee.SuspendLayout();
            this.contextMenuStripSharedSource.SuspendLayout();
            this.contextMenuStripShared.SuspendLayout();
            this.StringEffectSettingzhGroupBox.SuspendLayout();
            this.stringAttributeBox.SuspendLayout();
            this.zhGroupBoxItemBackground.SuspendLayout();
            this.zhGroupBoxContentBackground.SuspendLayout();
            this.WeatherEffectSettingzhGroupBox.SuspendLayout();
            this.weatherAttributeBox.SuspendLayout();
            this.lunarAttributeBox.SuspendLayout();
            this.textAttributeBox.SuspendLayout();
            this.marqueeAttributeBox.SuspendLayout();
            this.itemEdgeSettingGroupBox.SuspendLayout();
            this.zhGroupBox_PanelAttribute.SuspendLayout();
            this.groupBox11.SuspendLayout();
            this.groupBox1.SuspendLayout();
            this.AnimationEffectSettingzhGroupBox.SuspendLayout();
            this.clockAttributeBox.SuspendLayout();
            this.ItemAttribute.SuspendLayout();
            this.itemByPeroidGroupBox.SuspendLayout();
            this.itemPlayTimerByDatePanel.SuspendLayout();
            this.itemPlayTimerByWeekPanel.SuspendLayout();
            this.dialAttributeBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberSecondHandPlus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberMinuteHandPlus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialElementLeftDown)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialElementUp)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialElementRight)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialElementLeft)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberSecondHandWidthPlus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberMinuteHandWidthPlus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberHourHandWidthPlus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberHourHandPlus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumnberScaleMinutePlus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberScaleHourPlus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberScaleCrossPlus)).BeginInit();
            this.subareaEdgeSetting.SuspendLayout();
            this.subareaEffectSetting.SuspendLayout();
            this.counterAttributeBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetHour)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetDay)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetMonth)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetYear)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetMinute)).BeginInit();
            this.animationAttributeBox.SuspendLayout();
            this.temperatureAttributeBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.temperatureMinDegreeNumericUpDown)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.temperatureMaxDegreeNumericUpDown)).BeginInit();
            this.itemBackgroundSettingGroupBox.SuspendLayout();
            this.subareaAttribute.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.subareaLocaltionX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.subareaSizeWidth)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.subareaSizeHeight)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.subareaLocaltionY)).BeginInit();
            this.zhGroupBox_Panel.SuspendLayout();
            this.panelToolStrip.SuspendLayout();
            this.panel_Item.SuspendLayout();
            this.panel_Waitting.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox2)).BeginInit();
            this.panelCover.SuspendLayout();
            this.zhGroupBox_Tree.SuspendLayout();
            this.contentBackgroundSettingGroupBox.SuspendLayout();
            this.itemPlaySettingGroupBox.SuspendLayout();
            this.itemByTimeLengthPanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlayLengthMinute)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlayLengthHour)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlayLengthDay)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlayLengthSecond)).BeginInit();
            this.itemByNumPanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlaySeetingPlayNum)).BeginInit();
            this.SuspendLayout();
            // 
            // menuStrip1
            // 
            this.menuStrip1.BackColor = System.Drawing.Color.Transparent;
            this.menuStrip1.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip1.Font = new System.Drawing.Font("宋体", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.editMenuToolStripMenuItem,
            this.setingMenuToolStripMenuItem,
            this.tsmiGroup,
            this.languateSelectToolStripMenuItem,
            this.skinSelectToolStripMenuItem,
            this.helpToolStripMenuItem,
            this.testStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(246, 3);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(365, 24);
            this.menuStrip1.TabIndex = 0;
            this.menuStrip1.Text = "menuStrip1";
            this.menuStrip1.DoubleClick += new System.EventHandler(this.menuStrip1_DoubleClick);
            this.menuStrip1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.gPanelTitleBack_MouseDown);
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.BackColor = System.Drawing.Color.Transparent;
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.openProjectToolStripMenuItem,
            this.newPorjectToolStripMenuItem,
            this.projectSavaAsToolStripMenuItem,
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.ForeColor = System.Drawing.Color.White;
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(51, 20);
            this.fileToolStripMenuItem.Text = "文件";
            // 
            // openProjectToolStripMenuItem
            // 
            this.openProjectToolStripMenuItem.Name = "openProjectToolStripMenuItem";
            this.openProjectToolStripMenuItem.Size = new System.Drawing.Size(138, 22);
            this.openProjectToolStripMenuItem.Text = "打开工程";
            this.openProjectToolStripMenuItem.Click += new System.EventHandler(this.openProjectToolStripMenuItem_Click);
            this.openProjectToolStripMenuItem.MouseEnter += new System.EventHandler(this.MenuItemMouseEnter);
            this.openProjectToolStripMenuItem.MouseLeave += new System.EventHandler(this.MenuItemMouseLeave);
            this.openProjectToolStripMenuItem.Paint += new System.Windows.Forms.PaintEventHandler(this.MenuItemPaint);
            // 
            // newPorjectToolStripMenuItem
            // 
            this.newPorjectToolStripMenuItem.Name = "newPorjectToolStripMenuItem";
            this.newPorjectToolStripMenuItem.Size = new System.Drawing.Size(138, 22);
            this.newPorjectToolStripMenuItem.Text = "新建工程";
            this.newPorjectToolStripMenuItem.Click += new System.EventHandler(this.newPorjectToolStripMenuItem_Click);
            // 
            // projectSavaAsToolStripMenuItem
            // 
            this.projectSavaAsToolStripMenuItem.Name = "projectSavaAsToolStripMenuItem";
            this.projectSavaAsToolStripMenuItem.Size = new System.Drawing.Size(138, 22);
            this.projectSavaAsToolStripMenuItem.Text = "另存为";
            this.projectSavaAsToolStripMenuItem.Click += new System.EventHandler(this.projectSavaAsToolStripMenuItem_Click);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(138, 22);
            this.exitToolStripMenuItem.Text = "退出";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // editMenuToolStripMenuItem
            // 
            this.editMenuToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.addItemToolStripMenuItem,
            this.toolStripSeparator1,
            this.addTextToolStripMenuItem,
            this.addAnimationToolStripMenuItem,
            this.addMarqueeToolStripMenuItem,
            this.addClockToolStripMenuItem,
            this.addDialToolStripMenuItem,
            this.addMenuToolStripMenuItem,
            this.addLunarToolStripMenuItem,
            this.addTemperatureToolStripMenuItem,
            this.addWeatherToolStripMenuItem,
            this.addStringToolStripMenuItem,
            this.addNoiseToolStripMenuItem,
            this.addHumidityToolStripMenuItem,
            this.zhToolStripSeparator2,
            this.EditStringLibraryToolStripMenuItem,
            this.EditPublicTextToolStripMenuItem,
            this.EditDataSourceToolStripMenuItem,
            this.zhToolStripSeparator3,
            this.deleteSelectionToolStripMenuItem,
            this.gPRSManagementToolStripMenuItem});
            this.editMenuToolStripMenuItem.ForeColor = System.Drawing.Color.White;
            this.editMenuToolStripMenuItem.Name = "editMenuToolStripMenuItem";
            this.editMenuToolStripMenuItem.Size = new System.Drawing.Size(51, 20);
            this.editMenuToolStripMenuItem.Text = "编辑";
            // 
            // addItemToolStripMenuItem
            // 
            this.addItemToolStripMenuItem.Name = "addItemToolStripMenuItem";
            this.addItemToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addItemToolStripMenuItem.Text = "添加节目";
            this.addItemToolStripMenuItem.Click += new System.EventHandler(this.addItemToolStripMenuItem_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.BackColor = System.Drawing.SystemColors.MenuHighlight;
            this.toolStripSeparator1.ForeColor = System.Drawing.Color.OrangeRed;
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(139, 6);
            // 
            // addTextToolStripMenuItem
            // 
            this.addTextToolStripMenuItem.Name = "addTextToolStripMenuItem";
            this.addTextToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addTextToolStripMenuItem.Tag = "Subtitle";
            this.addTextToolStripMenuItem.Text = "添加字幕";
            this.addTextToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addAnimationToolStripMenuItem
            // 
            this.addAnimationToolStripMenuItem.Name = "addAnimationToolStripMenuItem";
            this.addAnimationToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addAnimationToolStripMenuItem.Tag = "Animation";
            this.addAnimationToolStripMenuItem.Text = "添加动画";
            this.addAnimationToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addMarqueeToolStripMenuItem
            // 
            this.addMarqueeToolStripMenuItem.Name = "addMarqueeToolStripMenuItem";
            this.addMarqueeToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addMarqueeToolStripMenuItem.Tag = "PictureText";
            this.addMarqueeToolStripMenuItem.Text = "添加图文";
            this.addMarqueeToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addClockToolStripMenuItem
            // 
            this.addClockToolStripMenuItem.Name = "addClockToolStripMenuItem";
            this.addClockToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addClockToolStripMenuItem.Tag = "Time";
            this.addClockToolStripMenuItem.Text = "添加时间";
            this.addClockToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addDialToolStripMenuItem
            // 
            this.addDialToolStripMenuItem.Name = "addDialToolStripMenuItem";
            this.addDialToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addDialToolStripMenuItem.Tag = "Dial";
            this.addDialToolStripMenuItem.Text = "添加表盘";
            this.addDialToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addMenuToolStripMenuItem
            // 
            this.addMenuToolStripMenuItem.Name = "addMenuToolStripMenuItem";
            this.addMenuToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addMenuToolStripMenuItem.Tag = "Counter";
            this.addMenuToolStripMenuItem.Text = "添加计时";
            this.addMenuToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addLunarToolStripMenuItem
            // 
            this.addLunarToolStripMenuItem.DoubleClickEnabled = true;
            this.addLunarToolStripMenuItem.Name = "addLunarToolStripMenuItem";
            this.addLunarToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addLunarToolStripMenuItem.Tag = "Lunar";
            this.addLunarToolStripMenuItem.Text = "添加农历";
            this.addLunarToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addTemperatureToolStripMenuItem
            // 
            this.addTemperatureToolStripMenuItem.Name = "addTemperatureToolStripMenuItem";
            this.addTemperatureToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addTemperatureToolStripMenuItem.Tag = "Temperature";
            this.addTemperatureToolStripMenuItem.Text = "添加温度";
            this.addTemperatureToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addWeatherToolStripMenuItem
            // 
            this.addWeatherToolStripMenuItem.Name = "addWeatherToolStripMenuItem";
            this.addWeatherToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addWeatherToolStripMenuItem.Tag = "Weather";
            this.addWeatherToolStripMenuItem.Text = "添加天气";
            this.addWeatherToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addStringToolStripMenuItem
            // 
            this.addStringToolStripMenuItem.Name = "addStringToolStripMenuItem";
            this.addStringToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addStringToolStripMenuItem.Tag = "String";
            this.addStringToolStripMenuItem.Text = "添加字符";
            this.addStringToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addNoiseToolStripMenuItem
            // 
            this.addNoiseToolStripMenuItem.Name = "addNoiseToolStripMenuItem";
            this.addNoiseToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addNoiseToolStripMenuItem.Tag = "Noise";
            this.addNoiseToolStripMenuItem.Text = "添加噪声";
            this.addNoiseToolStripMenuItem.Visible = false;
            this.addNoiseToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addHumidityToolStripMenuItem
            // 
            this.addHumidityToolStripMenuItem.Name = "addHumidityToolStripMenuItem";
            this.addHumidityToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.addHumidityToolStripMenuItem.Tag = "Humidity";
            this.addHumidityToolStripMenuItem.Text = "添加湿度";
            this.addHumidityToolStripMenuItem.Visible = false;
            this.addHumidityToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolStripSeparator2
            // 
            this.zhToolStripSeparator2.Name = "zhToolStripSeparator2";
            this.zhToolStripSeparator2.Size = new System.Drawing.Size(139, 6);
            // 
            // EditStringLibraryToolStripMenuItem
            // 
            this.EditStringLibraryToolStripMenuItem.Name = "EditStringLibraryToolStripMenuItem";
            this.EditStringLibraryToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.EditStringLibraryToolStripMenuItem.Text = "字符字库";
            this.EditStringLibraryToolStripMenuItem.Click += new System.EventHandler(this.EditStringLibraryToolStripMenuItem_Click);
            // 
            // EditPublicTextToolStripMenuItem
            // 
            this.EditPublicTextToolStripMenuItem.Name = "EditPublicTextToolStripMenuItem";
            this.EditPublicTextToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.EditPublicTextToolStripMenuItem.Text = "公共文本";
            this.EditPublicTextToolStripMenuItem.Click += new System.EventHandler(this.EditPublicTextToolStripMenuItem_Click);
            // 
            // EditDataSourceToolStripMenuItem
            // 
            this.EditDataSourceToolStripMenuItem.Name = "EditDataSourceToolStripMenuItem";
            this.EditDataSourceToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.EditDataSourceToolStripMenuItem.Text = "数据源";
            this.EditDataSourceToolStripMenuItem.Click += new System.EventHandler(this.EditDataSourceToolStripMenuItem_Click);
            // 
            // zhToolStripSeparator3
            // 
            this.zhToolStripSeparator3.Name = "zhToolStripSeparator3";
            this.zhToolStripSeparator3.Size = new System.Drawing.Size(139, 6);
            // 
            // deleteSelectionToolStripMenuItem
            // 
            this.deleteSelectionToolStripMenuItem.Name = "deleteSelectionToolStripMenuItem";
            this.deleteSelectionToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.deleteSelectionToolStripMenuItem.Text = "删除选项";
            this.deleteSelectionToolStripMenuItem.Click += new System.EventHandler(this.zhToolButton_Delete_Click);
            // 
            // gPRSManagementToolStripMenuItem
            // 
            this.gPRSManagementToolStripMenuItem.Name = "gPRSManagementToolStripMenuItem";
            this.gPRSManagementToolStripMenuItem.Size = new System.Drawing.Size(142, 22);
            this.gPRSManagementToolStripMenuItem.Text = "GPRS管理";
            this.gPRSManagementToolStripMenuItem.Visible = false;
            this.gPRSManagementToolStripMenuItem.Click += new System.EventHandler(this.gPRS管理ToolStripMenuItem_Click);
            // 
            // setingMenuToolStripMenuItem
            // 
            this.setingMenuToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.panelSettingToolStripMenuItem,
            this.zhtssSetting1,
            this.luminanceSettingToolStripMenuItem,
            this.timingRegulateToolStripMenuItem,
            this.turnOfToolStripMenuItem2,
            this.turnOnToolStripMenuItem1,
            this.autoStartAndCloseToolStripMenuItem,
            this.queryPanelStateToolStripMenuItem,
            this.zhtssSetting2,
            this.tsmiEthernetSettings,
            this.tsmiGPRSSettings,
            this.zhtssSetting3,
            this.serialTestToolStripMenuItem3,
            this.zhtssSetting4,
            this.ethernetUpdateToolStripMenuItem,
            this.uSBUpdateToolStripMenuItem,
            this.zhtssSetting5,
            this.saveWifiDataToolStripMenuItemToolStripMenuItem,
            this.buttonFunctionConfigurationToolStripMenuItem,
            this.timeSequenceToolStripMenuItem,
            this.SendAll_ReSend_ToolStripMenuItem,
            this.gprsSendToolStripMenuItem,
            this.configToolStripMenuItem});
            this.setingMenuToolStripMenuItem.ForeColor = System.Drawing.Color.White;
            this.setingMenuToolStripMenuItem.Name = "setingMenuToolStripMenuItem";
            this.setingMenuToolStripMenuItem.Size = new System.Drawing.Size(51, 20);
            this.setingMenuToolStripMenuItem.Text = "设置";
            // 
            // panelSettingToolStripMenuItem
            // 
            this.panelSettingToolStripMenuItem.Name = "panelSettingToolStripMenuItem";
            this.panelSettingToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.panelSettingToolStripMenuItem.Text = "屏幕设置";
            this.panelSettingToolStripMenuItem.Click += new System.EventHandler(this.panelSettingToolStripMenuItem_Click);
            // 
            // zhtssSetting1
            // 
            this.zhtssSetting1.BackColor = System.Drawing.Color.Fuchsia;
            this.zhtssSetting1.ForeColor = System.Drawing.SystemColors.MenuHighlight;
            this.zhtssSetting1.Name = "zhtssSetting1";
            this.zhtssSetting1.Size = new System.Drawing.Size(203, 6);
            // 
            // luminanceSettingToolStripMenuItem
            // 
            this.luminanceSettingToolStripMenuItem.Name = "luminanceSettingToolStripMenuItem";
            this.luminanceSettingToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.luminanceSettingToolStripMenuItem.Text = "亮度设置";
            this.luminanceSettingToolStripMenuItem.Click += new System.EventHandler(this.luminanceSettingToolStripMenuItem_Click);
            // 
            // timingRegulateToolStripMenuItem
            // 
            this.timingRegulateToolStripMenuItem.Name = "timingRegulateToolStripMenuItem";
            this.timingRegulateToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.timingRegulateToolStripMenuItem.Text = "校时";
            this.timingRegulateToolStripMenuItem.Click += new System.EventHandler(this.timingRegulateToolStripMenuItem_Click);
            // 
            // turnOfToolStripMenuItem2
            // 
            this.turnOfToolStripMenuItem2.Name = "turnOfToolStripMenuItem2";
            this.turnOfToolStripMenuItem2.Size = new System.Drawing.Size(206, 22);
            this.turnOfToolStripMenuItem2.Text = "强制关机";
            this.turnOfToolStripMenuItem2.Click += new System.EventHandler(this.turnOfToolStripMenuItem2_Click);
            // 
            // turnOnToolStripMenuItem1
            // 
            this.turnOnToolStripMenuItem1.Name = "turnOnToolStripMenuItem1";
            this.turnOnToolStripMenuItem1.Size = new System.Drawing.Size(206, 22);
            this.turnOnToolStripMenuItem1.Text = "强制开机";
            this.turnOnToolStripMenuItem1.Click += new System.EventHandler(this.turnOnToolStripMenuItem1_Click);
            // 
            // autoStartAndCloseToolStripMenuItem
            // 
            this.autoStartAndCloseToolStripMenuItem.Name = "autoStartAndCloseToolStripMenuItem";
            this.autoStartAndCloseToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.autoStartAndCloseToolStripMenuItem.Text = "定时开关机";
            this.autoStartAndCloseToolStripMenuItem.Click += new System.EventHandler(this.autoStartAndCloseToolStripMenuItem_Click);
            // 
            // queryPanelStateToolStripMenuItem
            // 
            this.queryPanelStateToolStripMenuItem.Name = "queryPanelStateToolStripMenuItem";
            this.queryPanelStateToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.queryPanelStateToolStripMenuItem.Text = "查询显示屏状态";
            this.queryPanelStateToolStripMenuItem.Visible = false;
            this.queryPanelStateToolStripMenuItem.Click += new System.EventHandler(this.queryPanelStateToolStripMenuItem_Click);
            // 
            // zhtssSetting2
            // 
            this.zhtssSetting2.BackColor = System.Drawing.Color.Fuchsia;
            this.zhtssSetting2.ForeColor = System.Drawing.SystemColors.MenuHighlight;
            this.zhtssSetting2.Name = "zhtssSetting2";
            this.zhtssSetting2.Size = new System.Drawing.Size(203, 6);
            // 
            // tsmiEthernetSettings
            // 
            this.tsmiEthernetSettings.Name = "tsmiEthernetSettings";
            this.tsmiEthernetSettings.Size = new System.Drawing.Size(206, 22);
            this.tsmiEthernetSettings.Text = "控制卡网络配置";
            this.tsmiEthernetSettings.Click += new System.EventHandler(this.tsmiEthernetSettings_Click);
            // 
            // tsmiGPRSSettings
            // 
            this.tsmiGPRSSettings.Name = "tsmiGPRSSettings";
            this.tsmiGPRSSettings.Size = new System.Drawing.Size(206, 22);
            this.tsmiGPRSSettings.Text = "控制卡GPRS配置";
            this.tsmiGPRSSettings.Click += new System.EventHandler(this.tsmiGPRSSettings_Click);
            // 
            // zhtssSetting3
            // 
            this.zhtssSetting3.Name = "zhtssSetting3";
            this.zhtssSetting3.Size = new System.Drawing.Size(203, 6);
            // 
            // serialTestToolStripMenuItem3
            // 
            this.serialTestToolStripMenuItem3.Name = "serialTestToolStripMenuItem3";
            this.serialTestToolStripMenuItem3.Size = new System.Drawing.Size(206, 22);
            this.serialTestToolStripMenuItem3.Text = "串口测试工具";
            this.serialTestToolStripMenuItem3.Click += new System.EventHandler(this.serialTestToolStripMenuItem3_Click);
            // 
            // zhtssSetting4
            // 
            this.zhtssSetting4.Name = "zhtssSetting4";
            this.zhtssSetting4.Size = new System.Drawing.Size(203, 6);
            // 
            // ethernetUpdateToolStripMenuItem
            // 
            this.ethernetUpdateToolStripMenuItem.Name = "ethernetUpdateToolStripMenuItem";
            this.ethernetUpdateToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.ethernetUpdateToolStripMenuItem.Text = "网络程序升级";
            this.ethernetUpdateToolStripMenuItem.Click += new System.EventHandler(this.ethernetUpdateToolStripMenuItem_Click);
            // 
            // uSBUpdateToolStripMenuItem
            // 
            this.uSBUpdateToolStripMenuItem.Name = "uSBUpdateToolStripMenuItem";
            this.uSBUpdateToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.uSBUpdateToolStripMenuItem.Text = "U盘程序升级";
            this.uSBUpdateToolStripMenuItem.Click += new System.EventHandler(this.uSBUpdateToolStripMenuItem_Click);
            // 
            // zhtssSetting5
            // 
            this.zhtssSetting5.Name = "zhtssSetting5";
            this.zhtssSetting5.Size = new System.Drawing.Size(203, 6);
            // 
            // saveWifiDataToolStripMenuItemToolStripMenuItem
            // 
            this.saveWifiDataToolStripMenuItemToolStripMenuItem.Name = "saveWifiDataToolStripMenuItemToolStripMenuItem";
            this.saveWifiDataToolStripMenuItemToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.saveWifiDataToolStripMenuItemToolStripMenuItem.Text = "保存Wifi转发数据";
            this.saveWifiDataToolStripMenuItemToolStripMenuItem.Click += new System.EventHandler(this.saveWifiDataToolStripMenuItemToolStripMenuItem_Click);
            // 
            // buttonFunctionConfigurationToolStripMenuItem
            // 
            this.buttonFunctionConfigurationToolStripMenuItem.Name = "buttonFunctionConfigurationToolStripMenuItem";
            this.buttonFunctionConfigurationToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.buttonFunctionConfigurationToolStripMenuItem.Text = "按钮功能配置";
            this.buttonFunctionConfigurationToolStripMenuItem.Click += new System.EventHandler(this.buttonFunctionConfigurationToolStripMenuItem_Click);
            // 
            // timeSequenceToolStripMenuItem
            // 
            this.timeSequenceToolStripMenuItem.Name = "timeSequenceToolStripMenuItem";
            this.timeSequenceToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.timeSequenceToolStripMenuItem.Text = "时序设置";
            this.timeSequenceToolStripMenuItem.Click += new System.EventHandler(this.timeSequenceToolStripMenuItem_Click);
            // 
            // SendAll_ReSend_ToolStripMenuItem
            // 
            this.SendAll_ReSend_ToolStripMenuItem.Name = "SendAll_ReSend_ToolStripMenuItem";
            this.SendAll_ReSend_ToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.SendAll_ReSend_ToolStripMenuItem.Text = "全发送(补发)";
            this.SendAll_ReSend_ToolStripMenuItem.Visible = false;
            this.SendAll_ReSend_ToolStripMenuItem.Click += new System.EventHandler(this.SendAll_ReSend_ToolStripMenuItem_Click);
            // 
            // gprsSendToolStripMenuItem
            // 
            this.gprsSendToolStripMenuItem.Name = "gprsSendToolStripMenuItem";
            this.gprsSendToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.gprsSendToolStripMenuItem.Text = "GPRS发送";
            this.gprsSendToolStripMenuItem.Visible = false;
            this.gprsSendToolStripMenuItem.Click += new System.EventHandler(this.gprsSendToolStripMenuItem_Click_1);
            // 
            // configToolStripMenuItem
            // 
            this.configToolStripMenuItem.Name = "configToolStripMenuItem";
            this.configToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
            this.configToolStripMenuItem.Text = "系统设置";
            this.configToolStripMenuItem.Visible = false;
            this.configToolStripMenuItem.Click += new System.EventHandler(this.configToolStripMenuItem_Click);
            // 
            // tsmiGroup
            // 
            this.tsmiGroup.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.tsmiLocalServerSetting,
            this.zhtssGroup1,
            this.tsmiCloudLogin,
            this.tsmiCloudLogout,
            this.tsmiCloudRegister,
            this.tsmiCloudQueryReview,
            this.tsmiCloudManagement,
            this.zhtssGroup2,
            this.tsmiGroupLuminance,
            this.tsmiGroupTiming,
            this.tsmiGroupPowerOff,
            this.tsmiGroupPowerOn,
            this.tsmiGroupTimerSwitch,
            this.zhtssGroup3,
            this.tsmiGroupSending});
            this.tsmiGroup.ForeColor = System.Drawing.Color.White;
            this.tsmiGroup.Name = "tsmiGroup";
            this.tsmiGroup.Size = new System.Drawing.Size(51, 20);
            this.tsmiGroup.Text = "群组";
            // 
            // tsmiLocalServerSetting
            // 
            this.tsmiLocalServerSetting.Name = "tsmiLocalServerSetting";
            this.tsmiLocalServerSetting.Size = new System.Drawing.Size(195, 22);
            this.tsmiLocalServerSetting.Text = "本地服务器设置";
            this.tsmiLocalServerSetting.Click += new System.EventHandler(this.tsmiLocalServerSetting_Click);
            // 
            // zhtssGroup1
            // 
            this.zhtssGroup1.Name = "zhtssGroup1";
            this.zhtssGroup1.Size = new System.Drawing.Size(192, 6);
            // 
            // tsmiCloudLogin
            // 
            this.tsmiCloudLogin.Name = "tsmiCloudLogin";
            this.tsmiCloudLogin.Size = new System.Drawing.Size(195, 22);
            this.tsmiCloudLogin.Text = "云服务登录";
            this.tsmiCloudLogin.Click += new System.EventHandler(this.tsmiCloudLogin_Click);
            // 
            // tsmiCloudLogout
            // 
            this.tsmiCloudLogout.Name = "tsmiCloudLogout";
            this.tsmiCloudLogout.Size = new System.Drawing.Size(195, 22);
            this.tsmiCloudLogout.Text = "云服务退出";
            this.tsmiCloudLogout.Click += new System.EventHandler(this.tsmiCloudLogout_Click);
            // 
            // tsmiCloudRegister
            // 
            this.tsmiCloudRegister.Name = "tsmiCloudRegister";
            this.tsmiCloudRegister.Size = new System.Drawing.Size(195, 22);
            this.tsmiCloudRegister.Text = "云服务注册";
            this.tsmiCloudRegister.Click += new System.EventHandler(this.tsmiCloudRegister_Click);
            // 
            // tsmiCloudQueryReview
            // 
            this.tsmiCloudQueryReview.Name = "tsmiCloudQueryReview";
            this.tsmiCloudQueryReview.Size = new System.Drawing.Size(195, 22);
            this.tsmiCloudQueryReview.Text = "云服务查询/审核";
            this.tsmiCloudQueryReview.Click += new System.EventHandler(this.tsmiCloudQueryReview_Click);
            // 
            // tsmiCloudManagement
            // 
            this.tsmiCloudManagement.Name = "tsmiCloudManagement";
            this.tsmiCloudManagement.Size = new System.Drawing.Size(195, 22);
            this.tsmiCloudManagement.Text = "云服务管理";
            this.tsmiCloudManagement.Click += new System.EventHandler(this.tsmiCloudManagement_Click);
            // 
            // zhtssGroup2
            // 
            this.zhtssGroup2.Name = "zhtssGroup2";
            this.zhtssGroup2.Size = new System.Drawing.Size(192, 6);
            // 
            // tsmiGroupLuminance
            // 
            this.tsmiGroupLuminance.Name = "tsmiGroupLuminance";
            this.tsmiGroupLuminance.Size = new System.Drawing.Size(195, 22);
            this.tsmiGroupLuminance.Text = "群组亮度设置";
            this.tsmiGroupLuminance.Click += new System.EventHandler(this.tsmiGroupLuminance_Click);
            // 
            // tsmiGroupTiming
            // 
            this.tsmiGroupTiming.Name = "tsmiGroupTiming";
            this.tsmiGroupTiming.Size = new System.Drawing.Size(195, 22);
            this.tsmiGroupTiming.Text = "群组校时";
            this.tsmiGroupTiming.Click += new System.EventHandler(this.tsmiGroupTiming_Click);
            // 
            // tsmiGroupPowerOff
            // 
            this.tsmiGroupPowerOff.Name = "tsmiGroupPowerOff";
            this.tsmiGroupPowerOff.Size = new System.Drawing.Size(195, 22);
            this.tsmiGroupPowerOff.Text = "群组关机";
            this.tsmiGroupPowerOff.Click += new System.EventHandler(this.tsmiGroupPowerOff_Click);
            // 
            // tsmiGroupPowerOn
            // 
            this.tsmiGroupPowerOn.Name = "tsmiGroupPowerOn";
            this.tsmiGroupPowerOn.Size = new System.Drawing.Size(195, 22);
            this.tsmiGroupPowerOn.Text = "群组开机";
            this.tsmiGroupPowerOn.Click += new System.EventHandler(this.tsmiGroupPowerOn_Click);
            // 
            // tsmiGroupTimerSwitch
            // 
            this.tsmiGroupTimerSwitch.Name = "tsmiGroupTimerSwitch";
            this.tsmiGroupTimerSwitch.Size = new System.Drawing.Size(195, 22);
            this.tsmiGroupTimerSwitch.Text = "群组定时开关机";
            this.tsmiGroupTimerSwitch.Click += new System.EventHandler(this.tsmiGroupTimerSwitch_Click);
            // 
            // zhtssGroup3
            // 
            this.zhtssGroup3.Name = "zhtssGroup3";
            this.zhtssGroup3.Size = new System.Drawing.Size(192, 6);
            // 
            // tsmiGroupSending
            // 
            this.tsmiGroupSending.Name = "tsmiGroupSending";
            this.tsmiGroupSending.Size = new System.Drawing.Size(195, 22);
            this.tsmiGroupSending.Text = "群组发送";
            this.tsmiGroupSending.Click += new System.EventHandler(this.tsmiGroupSending_Click);
            // 
            // languateSelectToolStripMenuItem
            // 
            this.languateSelectToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.multiLanguageTemplatetoolStripMenuItem1});
            this.languateSelectToolStripMenuItem.ForeColor = System.Drawing.Color.White;
            this.languateSelectToolStripMenuItem.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
            this.languateSelectToolStripMenuItem.Name = "languateSelectToolStripMenuItem";
            this.languateSelectToolStripMenuItem.Size = new System.Drawing.Size(51, 20);
            this.languateSelectToolStripMenuItem.Text = "语言";
            // 
            // multiLanguageTemplatetoolStripMenuItem1
            // 
            this.multiLanguageTemplatetoolStripMenuItem1.Name = "multiLanguageTemplatetoolStripMenuItem1";
            this.multiLanguageTemplatetoolStripMenuItem1.Size = new System.Drawing.Size(154, 22);
            this.multiLanguageTemplatetoolStripMenuItem1.Text = "多语言模板";
            this.multiLanguageTemplatetoolStripMenuItem1.Visible = false;
            this.multiLanguageTemplatetoolStripMenuItem1.Click += new System.EventHandler(this.multiLanguageTemplatetoolStripMenuItem1_Click);
            // 
            // skinSelectToolStripMenuItem
            // 
            this.skinSelectToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.Skin_DefaultToolStripMenuItem,
            this.skin1ToolStripMenuItem,
            this.skinClassic1ToolStripMenuItem,
            this.skinClassic2ToolStripMenuItem,
            this.skinClassic3ToolStripMenuItem,
            this.skinXPBlueToolStripMenuItem,
            this.skinXPSilverToolStripMenuItem,
            this.skinXPOliveGreenToolStripMenuItem});
            this.skinSelectToolStripMenuItem.ForeColor = System.Drawing.Color.White;
            this.skinSelectToolStripMenuItem.Name = "skinSelectToolStripMenuItem";
            this.skinSelectToolStripMenuItem.Size = new System.Drawing.Size(51, 20);
            this.skinSelectToolStripMenuItem.Text = "皮肤";
            // 
            // Skin_DefaultToolStripMenuItem
            // 
            this.Skin_DefaultToolStripMenuItem.Name = "Skin_DefaultToolStripMenuItem";
            this.Skin_DefaultToolStripMenuItem.Size = new System.Drawing.Size(163, 22);
            this.Skin_DefaultToolStripMenuItem.Tag = "Default";
            this.Skin_DefaultToolStripMenuItem.Text = "默认皮肤";
            this.Skin_DefaultToolStripMenuItem.Click += new System.EventHandler(this.Skin_ChangeSkin);
            // 
            // skin1ToolStripMenuItem
            // 
            this.skin1ToolStripMenuItem.Name = "skin1ToolStripMenuItem";
            this.skin1ToolStripMenuItem.Size = new System.Drawing.Size(163, 22);
            this.skin1ToolStripMenuItem.Tag = "Template1";
            this.skin1ToolStripMenuItem.Text = "自定义皮肤1";
            this.skin1ToolStripMenuItem.Click += new System.EventHandler(this.Skin_ChangeSkin);
            // 
            // skinClassic1ToolStripMenuItem
            // 
            this.skinClassic1ToolStripMenuItem.Name = "skinClassic1ToolStripMenuItem";
            this.skinClassic1ToolStripMenuItem.Size = new System.Drawing.Size(163, 22);
            this.skinClassic1ToolStripMenuItem.Tag = "Classic1";
            this.skinClassic1ToolStripMenuItem.Text = "怀旧版1";
            this.skinClassic1ToolStripMenuItem.Click += new System.EventHandler(this.Skin_ChangeSkin);
            // 
            // skinClassic2ToolStripMenuItem
            // 
            this.skinClassic2ToolStripMenuItem.Name = "skinClassic2ToolStripMenuItem";
            this.skinClassic2ToolStripMenuItem.Size = new System.Drawing.Size(163, 22);
            this.skinClassic2ToolStripMenuItem.Tag = "Classic2";
            this.skinClassic2ToolStripMenuItem.Text = "怀旧版2";
            this.skinClassic2ToolStripMenuItem.Click += new System.EventHandler(this.Skin_ChangeSkin);
            // 
            // skinClassic3ToolStripMenuItem
            // 
            this.skinClassic3ToolStripMenuItem.Name = "skinClassic3ToolStripMenuItem";
            this.skinClassic3ToolStripMenuItem.Size = new System.Drawing.Size(163, 22);
            this.skinClassic3ToolStripMenuItem.Tag = "Classic3";
            this.skinClassic3ToolStripMenuItem.Text = "怀旧版3";
            this.skinClassic3ToolStripMenuItem.Click += new System.EventHandler(this.Skin_ChangeSkin);
            // 
            // skinXPBlueToolStripMenuItem
            // 
            this.skinXPBlueToolStripMenuItem.Name = "skinXPBlueToolStripMenuItem";
            this.skinXPBlueToolStripMenuItem.Size = new System.Drawing.Size(163, 22);
            this.skinXPBlueToolStripMenuItem.Tag = "XPBlue";
            this.skinXPBlueToolStripMenuItem.Text = "XP(蓝色)";
            this.skinXPBlueToolStripMenuItem.Click += new System.EventHandler(this.Skin_ChangeSkin);
            // 
            // skinXPSilverToolStripMenuItem
            // 
            this.skinXPSilverToolStripMenuItem.Name = "skinXPSilverToolStripMenuItem";
            this.skinXPSilverToolStripMenuItem.Size = new System.Drawing.Size(163, 22);
            this.skinXPSilverToolStripMenuItem.Tag = "XPSilver";
            this.skinXPSilverToolStripMenuItem.Text = "XP(银色)";
            this.skinXPSilverToolStripMenuItem.Visible = false;
            this.skinXPSilverToolStripMenuItem.Click += new System.EventHandler(this.Skin_ChangeSkin);
            // 
            // skinXPOliveGreenToolStripMenuItem
            // 
            this.skinXPOliveGreenToolStripMenuItem.Name = "skinXPOliveGreenToolStripMenuItem";
            this.skinXPOliveGreenToolStripMenuItem.Size = new System.Drawing.Size(163, 22);
            this.skinXPOliveGreenToolStripMenuItem.Tag = "XPOlive";
            this.skinXPOliveGreenToolStripMenuItem.Text = "XP(橄榄绿)";
            this.skinXPOliveGreenToolStripMenuItem.Visible = false;
            this.skinXPOliveGreenToolStripMenuItem.Click += new System.EventHandler(this.Skin_ChangeSkin);
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.helpdocToolStripMenuItem,
            this.zhtssHelp1,
            this.softwareUpdateToolStripMenuItem,
            this.zhtssHelp2,
            this.aboutToolStripMenuItem});
            this.helpToolStripMenuItem.ForeColor = System.Drawing.Color.White;
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(51, 20);
            this.helpToolStripMenuItem.Text = "帮助";
            // 
            // helpdocToolStripMenuItem
            // 
            this.helpdocToolStripMenuItem.Name = "helpdocToolStripMenuItem";
            this.helpdocToolStripMenuItem.Size = new System.Drawing.Size(138, 22);
            this.helpdocToolStripMenuItem.Text = "帮助文件";
            this.helpdocToolStripMenuItem.Click += new System.EventHandler(this.helpdocToolStripMenuItem_Click);
            // 
            // zhtssHelp1
            // 
            this.zhtssHelp1.Name = "zhtssHelp1";
            this.zhtssHelp1.Size = new System.Drawing.Size(135, 6);
            // 
            // softwareUpdateToolStripMenuItem
            // 
            this.softwareUpdateToolStripMenuItem.Name = "softwareUpdateToolStripMenuItem";
            this.softwareUpdateToolStripMenuItem.Size = new System.Drawing.Size(138, 22);
            this.softwareUpdateToolStripMenuItem.Text = "软件更新";
            this.softwareUpdateToolStripMenuItem.Click += new System.EventHandler(this.softwareUpdateToolStripMenuItem_Click);
            // 
            // zhtssHelp2
            // 
            this.zhtssHelp2.Name = "zhtssHelp2";
            this.zhtssHelp2.Size = new System.Drawing.Size(135, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(138, 22);
            this.aboutToolStripMenuItem.Text = "关于";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // testStripMenuItem
            // 
            this.testStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.getSetting,
            this.TestToolStripMenuItem});
            this.testStripMenuItem.ForeColor = System.Drawing.Color.White;
            this.testStripMenuItem.Name = "testStripMenuItem";
            this.testStripMenuItem.Size = new System.Drawing.Size(51, 20);
            this.testStripMenuItem.Text = "测试";
            this.testStripMenuItem.Visible = false;
            // 
            // getSetting
            // 
            this.getSetting.Name = "getSetting";
            this.getSetting.Size = new System.Drawing.Size(138, 22);
            this.getSetting.Text = "获取参数";
            this.getSetting.Click += new System.EventHandler(this.getSetting_Click);
            // 
            // TestToolStripMenuItem
            // 
            this.TestToolStripMenuItem.Name = "TestToolStripMenuItem";
            this.TestToolStripMenuItem.Size = new System.Drawing.Size(138, 22);
            this.TestToolStripMenuItem.Text = "测试界面";
            this.TestToolStripMenuItem.Click += new System.EventHandler(this.TestToolStripMenuItem_Click);
            // 
            // panelTreeNodeImageList
            // 
            this.panelTreeNodeImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("panelTreeNodeImageList.ImageStream")));
            this.panelTreeNodeImageList.TransparentColor = System.Drawing.Color.Transparent;
            this.panelTreeNodeImageList.Images.SetKeyName(0, "group.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(1, "panel.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(2, "paneloff.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(3, "item.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(4, "lock.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(5, "share.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(6, "lockshare.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(7, "shareoff.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(8, "lockshareoff.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(9, "subtitle.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(10, "animation.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(11, "picortxt.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(12, "time.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(13, "dial.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(14, "counter.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(15, "temperature.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(16, "lunar.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(17, "weather.ico");
            this.panelTreeNodeImageList.Images.SetKeyName(18, "string.ico");
            // 
            // contextMenuStripSubarea
            // 
            this.contextMenuStripSubarea.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.addSubtitleToolStripMenuItem,
            this.addAnimationContentToolStripMenuItem,
            this.addMarqueeContentToolStripMenuItem,
            this.addClockContentToolStripMenuItem,
            this.addDialContentToolStripMenuItem,
            this.addCounterContentToolStripMenuItem,
            this.addLunarContentToolStripMenuItem,
            this.addTemperatureContentToolStripMenuItem,
            this.addWeatherContentToolStripMenuItem,
            this.addStringContentToolStripMenuItem,
            this.addHumidityContentToolStripMenuItem,
            this.addNoiseContentToolStripMenuItem,
            this.toolStripSeparatorSubarea1,
            this.copyItemContentToolStripMenuItem,
            this.toolStripSeparatorSubarea2,
            this.shareItemContentToolStripMenuItem,
            this.toolStripSeparatorSubarea3,
            this.dropItemContentToolStripMenuItem});
            this.contextMenuStripSubarea.Name = "contextMenuStrip1";
            this.contextMenuStripSubarea.Size = new System.Drawing.Size(146, 352);
            // 
            // addSubtitleToolStripMenuItem
            // 
            this.addSubtitleToolStripMenuItem.Name = "addSubtitleToolStripMenuItem";
            this.addSubtitleToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addSubtitleToolStripMenuItem.Tag = "Subtitle";
            this.addSubtitleToolStripMenuItem.Text = "添加字幕";
            this.addSubtitleToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addAnimationContentToolStripMenuItem
            // 
            this.addAnimationContentToolStripMenuItem.Name = "addAnimationContentToolStripMenuItem";
            this.addAnimationContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addAnimationContentToolStripMenuItem.Tag = "Animation";
            this.addAnimationContentToolStripMenuItem.Text = "添加动画";
            this.addAnimationContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addMarqueeContentToolStripMenuItem
            // 
            this.addMarqueeContentToolStripMenuItem.Name = "addMarqueeContentToolStripMenuItem";
            this.addMarqueeContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addMarqueeContentToolStripMenuItem.Tag = "PictureText";
            this.addMarqueeContentToolStripMenuItem.Text = "添加图文";
            this.addMarqueeContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addClockContentToolStripMenuItem
            // 
            this.addClockContentToolStripMenuItem.Name = "addClockContentToolStripMenuItem";
            this.addClockContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addClockContentToolStripMenuItem.Tag = "Time";
            this.addClockContentToolStripMenuItem.Text = "添加时间";
            this.addClockContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addDialContentToolStripMenuItem
            // 
            this.addDialContentToolStripMenuItem.Name = "addDialContentToolStripMenuItem";
            this.addDialContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addDialContentToolStripMenuItem.Tag = "Dial";
            this.addDialContentToolStripMenuItem.Text = "添加表盘";
            this.addDialContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addCounterContentToolStripMenuItem
            // 
            this.addCounterContentToolStripMenuItem.Name = "addCounterContentToolStripMenuItem";
            this.addCounterContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addCounterContentToolStripMenuItem.Tag = "Counter";
            this.addCounterContentToolStripMenuItem.Text = "添加计时";
            this.addCounterContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addLunarContentToolStripMenuItem
            // 
            this.addLunarContentToolStripMenuItem.Name = "addLunarContentToolStripMenuItem";
            this.addLunarContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addLunarContentToolStripMenuItem.Tag = "Lunar";
            this.addLunarContentToolStripMenuItem.Text = "添加农历";
            this.addLunarContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addTemperatureContentToolStripMenuItem
            // 
            this.addTemperatureContentToolStripMenuItem.Name = "addTemperatureContentToolStripMenuItem";
            this.addTemperatureContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addTemperatureContentToolStripMenuItem.Tag = "Temperature";
            this.addTemperatureContentToolStripMenuItem.Text = "添加温度";
            this.addTemperatureContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addWeatherContentToolStripMenuItem
            // 
            this.addWeatherContentToolStripMenuItem.Name = "addWeatherContentToolStripMenuItem";
            this.addWeatherContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addWeatherContentToolStripMenuItem.Tag = "Weather";
            this.addWeatherContentToolStripMenuItem.Text = "添加天气";
            this.addWeatherContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addStringContentToolStripMenuItem
            // 
            this.addStringContentToolStripMenuItem.Name = "addStringContentToolStripMenuItem";
            this.addStringContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addStringContentToolStripMenuItem.Tag = "String";
            this.addStringContentToolStripMenuItem.Text = "添加字符";
            this.addStringContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addHumidityContentToolStripMenuItem
            // 
            this.addHumidityContentToolStripMenuItem.Name = "addHumidityContentToolStripMenuItem";
            this.addHumidityContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addHumidityContentToolStripMenuItem.Tag = "Humidity";
            this.addHumidityContentToolStripMenuItem.Text = "添加湿度";
            this.addHumidityContentToolStripMenuItem.Visible = false;
            this.addHumidityContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // addNoiseContentToolStripMenuItem
            // 
            this.addNoiseContentToolStripMenuItem.Name = "addNoiseContentToolStripMenuItem";
            this.addNoiseContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.addNoiseContentToolStripMenuItem.Tag = "Noise";
            this.addNoiseContentToolStripMenuItem.Text = "添加噪音";
            this.addNoiseContentToolStripMenuItem.Visible = false;
            this.addNoiseContentToolStripMenuItem.Click += new System.EventHandler(this.AddContent);
            // 
            // toolStripSeparatorSubarea1
            // 
            this.toolStripSeparatorSubarea1.Name = "toolStripSeparatorSubarea1";
            this.toolStripSeparatorSubarea1.Size = new System.Drawing.Size(142, 6);
            // 
            // copyItemContentToolStripMenuItem
            // 
            this.copyItemContentToolStripMenuItem.Name = "copyItemContentToolStripMenuItem";
            this.copyItemContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.copyItemContentToolStripMenuItem.Text = "复制节目到...";
            this.copyItemContentToolStripMenuItem.Click += new System.EventHandler(this.copyItemContentToolStripMenuItem_Click);
            // 
            // toolStripSeparatorSubarea2
            // 
            this.toolStripSeparatorSubarea2.Name = "toolStripSeparatorSubarea2";
            this.toolStripSeparatorSubarea2.Size = new System.Drawing.Size(142, 6);
            // 
            // shareItemContentToolStripMenuItem
            // 
            this.shareItemContentToolStripMenuItem.Name = "shareItemContentToolStripMenuItem";
            this.shareItemContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.shareItemContentToolStripMenuItem.Text = "共享节目";
            this.shareItemContentToolStripMenuItem.Click += new System.EventHandler(this.shareItemContentToolStripMenuItem_Click);
            // 
            // toolStripSeparatorSubarea3
            // 
            this.toolStripSeparatorSubarea3.Name = "toolStripSeparatorSubarea3";
            this.toolStripSeparatorSubarea3.Size = new System.Drawing.Size(142, 6);
            // 
            // dropItemContentToolStripMenuItem
            // 
            this.dropItemContentToolStripMenuItem.Name = "dropItemContentToolStripMenuItem";
            this.dropItemContentToolStripMenuItem.Size = new System.Drawing.Size(145, 22);
            this.dropItemContentToolStripMenuItem.Text = "删除节目";
            this.dropItemContentToolStripMenuItem.Click += new System.EventHandler(this.dropItemContentToolStripMenuItem_Click);
            // 
            // contextMenuStripPanel
            // 
            this.contextMenuStripPanel.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.addItemContentToolStripMenuItem,
            this.exportDataToolStripMenuItem,
            this.toolStripSeparatorPanel1,
            this.copyPanelItemsContentToolStripMenuItem,
            this.toolStripSeparatorPanel2,
            this.queryStateContentToolStripMenuItem});
            this.contextMenuStripPanel.Name = "contextMenuStripPanel";
            this.contextMenuStripPanel.Size = new System.Drawing.Size(170, 104);
            // 
            // addItemContentToolStripMenuItem
            // 
            this.addItemContentToolStripMenuItem.Name = "addItemContentToolStripMenuItem";
            this.addItemContentToolStripMenuItem.Size = new System.Drawing.Size(169, 22);
            this.addItemContentToolStripMenuItem.Text = "添加节目";
            this.addItemContentToolStripMenuItem.Click += new System.EventHandler(this.addItemContentToolStripMenuItem_Click);
            // 
            // exportDataToolStripMenuItem
            // 
            this.exportDataToolStripMenuItem.Name = "exportDataToolStripMenuItem";
            this.exportDataToolStripMenuItem.Size = new System.Drawing.Size(169, 22);
            this.exportDataToolStripMenuItem.Text = "导出数据";
            this.exportDataToolStripMenuItem.Visible = false;
            // 
            // toolStripSeparatorPanel1
            // 
            this.toolStripSeparatorPanel1.Name = "toolStripSeparatorPanel1";
            this.toolStripSeparatorPanel1.Size = new System.Drawing.Size(166, 6);
            // 
            // copyPanelItemsContentToolStripMenuItem
            // 
            this.copyPanelItemsContentToolStripMenuItem.Name = "copyPanelItemsContentToolStripMenuItem";
            this.copyPanelItemsContentToolStripMenuItem.Size = new System.Drawing.Size(169, 22);
            this.copyPanelItemsContentToolStripMenuItem.Text = "复制整屏节目到...";
            this.copyPanelItemsContentToolStripMenuItem.Click += new System.EventHandler(this.copyPanelItemsContentToolStripMenuItem_Click);
            // 
            // toolStripSeparatorPanel2
            // 
            this.toolStripSeparatorPanel2.Name = "toolStripSeparatorPanel2";
            this.toolStripSeparatorPanel2.Size = new System.Drawing.Size(166, 6);
            this.toolStripSeparatorPanel2.Visible = false;
            // 
            // queryStateContentToolStripMenuItem
            // 
            this.queryStateContentToolStripMenuItem.Name = "queryStateContentToolStripMenuItem";
            this.queryStateContentToolStripMenuItem.Size = new System.Drawing.Size(169, 22);
            this.queryStateContentToolStripMenuItem.Text = "查询状态";
            this.queryStateContentToolStripMenuItem.Visible = false;
            this.queryStateContentToolStripMenuItem.Click += new System.EventHandler(this.queryStateContentToolStripMenuItem_Click);
            // 
            // contextMenuStripItem
            // 
            this.contextMenuStripItem.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.addSubareaContentToolStripMenuItem,
            this.deleteItemContentToolStripMenuItem,
            this.exportDataToolStripMenuItem1});
            this.contextMenuStripItem.Name = "contextMenuStrip1";
            this.contextMenuStripItem.Size = new System.Drawing.Size(125, 70);
            // 
            // addSubareaContentToolStripMenuItem
            // 
            this.addSubareaContentToolStripMenuItem.Name = "addSubareaContentToolStripMenuItem";
            this.addSubareaContentToolStripMenuItem.Size = new System.Drawing.Size(124, 22);
            this.addSubareaContentToolStripMenuItem.Text = "添加分区";
            this.addSubareaContentToolStripMenuItem.Click += new System.EventHandler(this.addSubareaContentToolStripMenuItem_Click);
            // 
            // deleteItemContentToolStripMenuItem
            // 
            this.deleteItemContentToolStripMenuItem.Name = "deleteItemContentToolStripMenuItem";
            this.deleteItemContentToolStripMenuItem.Size = new System.Drawing.Size(124, 22);
            this.deleteItemContentToolStripMenuItem.Text = "删除节目";
            // 
            // exportDataToolStripMenuItem1
            // 
            this.exportDataToolStripMenuItem1.Name = "exportDataToolStripMenuItem1";
            this.exportDataToolStripMenuItem1.Size = new System.Drawing.Size(124, 22);
            this.exportDataToolStripMenuItem1.Text = "导出数据";
            // 
            // contextMenuStripContent
            // 
            this.contextMenuStripContent.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.deleteContentContentToolStripMenuItem});
            this.contextMenuStripContent.Name = "contextMenuStrip1";
            this.contextMenuStripContent.Size = new System.Drawing.Size(125, 26);
            // 
            // deleteContentContentToolStripMenuItem
            // 
            this.deleteContentContentToolStripMenuItem.Name = "deleteContentContentToolStripMenuItem";
            this.deleteContentContentToolStripMenuItem.Size = new System.Drawing.Size(124, 22);
            this.deleteContentContentToolStripMenuItem.Text = "删除内容";
            this.deleteContentContentToolStripMenuItem.Click += new System.EventHandler(this.deleteContentContentToolStripMenuItem_Click);
            // 
            // timerSubareaRefresh
            // 
            this.timerSubareaRefresh.Interval = 500;
            this.timerSubareaRefresh.Tick += new System.EventHandler(this.timerSubareaRefresh_Tick);
            // 
            // marqueeTimerRefresh
            // 
            this.marqueeTimerRefresh.Interval = 500;
            this.marqueeTimerRefresh.Tick += new System.EventHandler(this.marqueeTimerRefresh_Tick);
            // 
            // pictureBox_LeftTop
            // 
            this.pictureBox_LeftTop.BackColor = System.Drawing.Color.Blue;
            this.pictureBox_LeftTop.Location = new System.Drawing.Point(0, 0);
            this.pictureBox_LeftTop.Name = "pictureBox_LeftTop";
            this.pictureBox_LeftTop.Size = new System.Drawing.Size(10, 40);
            this.pictureBox_LeftTop.TabIndex = 5;
            this.pictureBox_LeftTop.TabStop = false;
            // 
            // pictureBox_RightTop
            // 
            this.pictureBox_RightTop.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.pictureBox_RightTop.BackColor = System.Drawing.Color.Blue;
            this.pictureBox_RightTop.Location = new System.Drawing.Point(992, 0);
            this.pictureBox_RightTop.Name = "pictureBox_RightTop";
            this.pictureBox_RightTop.Size = new System.Drawing.Size(10, 40);
            this.pictureBox_RightTop.TabIndex = 6;
            this.pictureBox_RightTop.TabStop = false;
            // 
            // panel_Top
            // 
            this.panel_Top.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.panel_Top.BackColor = System.Drawing.SystemColors.Control;
            this.panel_Top.Controls.Add(this.lblRunMode);
            this.panel_Top.Controls.Add(this.picLogo);
            this.panel_Top.Controls.Add(this.picCloudLoginInfo);
            this.panel_Top.Controls.Add(this.lblCloudLoginInfo);
            this.panel_Top.Controls.Add(this.pictureBox_Close);
            this.panel_Top.Controls.Add(this.pictureBox_Max);
            this.panel_Top.Controls.Add(this.pictureBox_Min);
            this.panel_Top.Controls.Add(this.menuStrip1);
            this.panel_Top.Controls.Add(this.label_Logo);
            this.panel_Top.Location = new System.Drawing.Point(10, 0);
            this.panel_Top.Name = "panel_Top";
            this.panel_Top.Size = new System.Drawing.Size(982, 34);
            this.panel_Top.TabIndex = 7;
            this.panel_Top.DoubleClick += new System.EventHandler(this.panel_Top_DoubleClick);
            this.panel_Top.MouseDown += new System.Windows.Forms.MouseEventHandler(this.gPanelTitleBack_MouseDown);
            // 
            // lblRunMode
            // 
            this.lblRunMode.BackColor = System.Drawing.Color.Transparent;
            this.lblRunMode.Font = new System.Drawing.Font("宋体", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            this.lblRunMode.ForeColor = System.Drawing.Color.Lime;
            this.lblRunMode.Image = global::LedControlSystem.Properties.Resources.runmode_debug;
            this.lblRunMode.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft;
            this.lblRunMode.Location = new System.Drawing.Point(717, 9);
            this.lblRunMode.Name = "lblRunMode";
            this.lblRunMode.Size = new System.Drawing.Size(89, 15);
            this.lblRunMode.TabIndex = 33;
            this.lblRunMode.Text = "测试模式";
            this.lblRunMode.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            // 
            // picLogo
            // 
            this.picLogo.BackColor = System.Drawing.Color.Transparent;
            this.picLogo.Image = ((System.Drawing.Image)(resources.GetObject("picLogo.Image")));
            this.picLogo.Location = new System.Drawing.Point(0, 5);
            this.picLogo.Name = "picLogo";
            this.picLogo.Size = new System.Drawing.Size(24, 24);
            this.picLogo.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.picLogo.TabIndex = 32;
            this.picLogo.TabStop = false;
            // 
            // picCloudLoginInfo
            // 
            this.picCloudLoginInfo.BackColor = System.Drawing.Color.Transparent;
            this.picCloudLoginInfo.Image = global::LedControlSystem.Properties.Resources.Cloud_LoginInfo;
            this.picCloudLoginInfo.Location = new System.Drawing.Point(817, 9);
            this.picCloudLoginInfo.Name = "picCloudLoginInfo";
            this.picCloudLoginInfo.Size = new System.Drawing.Size(16, 16);
            this.picCloudLoginInfo.TabIndex = 6;
            this.picCloudLoginInfo.TabStop = false;
            // 
            // lblCloudLoginInfo
            // 
            this.lblCloudLoginInfo.AutoSize = true;
            this.lblCloudLoginInfo.BackColor = System.Drawing.Color.Transparent;
            this.lblCloudLoginInfo.Font = new System.Drawing.Font("宋体", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            this.lblCloudLoginInfo.ForeColor = System.Drawing.Color.White;
            this.lblCloudLoginInfo.Location = new System.Drawing.Point(835, 9);
            this.lblCloudLoginInfo.Name = "lblCloudLoginInfo";
            this.lblCloudLoginInfo.Size = new System.Drawing.Size(55, 15);
            this.lblCloudLoginInfo.TabIndex = 5;
            this.lblCloudLoginInfo.Text = "用户名";
            this.lblCloudLoginInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // pictureBox_Close
            // 
            this.pictureBox_Close.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.pictureBox_Close.BackColor = System.Drawing.Color.Transparent;
            this.pictureBox_Close.Location = new System.Drawing.Point(959, 7);
            this.pictureBox_Close.Name = "pictureBox_Close";
            this.pictureBox_Close.Size = new System.Drawing.Size(20, 20);
            this.pictureBox_Close.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pictureBox_Close.TabIndex = 3;
            this.pictureBox_Close.TabStop = false;
            this.pictureBox_Close.Click += new System.EventHandler(this.pictureBox_Close_Click);
            this.pictureBox_Close.MouseEnter += new System.EventHandler(this.pictureBox_Close_MouseEnter);
            this.pictureBox_Close.MouseLeave += new System.EventHandler(this.pictureBox_Close_MouseLeave);
            // 
            // pictureBox_Max
            // 
            this.pictureBox_Max.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.pictureBox_Max.BackColor = System.Drawing.Color.Transparent;
            this.pictureBox_Max.Location = new System.Drawing.Point(932, 7);
            this.pictureBox_Max.Name = "pictureBox_Max";
            this.pictureBox_Max.Size = new System.Drawing.Size(20, 20);
            this.pictureBox_Max.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pictureBox_Max.TabIndex = 2;
            this.pictureBox_Max.TabStop = false;
            this.pictureBox_Max.Click += new System.EventHandler(this.pictureBox_Max_Click);
            this.pictureBox_Max.MouseEnter += new System.EventHandler(this.pictureBox_Max_MouseEnter);
            this.pictureBox_Max.MouseLeave += new System.EventHandler(this.pictureBox_Max_MouseLeave);
            // 
            // pictureBox_Min
            // 
            this.pictureBox_Min.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.pictureBox_Min.BackColor = System.Drawing.Color.Transparent;
            this.pictureBox_Min.Location = new System.Drawing.Point(906, 7);
            this.pictureBox_Min.Name = "pictureBox_Min";
            this.pictureBox_Min.Size = new System.Drawing.Size(20, 20);
            this.pictureBox_Min.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pictureBox_Min.TabIndex = 1;
            this.pictureBox_Min.TabStop = false;
            this.pictureBox_Min.Click += new System.EventHandler(this.pictureBox_Min_Click);
            this.pictureBox_Min.MouseEnter += new System.EventHandler(this.pictureBox_Min_MouseEnter);
            this.pictureBox_Min.MouseLeave += new System.EventHandler(this.pictureBox_Min_MouseLeave);
            // 
            // label_Logo
            // 
            this.label_Logo.BackColor = System.Drawing.Color.Transparent;
            this.label_Logo.Font = new System.Drawing.Font("宋体", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            this.label_Logo.ForeColor = System.Drawing.Color.White;
            this.label_Logo.Location = new System.Drawing.Point(28, 3);
            this.label_Logo.Name = "label_Logo";
            this.label_Logo.Size = new System.Drawing.Size(222, 28);
            this.label_Logo.TabIndex = 4;
            this.label_Logo.Text = "LED Control System";
            this.label_Logo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // panel_BorderLeft
            // 
            this.panel_BorderLeft.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
            this.panel_BorderLeft.BackColor = System.Drawing.Color.Sienna;
            this.panel_BorderLeft.Location = new System.Drawing.Point(0, 33);
            this.panel_BorderLeft.Name = "panel_BorderLeft";
            this.panel_BorderLeft.Size = new System.Drawing.Size(12, 501);
            this.panel_BorderLeft.TabIndex = 8;
            // 
            // pictureBox_BorderLeftBottom
            // 
            this.pictureBox_BorderLeftBottom.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.pictureBox_BorderLeftBottom.BackColor = System.Drawing.Color.Gold;
            this.pictureBox_BorderLeftBottom.Location = new System.Drawing.Point(0, 534);
            this.pictureBox_BorderLeftBottom.Name = "pictureBox_BorderLeftBottom";
            this.pictureBox_BorderLeftBottom.Size = new System.Drawing.Size(12, 12);
            this.pictureBox_BorderLeftBottom.TabIndex = 9;
            this.pictureBox_BorderLeftBottom.TabStop = false;
            // 
            // pictureBox_BorderRightBottom
            // 
            this.pictureBox_BorderRightBottom.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.pictureBox_BorderRightBottom.BackColor = System.Drawing.Color.Gold;
            this.pictureBox_BorderRightBottom.Location = new System.Drawing.Point(990, 534);
            this.pictureBox_BorderRightBottom.Name = "pictureBox_BorderRightBottom";
            this.pictureBox_BorderRightBottom.Size = new System.Drawing.Size(12, 12);
            this.pictureBox_BorderRightBottom.TabIndex = 10;
            this.pictureBox_BorderRightBottom.TabStop = false;
            // 
            // panel_BorderRight
            // 
            this.panel_BorderRight.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.panel_BorderRight.BackColor = System.Drawing.Color.Sienna;
            this.panel_BorderRight.Location = new System.Drawing.Point(990, 33);
            this.panel_BorderRight.Name = "panel_BorderRight";
            this.panel_BorderRight.Size = new System.Drawing.Size(12, 501);
            this.panel_BorderRight.TabIndex = 9;
            // 
            // panel_BordertTop
            // 
            this.panel_BordertTop.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.panel_BordertTop.BackColor = System.Drawing.Color.PaleGoldenrod;
            this.panel_BordertTop.Location = new System.Drawing.Point(12, 103);
            this.panel_BordertTop.Name = "panel_BordertTop";
            this.panel_BordertTop.Size = new System.Drawing.Size(978, 12);
            this.panel_BordertTop.TabIndex = 10;
            // 
            // panel_BorderBottom
            // 
            this.panel_BorderBottom.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.panel_BorderBottom.BackColor = System.Drawing.Color.PaleGoldenrod;
            this.panel_BorderBottom.Location = new System.Drawing.Point(12, 534);
            this.panel_BorderBottom.Name = "panel_BorderBottom";
            this.panel_BorderBottom.Size = new System.Drawing.Size(978, 12);
            this.panel_BorderBottom.TabIndex = 11;
            // 
            // pictureBox_BorderRightTop
            // 
            this.pictureBox_BorderRightTop.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.pictureBox_BorderRightTop.BackColor = System.Drawing.Color.Gold;
            this.pictureBox_BorderRightTop.Location = new System.Drawing.Point(990, 103);
            this.pictureBox_BorderRightTop.Name = "pictureBox_BorderRightTop";
            this.pictureBox_BorderRightTop.Size = new System.Drawing.Size(12, 12);
            this.pictureBox_BorderRightTop.TabIndex = 12;
            this.pictureBox_BorderRightTop.TabStop = false;
            // 
            // pictureBox_BorderLeftTop
            // 
            this.pictureBox_BorderLeftTop.BackColor = System.Drawing.Color.Gold;
            this.pictureBox_BorderLeftTop.Location = new System.Drawing.Point(0, 103);
            this.pictureBox_BorderLeftTop.Name = "pictureBox_BorderLeftTop";
            this.pictureBox_BorderLeftTop.Size = new System.Drawing.Size(12, 12);
            this.pictureBox_BorderLeftTop.TabIndex = 13;
            this.pictureBox_BorderLeftTop.TabStop = false;
            // 
            // panel_Nagivator
            // 
            this.panel_Nagivator.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.panel_Nagivator.BackColor = System.Drawing.Color.Lime;
            this.panel_Nagivator.Controls.Add(this.zhToolButton_String);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_String_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Weather_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Weather);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_FindDeviceWifi_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_FindDeviceWifi);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Usb_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Send_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Play_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_FindDevice_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Delete_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Score_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Noise_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Humidity_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Temperature_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Lunar_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Counter_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Dial_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Clock_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Marquee_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Animation_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Text_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Item_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Save_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Open_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Usb);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Send);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Play);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_FindDevice);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Delete);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Score);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Noise);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Humidity);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Temperature);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Lunar);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Counter);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Dial);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Clock);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Marquee);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Animation);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Text);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Item);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Save);
            this.panel_Nagivator.Controls.Add(this.zhToolButton_Open);
            this.panel_Nagivator.Controls.Add(this.pictureBox_Spliter2);
            this.panel_Nagivator.Controls.Add(this.pictureBox_Spliter1);
            this.panel_Nagivator.Location = new System.Drawing.Point(1, 33);
            this.panel_Nagivator.Name = "panel_Nagivator";
            this.panel_Nagivator.Size = new System.Drawing.Size(1000, 70);
            this.panel_Nagivator.TabIndex = 14;
            this.panel_Nagivator.MouseDown += new System.Windows.Forms.MouseEventHandler(this.gPanelTitleBack_MouseDown);
            // 
            // zhToolButton_String
            // 
            this.zhToolButton_String.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_String.Location = new System.Drawing.Point(668, 1);
            this.zhToolButton_String.Name = "zhToolButton_String";
            this.zhToolButton_String.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_String.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_String.TabIndex = 62;
            this.zhToolButton_String.TabStop = false;
            this.zhToolButton_String.Tag = "String";
            this.zhToolButton_String.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_String_Text
            // 
            this.zhToolButton_String_Text.Location = new System.Drawing.Point(669, 49);
            this.zhToolButton_String_Text.Name = "zhToolButton_String_Text";
            this.zhToolButton_String_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_String_Text.TabIndex = 63;
            this.zhToolButton_String_Text.Tag = "String";
            this.zhToolButton_String_Text.Text = "label44";
            // 
            // zhToolButton_Weather_Text
            // 
            this.zhToolButton_Weather_Text.Location = new System.Drawing.Point(564, 49);
            this.zhToolButton_Weather_Text.Name = "zhToolButton_Weather_Text";
            this.zhToolButton_Weather_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Weather_Text.TabIndex = 61;
            this.zhToolButton_Weather_Text.Tag = "Weather";
            this.zhToolButton_Weather_Text.Text = "label4";
            this.zhToolButton_Weather_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Weather
            // 
            this.zhToolButton_Weather.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Weather.Location = new System.Drawing.Point(566, 1);
            this.zhToolButton_Weather.Name = "zhToolButton_Weather";
            this.zhToolButton_Weather.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Weather.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Weather.TabIndex = 60;
            this.zhToolButton_Weather.TabStop = false;
            this.zhToolButton_Weather.Tag = "Weather";
            this.zhToolButton_Weather.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_FindDeviceWifi_Text
            // 
            this.zhToolButton_FindDeviceWifi_Text.Location = new System.Drawing.Point(825, 49);
            this.zhToolButton_FindDeviceWifi_Text.Name = "zhToolButton_FindDeviceWifi_Text";
            this.zhToolButton_FindDeviceWifi_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_FindDeviceWifi_Text.TabIndex = 59;
            this.zhToolButton_FindDeviceWifi_Text.Text = "label47";
            // 
            // zhToolButton_FindDeviceWifi
            // 
            this.zhToolButton_FindDeviceWifi.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_FindDeviceWifi.Location = new System.Drawing.Point(824, 1);
            this.zhToolButton_FindDeviceWifi.Name = "zhToolButton_FindDeviceWifi";
            this.zhToolButton_FindDeviceWifi.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_FindDeviceWifi.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_FindDeviceWifi.TabIndex = 58;
            this.zhToolButton_FindDeviceWifi.TabStop = false;
            this.zhToolButton_FindDeviceWifi.Tag = "";
            this.zhToolButton_FindDeviceWifi.Click += new System.EventHandler(this.zhToolButton_FindDeviceWifi_Click);
            // 
            // zhToolButton_Usb_Text
            // 
            this.zhToolButton_Usb_Text.Location = new System.Drawing.Point(975, 49);
            this.zhToolButton_Usb_Text.Name = "zhToolButton_Usb_Text";
            this.zhToolButton_Usb_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Usb_Text.TabIndex = 57;
            this.zhToolButton_Usb_Text.Text = "label49";
            this.zhToolButton_Usb_Text.Click += new System.EventHandler(this.zhToolButton_Usb_Click);
            // 
            // zhToolButton_Send_Text
            // 
            this.zhToolButton_Send_Text.Location = new System.Drawing.Point(929, 49);
            this.zhToolButton_Send_Text.Name = "zhToolButton_Send_Text";
            this.zhToolButton_Send_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Send_Text.TabIndex = 56;
            this.zhToolButton_Send_Text.Text = "label48";
            this.zhToolButton_Send_Text.Click += new System.EventHandler(this.zhToolButton_Send_Click);
            // 
            // zhToolButton_Play_Text
            // 
            this.zhToolButton_Play_Text.Location = new System.Drawing.Point(878, 49);
            this.zhToolButton_Play_Text.Name = "zhToolButton_Play_Text";
            this.zhToolButton_Play_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Play_Text.TabIndex = 55;
            this.zhToolButton_Play_Text.Text = "label47";
            this.zhToolButton_Play_Text.Click += new System.EventHandler(this.zhToolButton_Play_Click);
            // 
            // zhToolButton_FindDevice_Text
            // 
            this.zhToolButton_FindDevice_Text.Location = new System.Drawing.Point(776, 49);
            this.zhToolButton_FindDevice_Text.Name = "zhToolButton_FindDevice_Text";
            this.zhToolButton_FindDevice_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_FindDevice_Text.TabIndex = 54;
            this.zhToolButton_FindDevice_Text.Text = "label46";
            this.zhToolButton_FindDevice_Text.Click += new System.EventHandler(this.zhToolButton_FindDevice_Click);
            // 
            // zhToolButton_Delete_Text
            // 
            this.zhToolButton_Delete_Text.Location = new System.Drawing.Point(721, 49);
            this.zhToolButton_Delete_Text.Name = "zhToolButton_Delete_Text";
            this.zhToolButton_Delete_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Delete_Text.TabIndex = 53;
            this.zhToolButton_Delete_Text.Text = "label45";
            this.zhToolButton_Delete_Text.Click += new System.EventHandler(this.zhToolButton_Delete_Click);
            // 
            // zhToolButton_Score_Text
            // 
            this.zhToolButton_Score_Text.Location = new System.Drawing.Point(666, 49);
            this.zhToolButton_Score_Text.Name = "zhToolButton_Score_Text";
            this.zhToolButton_Score_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Score_Text.TabIndex = 52;
            this.zhToolButton_Score_Text.Tag = "Score";
            this.zhToolButton_Score_Text.Text = "label44";
            this.zhToolButton_Score_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Noise_Text
            // 
            this.zhToolButton_Noise_Text.Location = new System.Drawing.Point(619, 49);
            this.zhToolButton_Noise_Text.Name = "zhToolButton_Noise_Text";
            this.zhToolButton_Noise_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Noise_Text.TabIndex = 51;
            this.zhToolButton_Noise_Text.Tag = "Noise";
            this.zhToolButton_Noise_Text.Text = "label43";
            this.zhToolButton_Noise_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Humidity_Text
            // 
            this.zhToolButton_Humidity_Text.Location = new System.Drawing.Point(568, 49);
            this.zhToolButton_Humidity_Text.Name = "zhToolButton_Humidity_Text";
            this.zhToolButton_Humidity_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Humidity_Text.TabIndex = 50;
            this.zhToolButton_Humidity_Text.Tag = "Humidity";
            this.zhToolButton_Humidity_Text.Text = "label42";
            this.zhToolButton_Humidity_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Temperature_Text
            // 
            this.zhToolButton_Temperature_Text.Location = new System.Drawing.Point(516, 49);
            this.zhToolButton_Temperature_Text.Name = "zhToolButton_Temperature_Text";
            this.zhToolButton_Temperature_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Temperature_Text.TabIndex = 49;
            this.zhToolButton_Temperature_Text.Tag = "Temperature";
            this.zhToolButton_Temperature_Text.Text = "label41";
            this.zhToolButton_Temperature_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Lunar_Text
            // 
            this.zhToolButton_Lunar_Text.Location = new System.Drawing.Point(466, 49);
            this.zhToolButton_Lunar_Text.Name = "zhToolButton_Lunar_Text";
            this.zhToolButton_Lunar_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Lunar_Text.TabIndex = 48;
            this.zhToolButton_Lunar_Text.Tag = "Lunar";
            this.zhToolButton_Lunar_Text.Text = "label40";
            this.zhToolButton_Lunar_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Counter_Text
            // 
            this.zhToolButton_Counter_Text.Location = new System.Drawing.Point(411, 49);
            this.zhToolButton_Counter_Text.Name = "zhToolButton_Counter_Text";
            this.zhToolButton_Counter_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Counter_Text.TabIndex = 47;
            this.zhToolButton_Counter_Text.Tag = "Counter";
            this.zhToolButton_Counter_Text.Text = "label39";
            this.zhToolButton_Counter_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Dial_Text
            // 
            this.zhToolButton_Dial_Text.Location = new System.Drawing.Point(360, 49);
            this.zhToolButton_Dial_Text.Name = "zhToolButton_Dial_Text";
            this.zhToolButton_Dial_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Dial_Text.TabIndex = 46;
            this.zhToolButton_Dial_Text.Tag = "Dial";
            this.zhToolButton_Dial_Text.Text = "label38";
            this.zhToolButton_Dial_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Clock_Text
            // 
            this.zhToolButton_Clock_Text.Location = new System.Drawing.Point(311, 49);
            this.zhToolButton_Clock_Text.Name = "zhToolButton_Clock_Text";
            this.zhToolButton_Clock_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Clock_Text.TabIndex = 45;
            this.zhToolButton_Clock_Text.Tag = "Time";
            this.zhToolButton_Clock_Text.Text = "label37";
            this.zhToolButton_Clock_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Marquee_Text
            // 
            this.zhToolButton_Marquee_Text.Location = new System.Drawing.Point(259, 49);
            this.zhToolButton_Marquee_Text.Name = "zhToolButton_Marquee_Text";
            this.zhToolButton_Marquee_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Marquee_Text.TabIndex = 44;
            this.zhToolButton_Marquee_Text.Tag = "PictureText";
            this.zhToolButton_Marquee_Text.Text = "label36";
            this.zhToolButton_Marquee_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Animation_Text
            // 
            this.zhToolButton_Animation_Text.Location = new System.Drawing.Point(211, 49);
            this.zhToolButton_Animation_Text.Name = "zhToolButton_Animation_Text";
            this.zhToolButton_Animation_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Animation_Text.TabIndex = 43;
            this.zhToolButton_Animation_Text.Tag = "Animation";
            this.zhToolButton_Animation_Text.Text = "label35";
            this.zhToolButton_Animation_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Text_Text
            // 
            this.zhToolButton_Text_Text.Location = new System.Drawing.Point(158, 49);
            this.zhToolButton_Text_Text.Name = "zhToolButton_Text_Text";
            this.zhToolButton_Text_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Text_Text.TabIndex = 42;
            this.zhToolButton_Text_Text.Tag = "Subtitle";
            this.zhToolButton_Text_Text.Text = "label34";
            this.zhToolButton_Text_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Item_Text
            // 
            this.zhToolButton_Item_Text.Location = new System.Drawing.Point(105, 49);
            this.zhToolButton_Item_Text.Name = "zhToolButton_Item_Text";
            this.zhToolButton_Item_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Item_Text.TabIndex = 41;
            this.zhToolButton_Item_Text.Text = "label15";
            this.zhToolButton_Item_Text.Click += new System.EventHandler(this.zhToolButton_Item_Click);
            // 
            // zhToolButton_Save_Text
            // 
            this.zhToolButton_Save_Text.Location = new System.Drawing.Point(51, 49);
            this.zhToolButton_Save_Text.Name = "zhToolButton_Save_Text";
            this.zhToolButton_Save_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Save_Text.TabIndex = 40;
            this.zhToolButton_Save_Text.Text = "label13";
            this.zhToolButton_Save_Text.Click += new System.EventHandler(this.zhToolButton_Save_Click);
            // 
            // zhToolButton_Open_Text
            // 
            this.zhToolButton_Open_Text.Font = new System.Drawing.Font("宋体", 10.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            this.zhToolButton_Open_Text.ForeColor = System.Drawing.Color.White;
            this.zhToolButton_Open_Text.Location = new System.Drawing.Point(2, 50);
            this.zhToolButton_Open_Text.Name = "zhToolButton_Open_Text";
            this.zhToolButton_Open_Text.Size = new System.Drawing.Size(51, 18);
            this.zhToolButton_Open_Text.TabIndex = 23;
            this.zhToolButton_Open_Text.Text = "label6";
            this.zhToolButton_Open_Text.Click += new System.EventHandler(this.zhToolButton_Open_Click);
            // 
            // zhToolButton_Usb
            // 
            this.zhToolButton_Usb.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Usb.Location = new System.Drawing.Point(977, 1);
            this.zhToolButton_Usb.Name = "zhToolButton_Usb";
            this.zhToolButton_Usb.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Usb.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Usb.TabIndex = 39;
            this.zhToolButton_Usb.TabStop = false;
            this.zhToolButton_Usb.Tag = "";
            this.zhToolButton_Usb.Click += new System.EventHandler(this.zhToolButton_Usb_Click);
            // 
            // zhToolButton_Send
            // 
            this.zhToolButton_Send.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Send.Location = new System.Drawing.Point(926, 1);
            this.zhToolButton_Send.Name = "zhToolButton_Send";
            this.zhToolButton_Send.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Send.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Send.TabIndex = 38;
            this.zhToolButton_Send.TabStop = false;
            this.zhToolButton_Send.Tag = "";
            this.zhToolButton_Send.Click += new System.EventHandler(this.zhToolButton_Send_Click);
            // 
            // zhToolButton_Play
            // 
            this.zhToolButton_Play.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Play.Location = new System.Drawing.Point(875, 1);
            this.zhToolButton_Play.Name = "zhToolButton_Play";
            this.zhToolButton_Play.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Play.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Play.TabIndex = 37;
            this.zhToolButton_Play.TabStop = false;
            this.zhToolButton_Play.Tag = "";
            this.zhToolButton_Play.Click += new System.EventHandler(this.zhToolButton_Play_Click);
            // 
            // zhToolButton_FindDevice
            // 
            this.zhToolButton_FindDevice.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_FindDevice.Location = new System.Drawing.Point(773, 1);
            this.zhToolButton_FindDevice.Name = "zhToolButton_FindDevice";
            this.zhToolButton_FindDevice.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_FindDevice.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_FindDevice.TabIndex = 36;
            this.zhToolButton_FindDevice.TabStop = false;
            this.zhToolButton_FindDevice.Tag = "";
            this.zhToolButton_FindDevice.Click += new System.EventHandler(this.zhToolButton_FindDevice_Click);
            // 
            // zhToolButton_Delete
            // 
            this.zhToolButton_Delete.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Delete.Location = new System.Drawing.Point(722, 1);
            this.zhToolButton_Delete.Name = "zhToolButton_Delete";
            this.zhToolButton_Delete.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Delete.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Delete.TabIndex = 35;
            this.zhToolButton_Delete.TabStop = false;
            this.zhToolButton_Delete.Tag = "";
            this.zhToolButton_Delete.Click += new System.EventHandler(this.zhToolButton_Delete_Click);
            // 
            // zhToolButton_Score
            // 
            this.zhToolButton_Score.BackColor = System.Drawing.Color.White;
            this.zhToolButton_Score.Location = new System.Drawing.Point(668, 1);
            this.zhToolButton_Score.Name = "zhToolButton_Score";
            this.zhToolButton_Score.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Score.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Score.TabIndex = 34;
            this.zhToolButton_Score.TabStop = false;
            this.zhToolButton_Score.Tag = "Score";
            this.zhToolButton_Score.Visible = false;
            // 
            // zhToolButton_Noise
            // 
            this.zhToolButton_Noise.BackColor = System.Drawing.Color.White;
            this.zhToolButton_Noise.Location = new System.Drawing.Point(617, 1);
            this.zhToolButton_Noise.Name = "zhToolButton_Noise";
            this.zhToolButton_Noise.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Noise.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Noise.TabIndex = 33;
            this.zhToolButton_Noise.TabStop = false;
            this.zhToolButton_Noise.Tag = "Noise";
            this.zhToolButton_Noise.Visible = false;
            // 
            // zhToolButton_Humidity
            // 
            this.zhToolButton_Humidity.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Humidity.Location = new System.Drawing.Point(566, 1);
            this.zhToolButton_Humidity.Name = "zhToolButton_Humidity";
            this.zhToolButton_Humidity.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Humidity.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Humidity.TabIndex = 32;
            this.zhToolButton_Humidity.TabStop = false;
            this.zhToolButton_Humidity.Tag = "Humidity";
            this.zhToolButton_Humidity.Visible = false;
            this.zhToolButton_Humidity.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Temperature
            // 
            this.zhToolButton_Temperature.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Temperature.Location = new System.Drawing.Point(515, 1);
            this.zhToolButton_Temperature.Name = "zhToolButton_Temperature";
            this.zhToolButton_Temperature.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Temperature.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Temperature.TabIndex = 31;
            this.zhToolButton_Temperature.TabStop = false;
            this.zhToolButton_Temperature.Tag = "Temperature";
            this.zhToolButton_Temperature.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Lunar
            // 
            this.zhToolButton_Lunar.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Lunar.Location = new System.Drawing.Point(464, 1);
            this.zhToolButton_Lunar.Name = "zhToolButton_Lunar";
            this.zhToolButton_Lunar.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Lunar.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Lunar.TabIndex = 30;
            this.zhToolButton_Lunar.TabStop = false;
            this.zhToolButton_Lunar.Tag = "Lunar";
            this.zhToolButton_Lunar.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Counter
            // 
            this.zhToolButton_Counter.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Counter.Location = new System.Drawing.Point(413, 1);
            this.zhToolButton_Counter.Name = "zhToolButton_Counter";
            this.zhToolButton_Counter.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Counter.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Counter.TabIndex = 29;
            this.zhToolButton_Counter.TabStop = false;
            this.zhToolButton_Counter.Tag = "Counter";
            this.zhToolButton_Counter.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Dial
            // 
            this.zhToolButton_Dial.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Dial.Location = new System.Drawing.Point(362, 1);
            this.zhToolButton_Dial.Name = "zhToolButton_Dial";
            this.zhToolButton_Dial.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Dial.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Dial.TabIndex = 28;
            this.zhToolButton_Dial.TabStop = false;
            this.zhToolButton_Dial.Tag = "Dial";
            this.zhToolButton_Dial.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Clock
            // 
            this.zhToolButton_Clock.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Clock.Location = new System.Drawing.Point(311, 1);
            this.zhToolButton_Clock.Name = "zhToolButton_Clock";
            this.zhToolButton_Clock.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Clock.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Clock.TabIndex = 27;
            this.zhToolButton_Clock.TabStop = false;
            this.zhToolButton_Clock.Tag = "Time";
            this.zhToolButton_Clock.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Marquee
            // 
            this.zhToolButton_Marquee.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Marquee.Location = new System.Drawing.Point(260, 1);
            this.zhToolButton_Marquee.Name = "zhToolButton_Marquee";
            this.zhToolButton_Marquee.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Marquee.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Marquee.TabIndex = 26;
            this.zhToolButton_Marquee.TabStop = false;
            this.zhToolButton_Marquee.Tag = "PictureText";
            this.zhToolButton_Marquee.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Animation
            // 
            this.zhToolButton_Animation.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Animation.Location = new System.Drawing.Point(209, 1);
            this.zhToolButton_Animation.Name = "zhToolButton_Animation";
            this.zhToolButton_Animation.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Animation.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Animation.TabIndex = 25;
            this.zhToolButton_Animation.TabStop = false;
            this.zhToolButton_Animation.Tag = "Animation";
            this.zhToolButton_Animation.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Text
            // 
            this.zhToolButton_Text.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Text.Location = new System.Drawing.Point(158, 1);
            this.zhToolButton_Text.Name = "zhToolButton_Text";
            this.zhToolButton_Text.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Text.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Text.TabIndex = 24;
            this.zhToolButton_Text.TabStop = false;
            this.zhToolButton_Text.Tag = "Subtitle";
            this.zhToolButton_Text.Click += new System.EventHandler(this.AddContent);
            // 
            // zhToolButton_Item
            // 
            this.zhToolButton_Item.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Item.Location = new System.Drawing.Point(104, 1);
            this.zhToolButton_Item.Name = "zhToolButton_Item";
            this.zhToolButton_Item.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Item.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Item.TabIndex = 23;
            this.zhToolButton_Item.TabStop = false;
            this.zhToolButton_Item.Click += new System.EventHandler(this.zhToolButton_Item_Click);
            // 
            // zhToolButton_Save
            // 
            this.zhToolButton_Save.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Save.Location = new System.Drawing.Point(53, 1);
            this.zhToolButton_Save.Name = "zhToolButton_Save";
            this.zhToolButton_Save.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Save.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Save.TabIndex = 23;
            this.zhToolButton_Save.TabStop = false;
            this.zhToolButton_Save.Visible = false;
            this.zhToolButton_Save.Click += new System.EventHandler(this.zhToolButton_Save_Click);
            // 
            // zhToolButton_Open
            // 
            this.zhToolButton_Open.BackColor = System.Drawing.Color.Gray;
            this.zhToolButton_Open.Location = new System.Drawing.Point(2, 1);
            this.zhToolButton_Open.Name = "zhToolButton_Open";
            this.zhToolButton_Open.Size = new System.Drawing.Size(48, 48);
            this.zhToolButton_Open.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.zhToolButton_Open.TabIndex = 4;
            this.zhToolButton_Open.TabStop = false;
            this.zhToolButton_Open.Click += new System.EventHandler(this.zhToolButton_Open_Click);
            // 
            // pictureBox_Spliter2
            // 
            this.pictureBox_Spliter2.Location = new System.Drawing.Point(718, 0);
            this.pictureBox_Spliter2.Name = "pictureBox_Spliter2";
            this.pictureBox_Spliter2.Size = new System.Drawing.Size(2, 70);
            this.pictureBox_Spliter2.TabIndex = 18;
            this.pictureBox_Spliter2.TabStop = false;
            // 
            // pictureBox_Spliter1
            // 
            this.pictureBox_Spliter1.Location = new System.Drawing.Point(154, 0);
            this.pictureBox_Spliter1.Name = "pictureBox_Spliter1";
            this.pictureBox_Spliter1.Size = new System.Drawing.Size(2, 70);
            this.pictureBox_Spliter1.TabIndex = 3;
            this.pictureBox_Spliter1.TabStop = false;
            // 
            // pictureBox_ChangeSize
            // 
            this.pictureBox_ChangeSize.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.pictureBox_ChangeSize.BackColor = System.Drawing.Color.Transparent;
            this.pictureBox_ChangeSize.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox_ChangeSize.Image")));
            this.pictureBox_ChangeSize.Location = new System.Drawing.Point(990, 534);
            this.pictureBox_ChangeSize.Name = "pictureBox_ChangeSize";
            this.pictureBox_ChangeSize.Size = new System.Drawing.Size(11, 11);
            this.pictureBox_ChangeSize.TabIndex = 31;
            this.pictureBox_ChangeSize.TabStop = false;
            this.pictureBox_ChangeSize.MouseDown += new System.Windows.Forms.MouseEventHandler(this.pictureBox_ChangeSize_MouseDown);
            this.pictureBox_ChangeSize.MouseEnter += new System.EventHandler(this.pictureBox2_ChangeSize_MouseEnter);
            this.pictureBox_ChangeSize.MouseLeave += new System.EventHandler(this.pictureBox2_ChangeSize_MouseLeave);
            this.pictureBox_ChangeSize.MouseUp += new System.Windows.Forms.MouseEventHandler(this.pictureBox_ChangeSize_MouseUp);
            // 
            // contextMenuStrip1_Marquee
            // 
            this.contextMenuStrip1_Marquee.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.marqueeReverseToolStripMenuItem,
            this.deleteMarqueeToolStripMenuItem,
            this.toolStripSeparator4,
            this.Add_Marquee_Text_ToolStripMenuItem,
            this.Add_Marquee_Richtext_ToolStripMenuItem,
            this.Add_Marquee_Animation_ToolStripMenuItem,
            this.Add_Marquee_Grid_ToolStripMenuItem,
            this.toolStripSeparator5,
            this.Add_Marquee_Gif_ToolStripMenuItem,
            this.Add_Marquee_Image_ToolStripMenuItem});
            this.contextMenuStrip1_Marquee.Name = "contextMenuStripMarquee";
            this.contextMenuStrip1_Marquee.Size = new System.Drawing.Size(149, 192);
            // 
            // marqueeReverseToolStripMenuItem
            // 
            this.marqueeReverseToolStripMenuItem.Name = "marqueeReverseToolStripMenuItem";
            this.marqueeReverseToolStripMenuItem.Size = new System.Drawing.Size(148, 22);
            this.marqueeReverseToolStripMenuItem.Text = "反相";
            this.marqueeReverseToolStripMenuItem.Click += new System.EventHandler(this.marqueeReverseToolStripMenuItem_Click);
            // 
            // deleteMarqueeToolStripMenuItem
            // 
            this.deleteMarqueeToolStripMenuItem.Name = "deleteMarqueeToolStripMenuItem";
            this.deleteMarqueeToolStripMenuItem.Size = new System.Drawing.Size(148, 22);
            this.deleteMarqueeToolStripMenuItem.Text = "删除";
            this.deleteMarqueeToolStripMenuItem.Click += new System.EventHandler(this.deleteMarqueeToolStripMenuItem_Click);
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = "toolStripSeparator4";
            this.toolStripSeparator4.Size = new System.Drawing.Size(145, 6);
            // 
            // Add_Marquee_Text_ToolStripMenuItem
            // 
            this.Add_Marquee_Text_ToolStripMenuItem.Name = "Add_Marquee_Text_ToolStripMenuItem";
            this.Add_Marquee_Text_ToolStripMenuItem.Size = new System.Drawing.Size(148, 22);
            this.Add_Marquee_Text_ToolStripMenuItem.Text = "添加单行文本";
            this.Add_Marquee_Text_ToolStripMenuItem.Click += new System.EventHandler(this.marqueeConText_Click);
            // 
            // Add_Marquee_Richtext_ToolStripMenuItem
            // 
            this.Add_Marquee_Richtext_ToolStripMenuItem.Name = "Add_Marquee_Richtext_ToolStripMenuItem";
            this.Add_Marquee_Richtext_ToolStripMenuItem.Size = new System.Drawing.Size(148, 22);
            this.Add_Marquee_Richtext_ToolStripMenuItem.Text = "添加多行文本";
            this.Add_Marquee_Richtext_ToolStripMenuItem.Click += new System.EventHandler(this.marqueeConRichText_Click);
            // 
            // Add_Marquee_Animation_ToolStripMenuItem
            // 
            this.Add_Marquee_Animation_ToolStripMenuItem.Name = "Add_Marquee_Animation_ToolStripMenuItem";
            this.Add_Marquee_Animation_ToolStripMenuItem.Size = new System.Drawing.Size(148, 22);
            this.Add_Marquee_Animation_ToolStripMenuItem.Text = "添加动画";
            this.Add_Marquee_Animation_ToolStripMenuItem.Click += new System.EventHandler(this.marqueeConFlash_Click);
            // 
            // Add_Marquee_Grid_ToolStripMenuItem
            // 
            this.Add_Marquee_Grid_ToolStripMenuItem.Name = "Add_Marquee_Grid_ToolStripMenuItem";
            this.Add_Marquee_Grid_ToolStripMenuItem.Size = new System.Drawing.Size(148, 22);
            this.Add_Marquee_Grid_ToolStripMenuItem.Text = "添加表格";
            this.Add_Marquee_Grid_ToolStripMenuItem.Click += new System.EventHandler(this.marqueeConGrid_Click);
            // 
            // toolStripSeparator5
            // 
            this.toolStripSeparator5.Name = "toolStripSeparator5";
            this.toolStripSeparator5.Size = new System.Drawing.Size(145, 6);
            // 
            // Add_Marquee_Gif_ToolStripMenuItem
            // 
            this.Add_Marquee_Gif_ToolStripMenuItem.Name = "Add_Marquee_Gif_ToolStripMenuItem";
            this.Add_Marquee_Gif_ToolStripMenuItem.Size = new System.Drawing.Size(148, 22);
            this.Add_Marquee_Gif_ToolStripMenuItem.Text = "导入动画";
            this.Add_Marquee_Gif_ToolStripMenuItem.Click += new System.EventHandler(this.marqueeConGif_Click);
            // 
            // Add_Marquee_Image_ToolStripMenuItem
            // 
            this.Add_Marquee_Image_ToolStripMenuItem.Name = "Add_Marquee_Image_ToolStripMenuItem";
            this.Add_Marquee_Image_ToolStripMenuItem.Size = new System.Drawing.Size(148, 22);
            this.Add_Marquee_Image_ToolStripMenuItem.Text = "导入图片";
            this.Add_Marquee_Image_ToolStripMenuItem.Click += new System.EventHandler(this.marqueeConPicture_Click);
            // 
            // imageListCountry
            // 
            this.imageListCountry.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListCountry.ImageStream")));
            this.imageListCountry.TransparentColor = System.Drawing.Color.Transparent;
            this.imageListCountry.Images.SetKeyName(0, "China.png");
            this.imageListCountry.Images.SetKeyName(1, "English.png");
            this.imageListCountry.Images.SetKeyName(2, "France.png");
            this.imageListCountry.Images.SetKeyName(3, "India.png");
            this.imageListCountry.Images.SetKeyName(4, "Japan.png");
            this.imageListCountry.Images.SetKeyName(5, "Portugal.png");
            this.imageListCountry.Images.SetKeyName(6, "Russia.png");
            this.imageListCountry.Images.SetKeyName(7, "Spain.png");
            this.imageListCountry.Images.SetKeyName(8, "Thailand.png");
            this.imageListCountry.Images.SetKeyName(9, "Turkey.png");
            this.imageListCountry.Images.SetKeyName(10, "Arabia.png");
            this.imageListCountry.Images.SetKeyName(11, "Bangladesh.png");
            this.imageListCountry.Images.SetKeyName(12, "Indonesia.png");
            // 
            // contextMenuStripSharedSource
            // 
            this.contextMenuStripSharedSource.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.tsmissAddSubtitle,
            this.tsmissAddAnimation,
            this.tsmissAddPictureText,
            this.tsmissAddTime,
            this.tsmissAddDial,
            this.tsmissAddCounter,
            this.tsmissAddLunar,
            this.tsmissAddTemperature,
            this.tsmissAddWeather,
            this.tsmissAddString,
            this.tssss1,
            this.tsmissCopyItem,
            this.tssss2,
            this.tsmissUnsharedItem,
            this.tssss3,
            this.tsmissDeleteItem});
            this.contextMenuStripSharedSource.Name = "contextMenuStripSharedSource";
            this.contextMenuStripSharedSource.Size = new System.Drawing.Size(149, 308);
            // 
            // tsmissAddSubtitle
            // 
            this.tsmissAddSubtitle.Name = "tsmissAddSubtitle";
            this.tsmissAddSubtitle.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddSubtitle.Tag = "Subtitle";
            this.tsmissAddSubtitle.Text = "添加字幕";
            this.tsmissAddSubtitle.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddAnimation
            // 
            this.tsmissAddAnimation.Name = "tsmissAddAnimation";
            this.tsmissAddAnimation.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddAnimation.Tag = "Animation";
            this.tsmissAddAnimation.Text = "添加动画";
            this.tsmissAddAnimation.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddPictureText
            // 
            this.tsmissAddPictureText.Name = "tsmissAddPictureText";
            this.tsmissAddPictureText.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddPictureText.Tag = "PictureText";
            this.tsmissAddPictureText.Text = "添加图文";
            this.tsmissAddPictureText.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddTime
            // 
            this.tsmissAddTime.Name = "tsmissAddTime";
            this.tsmissAddTime.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddTime.Tag = "Time";
            this.tsmissAddTime.Text = "添加时间";
            this.tsmissAddTime.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddDial
            // 
            this.tsmissAddDial.Name = "tsmissAddDial";
            this.tsmissAddDial.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddDial.Tag = "Dial";
            this.tsmissAddDial.Text = "添加表盘";
            this.tsmissAddDial.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddCounter
            // 
            this.tsmissAddCounter.Name = "tsmissAddCounter";
            this.tsmissAddCounter.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddCounter.Tag = "Counter";
            this.tsmissAddCounter.Text = "添加计时";
            this.tsmissAddCounter.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddLunar
            // 
            this.tsmissAddLunar.Name = "tsmissAddLunar";
            this.tsmissAddLunar.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddLunar.Tag = "Lunar";
            this.tsmissAddLunar.Text = "添加农历";
            this.tsmissAddLunar.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddTemperature
            // 
            this.tsmissAddTemperature.Name = "tsmissAddTemperature";
            this.tsmissAddTemperature.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddTemperature.Tag = "Temperature";
            this.tsmissAddTemperature.Text = "添加温度";
            this.tsmissAddTemperature.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddWeather
            // 
            this.tsmissAddWeather.Name = "tsmissAddWeather";
            this.tsmissAddWeather.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddWeather.Tag = "Weather";
            this.tsmissAddWeather.Text = "添加天气";
            this.tsmissAddWeather.Click += new System.EventHandler(this.AddContent);
            // 
            // tsmissAddString
            // 
            this.tsmissAddString.Name = "tsmissAddString";
            this.tsmissAddString.Size = new System.Drawing.Size(148, 22);
            this.tsmissAddString.Tag = "String";
            this.tsmissAddString.Text = "添加字符";
            this.tsmissAddString.Click += new System.EventHandler(this.AddContent);
            // 
            // tssss1
            // 
            this.tssss1.Name = "tssss1";
            this.tssss1.Size = new System.Drawing.Size(145, 6);
            // 
            // tsmissCopyItem
            // 
            this.tsmissCopyItem.Name = "tsmissCopyItem";
            this.tsmissCopyItem.Size = new System.Drawing.Size(148, 22);
            this.tsmissCopyItem.Text = "复制节目到...";
            this.tsmissCopyItem.Click += new System.EventHandler(this.copyItemContentToolStripMenuItem_Click);
            // 
            // tssss2
            // 
            this.tssss2.Name = "tssss2";
            this.tssss2.Size = new System.Drawing.Size(145, 6);
            // 
            // tsmissUnsharedItem
            // 
            this.tsmissUnsharedItem.Name = "tsmissUnsharedItem";
            this.tsmissUnsharedItem.Size = new System.Drawing.Size(148, 22);
            this.tsmissUnsharedItem.Text = "取消共享节目";
            this.tsmissUnsharedItem.Click += new System.EventHandler(this.UnsharedItem_Click);
            // 
            // tssss3
            // 
            this.tssss3.Name = "tssss3";
            this.tssss3.Size = new System.Drawing.Size(145, 6);
            // 
            // tsmissDeleteItem
            // 
            this.tsmissDeleteItem.Name = "tsmissDeleteItem";
            this.tsmissDeleteItem.Size = new System.Drawing.Size(148, 22);
            this.tsmissDeleteItem.Text = "删除节目";
            this.tsmissDeleteItem.Click += new System.EventHandler(this.DeleteSharedItem_Click);
            // 
            // contextMenuStripShared
            // 
            this.contextMenuStripShared.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.tsmisEditSharedItem,
            this.tsmisUnsharedItem,
            this.tsss1,
            this.tsmisDeleteItem});
            this.contextMenuStripShared.Name = "contextMenuStripShared";
            this.contextMenuStripShared.Size = new System.Drawing.Size(149, 76);
            // 
            // tsmisEditSharedItem
            // 
            this.tsmisEditSharedItem.Name = "tsmisEditSharedItem";
            this.tsmisEditSharedItem.Size = new System.Drawing.Size(148, 22);
            this.tsmisEditSharedItem.Text = "编辑共享节目";
            this.tsmisEditSharedItem.Click += new System.EventHandler(this.EditSharedItem_Click);
            // 
            // tsmisUnsharedItem
            // 
            this.tsmisUnsharedItem.Name = "tsmisUnsharedItem";
            this.tsmisUnsharedItem.Size = new System.Drawing.Size(148, 22);
            this.tsmisUnsharedItem.Text = "取消共享节目";
            this.tsmisUnsharedItem.Click += new System.EventHandler(this.UnsharedItem_Click);
            // 
            // tsss1
            // 
            this.tsss1.Name = "tsss1";
            this.tsss1.Size = new System.Drawing.Size(145, 6);
            // 
            // tsmisDeleteItem
            // 
            this.tsmisDeleteItem.Name = "tsmisDeleteItem";
            this.tsmisDeleteItem.Size = new System.Drawing.Size(148, 22);
            this.tsmisDeleteItem.Text = "删除节目";
            this.tsmisDeleteItem.Click += new System.EventHandler(this.DeleteSharedItem_Click);
            // 
            // StringEffectSettingzhGroupBox
            // 
            this.StringEffectSettingzhGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.StringEffectSettingzhGroupBox.Controls.Add(this.cmbStringStay);
            this.StringEffectSettingzhGroupBox.Controls.Add(this.cmbStringEntrySpeed);
            this.StringEffectSettingzhGroupBox.Controls.Add(this.cmbStringEntryMode);
            this.StringEffectSettingzhGroupBox.Controls.Add(this.lblStringStay);
            this.StringEffectSettingzhGroupBox.Controls.Add(this.lblStringEntrySpeed);
            this.StringEffectSettingzhGroupBox.Controls.Add(this.lblStringEntryMode);
            this.StringEffectSettingzhGroupBox.Location = new System.Drawing.Point(790, 445);
            this.StringEffectSettingzhGroupBox.Name = "StringEffectSettingzhGroupBox";
            this.StringEffectSettingzhGroupBox.Size = new System.Drawing.Size(85, 19);
            this.StringEffectSettingzhGroupBox.TabIndex = 44;
            this.StringEffectSettingzhGroupBox.Tag = "字符特技显示";
            this.StringEffectSettingzhGroupBox.Text = "字符特技显示";
            this.StringEffectSettingzhGroupBox.TextColor = System.Drawing.Color.Black;
            this.StringEffectSettingzhGroupBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // cmbStringStay
            // 
            this.cmbStringStay.FormattingEnabled = true;
            this.cmbStringStay.Items.AddRange(new object[] {
            "0.000s",
            "0.010s",
            "0.015s",
            "0.020s",
            "0.030s",
            "0.040s",
            "0.050s",
            "0.080s",
            "0.1s",
            "0.2s",
            "0.5s",
            "0.8s",
            "1s",
            "2s",
            "3s",
            "5s",
            "6s",
            "7s",
            "8s",
            "9s",
            "10s",
            "11s",
            "13s",
            "14s",
            "15s",
            "16s",
            "17s",
            "18s",
            "19s",
            "20s",
            "21s",
            "22s",
            "23s",
            "25s",
            "30s",
            "35s",
            "40s",
            "45s",
            "50s",
            "60s",
            "70s",
            "80s",
            "90s",
            "100s",
            "120s",
            "150s",
            "200s",
            "500s"});
            this.cmbStringStay.Location = new System.Drawing.Point(42, 92);
            this.cmbStringStay.Name = "cmbStringStay";
            this.cmbStringStay.Size = new System.Drawing.Size(80, 20);
            this.cmbStringStay.TabIndex = 13;
            this.cmbStringStay.SelectedIndexChanged += new System.EventHandler(this.cmbStringStay_SelectedIndexChanged);
            // 
            // cmbStringEntrySpeed
            // 
            this.cmbStringEntrySpeed.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbStringEntrySpeed.FormattingEnabled = true;
            this.cmbStringEntrySpeed.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32"});
            this.cmbStringEntrySpeed.Location = new System.Drawing.Point(42, 63);
            this.cmbStringEntrySpeed.Name = "cmbStringEntrySpeed";
            this.cmbStringEntrySpeed.Size = new System.Drawing.Size(80, 20);
            this.cmbStringEntrySpeed.TabIndex = 8;
            this.cmbStringEntrySpeed.SelectedIndexChanged += new System.EventHandler(this.cmbStringEntrySpeed_SelectedIndexChanged);
            // 
            // cmbStringEntryMode
            // 
            this.cmbStringEntryMode.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbStringEntryMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbStringEntryMode.FormattingEnabled = true;
            this.cmbStringEntryMode.Location = new System.Drawing.Point(42, 32);
            this.cmbStringEntryMode.Name = "cmbStringEntryMode";
            this.cmbStringEntryMode.Size = new System.Drawing.Size(80, 22);
            this.cmbStringEntryMode.TabIndex = 7;
            this.cmbStringEntryMode.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.cmbStringEntryMode_DrawItem);
            this.cmbStringEntryMode.SelectedIndexChanged += new System.EventHandler(this.cmbStringEntryMode_SelectedIndexChanged);
            this.cmbStringEntryMode.DropDownClosed += new System.EventHandler(this.cmbStringEntryMode_DropDownClosed);
            // 
            // lblStringStay
            // 
            this.lblStringStay.AutoSize = true;
            this.lblStringStay.Location = new System.Drawing.Point(2, 96);
            this.lblStringStay.Name = "lblStringStay";
            this.lblStringStay.Size = new System.Drawing.Size(29, 12);
            this.lblStringStay.TabIndex = 12;
            this.lblStringStay.Text = "停留";
            // 
            // lblStringEntrySpeed
            // 
            this.lblStringEntrySpeed.AutoSize = true;
            this.lblStringEntrySpeed.Location = new System.Drawing.Point(2, 67);
            this.lblStringEntrySpeed.Name = "lblStringEntrySpeed";
            this.lblStringEntrySpeed.Size = new System.Drawing.Size(29, 12);
            this.lblStringEntrySpeed.TabIndex = 8;
            this.lblStringEntrySpeed.Text = "速度";
            // 
            // lblStringEntryMode
            // 
            this.lblStringEntryMode.AutoSize = true;
            this.lblStringEntryMode.Location = new System.Drawing.Point(2, 36);
            this.lblStringEntryMode.Name = "lblStringEntryMode";
            this.lblStringEntryMode.Size = new System.Drawing.Size(29, 12);
            this.lblStringEntryMode.TabIndex = 7;
            this.lblStringEntryMode.Text = "进入";
            // 
            // stringAttributeBox
            // 
            this.stringAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.stringAttributeBox.Controls.Add(this.stringEditor1);
            this.stringAttributeBox.Location = new System.Drawing.Point(100, 476);
            this.stringAttributeBox.Name = "stringAttributeBox";
            this.stringAttributeBox.Size = new System.Drawing.Size(75, 19);
            this.stringAttributeBox.TabIndex = 43;
            this.stringAttributeBox.Tag = "字符属性";
            this.stringAttributeBox.Text = "字符属性";
            this.stringAttributeBox.TextColor = System.Drawing.Color.Black;
            this.stringAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            // 
            // stringEditor1
            // 
            this.stringEditor1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.stringEditor1.BackColor = System.Drawing.Color.Transparent;
            this.stringEditor1.Location = new System.Drawing.Point(11, 22);
            this.stringEditor1.Name = "stringEditor1";
            this.stringEditor1.Size = new System.Drawing.Size(0, 0);
            this.stringEditor1.TabIndex = 0;
            // 
            // zhGroupBoxItemBackground
            // 
            this.zhGroupBoxItemBackground.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.zhGroupBoxItemBackground.BackColor = System.Drawing.Color.Transparent;
            this.zhGroupBoxItemBackground.Controls.Add(this.colorfulBackgroundItem);
            this.zhGroupBoxItemBackground.Location = new System.Drawing.Point(881, 362);
            this.zhGroupBoxItemBackground.Name = "zhGroupBoxItemBackground";
            this.zhGroupBoxItemBackground.Size = new System.Drawing.Size(92, 18);
            this.zhGroupBoxItemBackground.TabIndex = 42;
            this.zhGroupBoxItemBackground.Tag = "节目背景设置";
            this.zhGroupBoxItemBackground.Text = "节目背景设置";
            this.zhGroupBoxItemBackground.TextColor = System.Drawing.Color.Black;
            this.zhGroupBoxItemBackground.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // colorfulBackgroundItem
            // 
            this.colorfulBackgroundItem.BackColor = System.Drawing.Color.Transparent;
            this.colorfulBackgroundItem.Location = new System.Drawing.Point(4, 25);
            this.colorfulBackgroundItem.Name = "colorfulBackgroundItem";
            this.colorfulBackgroundItem.Size = new System.Drawing.Size(123, 155);
            this.colorfulBackgroundItem.TabIndex = 0;
            // 
            // zhGroupBoxContentBackground
            // 
            this.zhGroupBoxContentBackground.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.zhGroupBoxContentBackground.BackColor = System.Drawing.Color.Transparent;
            this.zhGroupBoxContentBackground.Controls.Add(this.colorfulBackgroundContent);
            this.zhGroupBoxContentBackground.Location = new System.Drawing.Point(881, 337);
            this.zhGroupBoxContentBackground.Name = "zhGroupBoxContentBackground";
            this.zhGroupBoxContentBackground.Size = new System.Drawing.Size(92, 17);
            this.zhGroupBoxContentBackground.TabIndex = 41;
            this.zhGroupBoxContentBackground.Tag = "内容背景设置";
            this.zhGroupBoxContentBackground.Text = "内容背景设置";
            this.zhGroupBoxContentBackground.TextColor = System.Drawing.Color.Black;
            this.zhGroupBoxContentBackground.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // colorfulBackgroundContent
            // 
            this.colorfulBackgroundContent.BackColor = System.Drawing.Color.Transparent;
            this.colorfulBackgroundContent.Location = new System.Drawing.Point(4, 25);
            this.colorfulBackgroundContent.Name = "colorfulBackgroundContent";
            this.colorfulBackgroundContent.Size = new System.Drawing.Size(123, 155);
            this.colorfulBackgroundContent.TabIndex = 1;
            // 
            // WeatherEffectSettingzhGroupBox
            // 
            this.WeatherEffectSettingzhGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.WeatherEffectSettingzhGroupBox.Controls.Add(this.cmbWeatherStay);
            this.WeatherEffectSettingzhGroupBox.Controls.Add(this.cmbWeatherEntrySpeed);
            this.WeatherEffectSettingzhGroupBox.Controls.Add(this.cmbWeatherEntryMode);
            this.WeatherEffectSettingzhGroupBox.Controls.Add(this.lblWeatherStay);
            this.WeatherEffectSettingzhGroupBox.Controls.Add(this.lblWeatherEntrySpeed);
            this.WeatherEffectSettingzhGroupBox.Controls.Add(this.lblWeatherEntryMode);
            this.WeatherEffectSettingzhGroupBox.Location = new System.Drawing.Point(881, 416);
            this.WeatherEffectSettingzhGroupBox.Name = "WeatherEffectSettingzhGroupBox";
            this.WeatherEffectSettingzhGroupBox.Size = new System.Drawing.Size(92, 20);
            this.WeatherEffectSettingzhGroupBox.TabIndex = 39;
            this.WeatherEffectSettingzhGroupBox.Tag = "天气特技显示";
            this.WeatherEffectSettingzhGroupBox.Text = "天气特技显示";
            this.WeatherEffectSettingzhGroupBox.TextColor = System.Drawing.Color.Black;
            this.WeatherEffectSettingzhGroupBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // cmbWeatherStay
            // 
            this.cmbWeatherStay.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbWeatherStay.FormattingEnabled = true;
            this.cmbWeatherStay.Items.AddRange(new object[] {
            "0.000s",
            "0.010s",
            "0.015s",
            "0.020s",
            "0.030s",
            "0.040s",
            "0.050s",
            "0.080s",
            "0.1s",
            "0.2s",
            "0.5s",
            "0.8s",
            "1s",
            "2s",
            "3s",
            "5s",
            "6s",
            "7s",
            "8s",
            "9s",
            "10s",
            "11s",
            "13s",
            "14s",
            "15s",
            "16s",
            "17s",
            "18s",
            "19s",
            "20s",
            "21s",
            "22s",
            "23s",
            "25s",
            "30s",
            "35s",
            "40s",
            "45s",
            "50s",
            "60s",
            "70s",
            "80s",
            "90s",
            "100s",
            "120s",
            "150s",
            "200s",
            "500s"});
            this.cmbWeatherStay.Location = new System.Drawing.Point(42, 92);
            this.cmbWeatherStay.Name = "cmbWeatherStay";
            this.cmbWeatherStay.Size = new System.Drawing.Size(80, 20);
            this.cmbWeatherStay.TabIndex = 13;
            this.cmbWeatherStay.SelectedIndexChanged += new System.EventHandler(this.cmbWeatherStay_SelectedIndexChanged);
            // 
            // cmbWeatherEntrySpeed
            // 
            this.cmbWeatherEntrySpeed.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbWeatherEntrySpeed.FormattingEnabled = true;
            this.cmbWeatherEntrySpeed.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32"});
            this.cmbWeatherEntrySpeed.Location = new System.Drawing.Point(42, 63);
            this.cmbWeatherEntrySpeed.Name = "cmbWeatherEntrySpeed";
            this.cmbWeatherEntrySpeed.Size = new System.Drawing.Size(80, 20);
            this.cmbWeatherEntrySpeed.TabIndex = 8;
            this.cmbWeatherEntrySpeed.SelectedIndexChanged += new System.EventHandler(this.cmbWeatherEntrySpeed_SelectedIndexChanged);
            // 
            // cmbWeatherEntryMode
            // 
            this.cmbWeatherEntryMode.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbWeatherEntryMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbWeatherEntryMode.FormattingEnabled = true;
            this.cmbWeatherEntryMode.Location = new System.Drawing.Point(42, 32);
            this.cmbWeatherEntryMode.Name = "cmbWeatherEntryMode";
            this.cmbWeatherEntryMode.Size = new System.Drawing.Size(80, 22);
            this.cmbWeatherEntryMode.TabIndex = 7;
            this.cmbWeatherEntryMode.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.cmbWeatherEntryMode_DrawItem);
            this.cmbWeatherEntryMode.SelectedIndexChanged += new System.EventHandler(this.cmbWeatherEntryMode_SelectedIndexChanged);
            this.cmbWeatherEntryMode.DropDownClosed += new System.EventHandler(this.cmbWeatherEntryMode_DropDownClosed);
            // 
            // lblWeatherStay
            // 
            this.lblWeatherStay.AutoSize = true;
            this.lblWeatherStay.Location = new System.Drawing.Point(2, 96);
            this.lblWeatherStay.Name = "lblWeatherStay";
            this.lblWeatherStay.Size = new System.Drawing.Size(29, 12);
            this.lblWeatherStay.TabIndex = 12;
            this.lblWeatherStay.Text = "停留";
            // 
            // lblWeatherEntrySpeed
            // 
            this.lblWeatherEntrySpeed.AutoSize = true;
            this.lblWeatherEntrySpeed.Location = new System.Drawing.Point(2, 67);
            this.lblWeatherEntrySpeed.Name = "lblWeatherEntrySpeed";
            this.lblWeatherEntrySpeed.Size = new System.Drawing.Size(29, 12);
            this.lblWeatherEntrySpeed.TabIndex = 8;
            this.lblWeatherEntrySpeed.Text = "速度";
            // 
            // lblWeatherEntryMode
            // 
            this.lblWeatherEntryMode.AutoSize = true;
            this.lblWeatherEntryMode.Location = new System.Drawing.Point(2, 36);
            this.lblWeatherEntryMode.Name = "lblWeatherEntryMode";
            this.lblWeatherEntryMode.Size = new System.Drawing.Size(29, 12);
            this.lblWeatherEntryMode.TabIndex = 7;
            this.lblWeatherEntryMode.Text = "进入";
            // 
            // weatherAttributeBox
            // 
            this.weatherAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.weatherAttributeBox.Controls.Add(this.weatherEditor1);
            this.weatherAttributeBox.Location = new System.Drawing.Point(21, 475);
            this.weatherAttributeBox.Name = "weatherAttributeBox";
            this.weatherAttributeBox.Size = new System.Drawing.Size(69, 19);
            this.weatherAttributeBox.TabIndex = 38;
            this.weatherAttributeBox.Tag = "天气属性";
            this.weatherAttributeBox.Text = "天气属性";
            this.weatherAttributeBox.TextColor = System.Drawing.Color.Black;
            this.weatherAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // weatherEditor1
            // 
            this.weatherEditor1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.weatherEditor1.BackColor = System.Drawing.Color.Transparent;
            this.weatherEditor1.Location = new System.Drawing.Point(2, 17);
            this.weatherEditor1.Name = "weatherEditor1";
            this.weatherEditor1.Size = new System.Drawing.Size(64, 3);
            this.weatherEditor1.TabIndex = 0;
            // 
            // lunarAttributeBox
            // 
            this.lunarAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.lunarAttributeBox.Controls.Add(this.lunarEditor1);
            this.lunarAttributeBox.Location = new System.Drawing.Point(23, 446);
            this.lunarAttributeBox.Name = "lunarAttributeBox";
            this.lunarAttributeBox.Size = new System.Drawing.Size(67, 18);
            this.lunarAttributeBox.TabIndex = 37;
            this.lunarAttributeBox.Tag = "农历属性";
            this.lunarAttributeBox.Text = "农历属性";
            this.lunarAttributeBox.TextColor = System.Drawing.Color.Black;
            this.lunarAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            // 
            // lunarEditor1
            // 
            this.lunarEditor1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.lunarEditor1.BackColor = System.Drawing.Color.Transparent;
            this.lunarEditor1.Location = new System.Drawing.Point(11, 22);
            this.lunarEditor1.Name = "lunarEditor1";
            this.lunarEditor1.Size = new System.Drawing.Size(0, 2);
            this.lunarEditor1.TabIndex = 0;
            // 
            // textAttributeBox
            // 
            this.textAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.textAttributeBox.Controls.Add(this.textEditor1);
            this.textAttributeBox.Location = new System.Drawing.Point(21, 418);
            this.textAttributeBox.Name = "textAttributeBox";
            this.textAttributeBox.Size = new System.Drawing.Size(69, 19);
            this.textAttributeBox.TabIndex = 32;
            this.textAttributeBox.Tag = "字幕属性";
            this.textAttributeBox.Text = "字幕属性";
            this.textAttributeBox.TextColor = System.Drawing.Color.Black;
            this.textAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // textEditor1
            // 
            this.textEditor1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.textEditor1.BackColor = System.Drawing.Color.Transparent;
            this.textEditor1.Location = new System.Drawing.Point(10, 18);
            this.textEditor1.Name = "textEditor1";
            this.textEditor1.Size = new System.Drawing.Size(56, 0);
            this.textEditor1.TabIndex = 0;
            // 
            // marqueeAttributeBox
            // 
            this.marqueeAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.marqueeAttributeBox.Controls.Add(this.marqueeEdit);
            this.marqueeAttributeBox.Controls.Add(this.marqueePublicText);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConExcel);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConentDown);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConentUp);
            this.marqueeAttributeBox.Controls.Add(this.marqueDeleteButton);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConRichText);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConText);
            this.marqueeAttributeBox.Controls.Add(this.marqueeContentListBox);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConNoise);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConHumidity);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConTemperature);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConLunar);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConGrid);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConCounter);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConWord);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConDial);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConFlash);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConClock);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConPicture);
            this.marqueeAttributeBox.Controls.Add(this.marqueeConGif);
            this.marqueeAttributeBox.Location = new System.Drawing.Point(103, 447);
            this.marqueeAttributeBox.Name = "marqueeAttributeBox";
            this.marqueeAttributeBox.Size = new System.Drawing.Size(72, 17);
            this.marqueeAttributeBox.TabIndex = 28;
            this.marqueeAttributeBox.Tag = "图文属性";
            this.marqueeAttributeBox.Text = "图文属性";
            this.marqueeAttributeBox.TextColor = System.Drawing.Color.Black;
            this.marqueeAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // marqueeEdit
            // 
            this.marqueeEdit.Font = new System.Drawing.Font("宋体", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.marqueeEdit.Location = new System.Drawing.Point(160, 160);
            this.marqueeEdit.Name = "marqueeEdit";
            this.marqueeEdit.Size = new System.Drawing.Size(88, 23);
            this.marqueeEdit.TabIndex = 24;
            this.marqueeEdit.Text = "编辑";
            this.marqueeEdit.UseVisualStyleBackColor = true;
            this.marqueeEdit.Click += new System.EventHandler(this.marqueeEdit_Click);
            // 
            // marqueePublicText
            // 
            this.marqueePublicText.Location = new System.Drawing.Point(344, 21);
            this.marqueePublicText.Name = "marqueePublicText";
            this.marqueePublicText.Size = new System.Drawing.Size(89, 23);
            this.marqueePublicText.TabIndex = 23;
            this.marqueePublicText.Text = "公共文本";
            this.marqueePublicText.UseVisualStyleBackColor = true;
            this.marqueePublicText.Click += new System.EventHandler(this.marqueePublicText_Click);
            // 
            // marqueeConExcel
            // 
            this.marqueeConExcel.Location = new System.Drawing.Point(252, 125);
            this.marqueeConExcel.Name = "marqueeConExcel";
            this.marqueeConExcel.Size = new System.Drawing.Size(88, 23);
            this.marqueeConExcel.TabIndex = 22;
            this.marqueeConExcel.Text = "导入Excel";
            this.marqueeConExcel.UseVisualStyleBackColor = true;
            this.marqueeConExcel.Click += new System.EventHandler(this.marqueeConExcel_Click);
            // 
            // marqueeConentDown
            // 
            this.marqueeConentDown.Location = new System.Drawing.Point(389, 160);
            this.marqueeConentDown.Name = "marqueeConentDown";
            this.marqueeConentDown.Size = new System.Drawing.Size(44, 23);
            this.marqueeConentDown.TabIndex = 21;
            this.marqueeConentDown.Text = "↓";
            this.marqueeConentDown.UseVisualStyleBackColor = true;
            this.marqueeConentDown.Click += new System.EventHandler(this.marqueeConentDown_Click);
            // 
            // marqueeConentUp
            // 
            this.marqueeConentUp.Location = new System.Drawing.Point(344, 160);
            this.marqueeConentUp.Name = "marqueeConentUp";
            this.marqueeConentUp.Size = new System.Drawing.Size(44, 23);
            this.marqueeConentUp.TabIndex = 20;
            this.marqueeConentUp.Text = "↑";
            this.marqueeConentUp.UseVisualStyleBackColor = true;
            this.marqueeConentUp.Click += new System.EventHandler(this.marqueeConentUp_Click);
            // 
            // marqueDeleteButton
            // 
            this.marqueDeleteButton.Location = new System.Drawing.Point(252, 160);
            this.marqueDeleteButton.Name = "marqueDeleteButton";
            this.marqueDeleteButton.Size = new System.Drawing.Size(88, 23);
            this.marqueDeleteButton.TabIndex = 19;
            this.marqueDeleteButton.Text = "删除";
            this.marqueDeleteButton.UseVisualStyleBackColor = true;
            this.marqueDeleteButton.Click += new System.EventHandler(this.marqueDeleteButton_Click);
            // 
            // marqueeConRichText
            // 
            this.marqueeConRichText.Font = new System.Drawing.Font("宋体", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.marqueeConRichText.Location = new System.Drawing.Point(252, 21);
            this.marqueeConRichText.Name = "marqueeConRichText";
            this.marqueeConRichText.Size = new System.Drawing.Size(88, 23);
            this.marqueeConRichText.TabIndex = 18;
            this.marqueeConRichText.Text = "多行文本";
            this.marqueeConRichText.UseVisualStyleBackColor = true;
            this.marqueeConRichText.Click += new System.EventHandler(this.marqueeConRichText_Click);
            // 
            // marqueeConText
            // 
            this.marqueeConText.Location = new System.Drawing.Point(160, 21);
            this.marqueeConText.Name = "marqueeConText";
            this.marqueeConText.Size = new System.Drawing.Size(88, 23);
            this.marqueeConText.TabIndex = 3;
            this.marqueeConText.Text = "单行文本";
            this.marqueeConText.UseVisualStyleBackColor = true;
            this.marqueeConText.Click += new System.EventHandler(this.marqueeConText_Click);
            // 
            // marqueeContentListBox
            // 
            this.marqueeContentListBox.ContextMenuStrip = this.contextMenuStrip1_Marquee;
            this.marqueeContentListBox.FormattingEnabled = true;
            this.marqueeContentListBox.ItemHeight = 12;
            this.marqueeContentListBox.Location = new System.Drawing.Point(9, 22);
            this.marqueeContentListBox.Name = "marqueeContentListBox";
            this.marqueeContentListBox.Size = new System.Drawing.Size(148, 160);
            this.marqueeContentListBox.TabIndex = 0;
            this.marqueeContentListBox.SelectedIndexChanged += new System.EventHandler(this.marqueeContentListBox_SelectedIndexChanged);
            this.marqueeContentListBox.DoubleClick += new System.EventHandler(this.marqueeContentListBox_DoubleClick);
            // 
            // marqueeConNoise
            // 
            this.marqueeConNoise.Location = new System.Drawing.Point(465, 62);
            this.marqueeConNoise.Name = "marqueeConNoise";
            this.marqueeConNoise.Size = new System.Drawing.Size(59, 23);
            this.marqueeConNoise.TabIndex = 16;
            this.marqueeConNoise.Text = "噪音";
            this.marqueeConNoise.UseVisualStyleBackColor = true;
            this.marqueeConNoise.Visible = false;
            // 
            // marqueeConHumidity
            // 
            this.marqueeConHumidity.Location = new System.Drawing.Point(467, 8);
            this.marqueeConHumidity.Name = "marqueeConHumidity";
            this.marqueeConHumidity.Size = new System.Drawing.Size(59, 23);
            this.marqueeConHumidity.TabIndex = 15;
            this.marqueeConHumidity.Text = "湿度";
            this.marqueeConHumidity.UseVisualStyleBackColor = true;
            this.marqueeConHumidity.Visible = false;
            // 
            // marqueeConTemperature
            // 
            this.marqueeConTemperature.Location = new System.Drawing.Point(530, 35);
            this.marqueeConTemperature.Name = "marqueeConTemperature";
            this.marqueeConTemperature.Size = new System.Drawing.Size(59, 23);
            this.marqueeConTemperature.TabIndex = 14;
            this.marqueeConTemperature.Text = "温度";
            this.marqueeConTemperature.UseVisualStyleBackColor = true;
            this.marqueeConTemperature.Visible = false;
            // 
            // marqueeConLunar
            // 
            this.marqueeConLunar.Location = new System.Drawing.Point(465, 35);
            this.marqueeConLunar.Name = "marqueeConLunar";
            this.marqueeConLunar.Size = new System.Drawing.Size(59, 23);
            this.marqueeConLunar.TabIndex = 13;
            this.marqueeConLunar.Text = "农历";
            this.marqueeConLunar.UseVisualStyleBackColor = true;
            this.marqueeConLunar.Visible = false;
            // 
            // marqueeConGrid
            // 
            this.marqueeConGrid.Location = new System.Drawing.Point(252, 55);
            this.marqueeConGrid.Name = "marqueeConGrid";
            this.marqueeConGrid.Size = new System.Drawing.Size(88, 23);
            this.marqueeConGrid.TabIndex = 5;
            this.marqueeConGrid.Text = "表格";
            this.marqueeConGrid.UseVisualStyleBackColor = true;
            this.marqueeConGrid.Click += new System.EventHandler(this.marqueeConGrid_Click);
            // 
            // marqueeConCounter
            // 
            this.marqueeConCounter.Location = new System.Drawing.Point(530, 62);
            this.marqueeConCounter.Name = "marqueeConCounter";
            this.marqueeConCounter.Size = new System.Drawing.Size(59, 23);
            this.marqueeConCounter.TabIndex = 12;
            this.marqueeConCounter.Text = "计时";
            this.marqueeConCounter.UseVisualStyleBackColor = true;
            this.marqueeConCounter.Visible = false;
            // 
            // marqueeConWord
            // 
            this.marqueeConWord.Location = new System.Drawing.Point(160, 125);
            this.marqueeConWord.Name = "marqueeConWord";
            this.marqueeConWord.Size = new System.Drawing.Size(88, 23);
            this.marqueeConWord.TabIndex = 6;
            this.marqueeConWord.Text = "导入Word";
            this.marqueeConWord.UseVisualStyleBackColor = true;
            this.marqueeConWord.Click += new System.EventHandler(this.marqueeConWord_Click);
            // 
            // marqueeConDial
            // 
            this.marqueeConDial.Location = new System.Drawing.Point(464, 91);
            this.marqueeConDial.Name = "marqueeConDial";
            this.marqueeConDial.Size = new System.Drawing.Size(59, 23);
            this.marqueeConDial.TabIndex = 11;
            this.marqueeConDial.Text = "表盘";
            this.marqueeConDial.UseVisualStyleBackColor = true;
            this.marqueeConDial.Visible = false;
            // 
            // marqueeConFlash
            // 
            this.marqueeConFlash.Location = new System.Drawing.Point(160, 55);
            this.marqueeConFlash.Name = "marqueeConFlash";
            this.marqueeConFlash.Size = new System.Drawing.Size(88, 23);
            this.marqueeConFlash.TabIndex = 7;
            this.marqueeConFlash.Text = "动画";
            this.marqueeConFlash.UseVisualStyleBackColor = true;
            this.marqueeConFlash.Click += new System.EventHandler(this.marqueeConFlash_Click);
            // 
            // marqueeConClock
            // 
            this.marqueeConClock.Location = new System.Drawing.Point(530, 9);
            this.marqueeConClock.Name = "marqueeConClock";
            this.marqueeConClock.Size = new System.Drawing.Size(59, 23);
            this.marqueeConClock.TabIndex = 10;
            this.marqueeConClock.Text = "时钟";
            this.marqueeConClock.UseVisualStyleBackColor = true;
            this.marqueeConClock.Visible = false;
            // 
            // marqueeConPicture
            // 
            this.marqueeConPicture.Location = new System.Drawing.Point(252, 90);
            this.marqueeConPicture.Name = "marqueeConPicture";
            this.marqueeConPicture.Size = new System.Drawing.Size(88, 23);
            this.marqueeConPicture.TabIndex = 8;
            this.marqueeConPicture.Text = "导入图片";
            this.marqueeConPicture.UseVisualStyleBackColor = true;
            this.marqueeConPicture.Click += new System.EventHandler(this.marqueeConPicture_Click);
            // 
            // marqueeConGif
            // 
            this.marqueeConGif.Location = new System.Drawing.Point(160, 90);
            this.marqueeConGif.Name = "marqueeConGif";
            this.marqueeConGif.Size = new System.Drawing.Size(88, 23);
            this.marqueeConGif.TabIndex = 4;
            this.marqueeConGif.Text = "导入动画";
            this.marqueeConGif.UseVisualStyleBackColor = true;
            this.marqueeConGif.Click += new System.EventHandler(this.marqueeConGif_Click);
            // 
            // itemEdgeSettingGroupBox
            // 
            this.itemEdgeSettingGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.itemEdgeSettingGroupBox.Controls.Add(this.itemEdgeSpeed);
            this.itemEdgeSettingGroupBox.Controls.Add(this.itemEdgeList);
            this.itemEdgeSettingGroupBox.Controls.Add(this.itemEdgeMode);
            this.itemEdgeSettingGroupBox.Controls.Add(this.itemEdgeSpeedLabel);
            this.itemEdgeSettingGroupBox.Controls.Add(this.itemUseEdge);
            this.itemEdgeSettingGroupBox.Controls.Add(this.itemEdgeModeLabel);
            this.itemEdgeSettingGroupBox.Controls.Add(this.itemEdgeListLabel);
            this.itemEdgeSettingGroupBox.Location = new System.Drawing.Point(790, 393);
            this.itemEdgeSettingGroupBox.Name = "itemEdgeSettingGroupBox";
            this.itemEdgeSettingGroupBox.Size = new System.Drawing.Size(85, 20);
            this.itemEdgeSettingGroupBox.TabIndex = 22;
            this.itemEdgeSettingGroupBox.Tag = "节目跑边设置";
            this.itemEdgeSettingGroupBox.Text = "跑边设置";
            this.itemEdgeSettingGroupBox.TextColor = System.Drawing.Color.Black;
            this.itemEdgeSettingGroupBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // itemEdgeSpeed
            // 
            this.itemEdgeSpeed.FormattingEnabled = true;
            this.itemEdgeSpeed.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30"});
            this.itemEdgeSpeed.Location = new System.Drawing.Point(38, 126);
            this.itemEdgeSpeed.Name = "itemEdgeSpeed";
            this.itemEdgeSpeed.Size = new System.Drawing.Size(90, 20);
            this.itemEdgeSpeed.TabIndex = 5;
            this.itemEdgeSpeed.SelectedIndexChanged += new System.EventHandler(this.itemEdgeSpeed_SelectedIndexChanged);
            // 
            // itemEdgeList
            // 
            this.itemEdgeList.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.itemEdgeList.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.itemEdgeList.FormattingEnabled = true;
            this.itemEdgeList.Location = new System.Drawing.Point(38, 56);
            this.itemEdgeList.Name = "itemEdgeList";
            this.itemEdgeList.Size = new System.Drawing.Size(90, 22);
            this.itemEdgeList.TabIndex = 0;
            this.itemEdgeList.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.edgeListComboBox_DrawItem);
            this.itemEdgeList.SelectedIndexChanged += new System.EventHandler(this.itemEdgeList_SelectedIndexChanged);
            // 
            // itemEdgeMode
            // 
            this.itemEdgeMode.FormattingEnabled = true;
            this.itemEdgeMode.Items.AddRange(new object[] {
            "静止",
            "顺时针",
            "逆时针",
            "闪烁"});
            this.itemEdgeMode.Location = new System.Drawing.Point(38, 93);
            this.itemEdgeMode.Name = "itemEdgeMode";
            this.itemEdgeMode.Size = new System.Drawing.Size(90, 20);
            this.itemEdgeMode.TabIndex = 3;
            this.itemEdgeMode.SelectedIndexChanged += new System.EventHandler(this.itemEdgeMode_SelectedIndexChanged);
            // 
            // itemEdgeSpeedLabel
            // 
            this.itemEdgeSpeedLabel.AutoSize = true;
            this.itemEdgeSpeedLabel.Font = new System.Drawing.Font("宋体", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.itemEdgeSpeedLabel.Location = new System.Drawing.Point(3, 129);
            this.itemEdgeSpeedLabel.Name = "itemEdgeSpeedLabel";
            this.itemEdgeSpeedLabel.Size = new System.Drawing.Size(29, 12);
            this.itemEdgeSpeedLabel.TabIndex = 6;
            this.itemEdgeSpeedLabel.Text = "速度";
            // 
            // itemUseEdge
            // 
            this.itemUseEdge.AutoSize = true;
            this.itemUseEdge.Font = new System.Drawing.Font("宋体", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.itemUseEdge.Location = new System.Drawing.Point(9, 32);
            this.itemUseEdge.Name = "itemUseEdge";
            this.itemUseEdge.Size = new System.Drawing.Size(72, 16);
            this.itemUseEdge.TabIndex = 2;
            this.itemUseEdge.Text = "使用跑边";
            this.itemUseEdge.UseVisualStyleBackColor = true;
            this.itemUseEdge.CheckedChanged += new System.EventHandler(this.itemUseEdge_CheckedChanged);
            // 
            // itemEdgeModeLabel
            // 
            this.itemEdgeModeLabel.AutoSize = true;
            this.itemEdgeModeLabel.Font = new System.Drawing.Font("宋体", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.itemEdgeModeLabel.Location = new System.Drawing.Point(3, 96);
            this.itemEdgeModeLabel.Name = "itemEdgeModeLabel";
            this.itemEdgeModeLabel.Size = new System.Drawing.Size(29, 12);
            this.itemEdgeModeLabel.TabIndex = 4;
            this.itemEdgeModeLabel.Text = "模式";
            // 
            // itemEdgeListLabel
            // 
            this.itemEdgeListLabel.AutoSize = true;
            this.itemEdgeListLabel.Font = new System.Drawing.Font("宋体", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.itemEdgeListLabel.Location = new System.Drawing.Point(3, 59);
            this.itemEdgeListLabel.Name = "itemEdgeListLabel";
            this.itemEdgeListLabel.Size = new System.Drawing.Size(29, 12);
            this.itemEdgeListLabel.TabIndex = 1;
            this.itemEdgeListLabel.Text = "跑边";
            // 
            // zhGroupBox_PanelAttribute
            // 
            this.zhGroupBox_PanelAttribute.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.zhGroupBox_PanelAttribute.Controls.Add(this.groupBox11);
            this.zhGroupBox_PanelAttribute.Controls.Add(this.groupBox1);
            this.zhGroupBox_PanelAttribute.Location = new System.Drawing.Point(105, 418);
            this.zhGroupBox_PanelAttribute.Name = "zhGroupBox_PanelAttribute";
            this.zhGroupBox_PanelAttribute.Size = new System.Drawing.Size(70, 19);
            this.zhGroupBox_PanelAttribute.TabIndex = 18;
            this.zhGroupBox_PanelAttribute.Tag = "屏幕属性";
            this.zhGroupBox_PanelAttribute.TextColor = System.Drawing.Color.Black;
            this.zhGroupBox_PanelAttribute.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // groupBox11
            // 
            this.groupBox11.Controls.Add(this.panelItemsDownbutton);
            this.groupBox11.Controls.Add(this.panelItemsUpbutton);
            this.groupBox11.Controls.Add(this.panelItemslistBox);
            this.groupBox11.Location = new System.Drawing.Point(717, 10);
            this.groupBox11.Name = "groupBox11";
            this.groupBox11.Size = new System.Drawing.Size(227, 179);
            this.groupBox11.TabIndex = 1;
            this.groupBox11.TabStop = false;
            this.groupBox11.Text = "节目列表";
            // 
            // panelItemsDownbutton
            // 
            this.panelItemsDownbutton.Location = new System.Drawing.Point(181, 106);
            this.panelItemsDownbutton.Name = "panelItemsDownbutton";
            this.panelItemsDownbutton.Size = new System.Drawing.Size(34, 70);
            this.panelItemsDownbutton.TabIndex = 4;
            this.panelItemsDownbutton.Text = "↓";
            this.panelItemsDownbutton.UseVisualStyleBackColor = true;
            this.panelItemsDownbutton.Click += new System.EventHandler(this.panelItemsDownbutton_Click);
            // 
            // panelItemsUpbutton
            // 
            this.panelItemsUpbutton.Location = new System.Drawing.Point(181, 14);
            this.panelItemsUpbutton.Name = "panelItemsUpbutton";
            this.panelItemsUpbutton.Size = new System.Drawing.Size(34, 70);
            this.panelItemsUpbutton.TabIndex = 3;
            this.panelItemsUpbutton.Text = "↑";
            this.panelItemsUpbutton.UseVisualStyleBackColor = true;
            this.panelItemsUpbutton.Click += new System.EventHandler(this.panelItemsUpbutton_Click);
            // 
            // panelItemslistBox
            // 
            this.panelItemslistBox.FormattingEnabled = true;
            this.panelItemslistBox.ItemHeight = 12;
            this.panelItemslistBox.Location = new System.Drawing.Point(6, 15);
            this.panelItemslistBox.Name = "panelItemslistBox";
            this.panelItemslistBox.Size = new System.Drawing.Size(174, 160);
            this.panelItemslistBox.TabIndex = 0;
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.panelDeviceIDLabel);
            this.groupBox1.Controls.Add(this.label6);
            this.groupBox1.Controls.Add(this.panelNamelabel);
            this.groupBox1.Controls.Add(this.panelItemNumlabel);
            this.groupBox1.Controls.Add(this.label10);
            this.groupBox1.Controls.Add(this.panelModelInfolabel);
            this.groupBox1.Controls.Add(this.label7);
            this.groupBox1.Controls.Add(this.panelCommInfolabel);
            this.groupBox1.Controls.Add(this.label5);
            this.groupBox1.Controls.Add(this.panelPanelSizelabel);
            this.groupBox1.Controls.Add(this.label2);
            this.groupBox1.Controls.Add(this.label1);
            this.groupBox1.Location = new System.Drawing.Point(9, 10);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(698, 179);
            this.groupBox1.TabIndex = 0;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "屏幕属性";
            // 
            // panelDeviceIDLabel
            // 
            this.panelDeviceIDLabel.Location = new System.Drawing.Point(383, 18);
            this.panelDeviceIDLabel.Name = "panelDeviceIDLabel";
            this.panelDeviceIDLabel.Size = new System.Drawing.Size(155, 23);
            this.panelDeviceIDLabel.TabIndex = 12;
            this.panelDeviceIDLabel.Text = "--";
            // 
            // label6
            // 
            this.label6.Location = new System.Drawing.Point(277, 19);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(100, 23);
            this.label6.TabIndex = 11;
            this.label6.Text = "设备ID";
            // 
            // panelNamelabel
            // 
            this.panelNamelabel.Location = new System.Drawing.Point(112, 20);
            this.panelNamelabel.Name = "panelNamelabel";
            this.panelNamelabel.Size = new System.Drawing.Size(155, 23);
            this.panelNamelabel.TabIndex = 10;
            this.panelNamelabel.Text = "--";
            // 
            // panelItemNumlabel
            // 
            this.panelItemNumlabel.Location = new System.Drawing.Point(112, 145);
            this.panelItemNumlabel.Name = "panelItemNumlabel";
            this.panelItemNumlabel.Size = new System.Drawing.Size(155, 23);
            this.panelItemNumlabel.TabIndex = 9;
            this.panelItemNumlabel.Text = "--";
            // 
            // label10
            // 
            this.label10.Location = new System.Drawing.Point(6, 145);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(100, 23);
            this.label10.TabIndex = 8;
            this.label10.Text = "节目总数";
            // 
            // panelModelInfolabel
            // 
            this.panelModelInfolabel.Location = new System.Drawing.Point(112, 116);
            this.panelModelInfolabel.Name = "panelModelInfolabel";
            this.panelModelInfolabel.Size = new System.Drawing.Size(155, 23);
            this.panelModelInfolabel.TabIndex = 7;
            this.panelModelInfolabel.Text = "--";
            // 
            // label7
            // 
            this.label7.Location = new System.Drawing.Point(6, 116);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(100, 23);
            this.label7.TabIndex = 6;
            this.label7.Text = "卡信息";
            // 
            // panelCommInfolabel
            // 
            this.panelCommInfolabel.Location = new System.Drawing.Point(112, 81);
            this.panelCommInfolabel.Name = "panelCommInfolabel";
            this.panelCommInfolabel.Size = new System.Drawing.Size(555, 46);
            this.panelCommInfolabel.TabIndex = 5;
            this.panelCommInfolabel.Text = "--";
            // 
            // label5
            // 
            this.label5.Location = new System.Drawing.Point(6, 81);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(100, 23);
            this.label5.TabIndex = 4;
            this.label5.Text = "通讯方式";
            // 
            // panelPanelSizelabel
            // 
            this.panelPanelSizelabel.Location = new System.Drawing.Point(112, 52);
            this.panelPanelSizelabel.Name = "panelPanelSizelabel";
            this.panelPanelSizelabel.Size = new System.Drawing.Size(155, 23);
            this.panelPanelSizelabel.TabIndex = 3;
            this.panelPanelSizelabel.Text = "--";
            // 
            // label2
            // 
            this.label2.Location = new System.Drawing.Point(6, 52);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(100, 23);
            this.label2.TabIndex = 2;
            this.label2.Text = "屏幕尺寸";
            // 
            // label1
            // 
            this.label1.Location = new System.Drawing.Point(6, 21);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(100, 23);
            this.label1.TabIndex = 0;
            this.label1.Text = "屏幕描述";
            // 
            // AnimationEffectSettingzhGroupBox
            // 
            this.AnimationEffectSettingzhGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.AnimationEffectSettingzhGroupBox.Controls.Add(this.animationEffect1);
            this.AnimationEffectSettingzhGroupBox.Location = new System.Drawing.Point(881, 445);
            this.AnimationEffectSettingzhGroupBox.Name = "AnimationEffectSettingzhGroupBox";
            this.AnimationEffectSettingzhGroupBox.Size = new System.Drawing.Size(92, 19);
            this.AnimationEffectSettingzhGroupBox.TabIndex = 35;
            this.AnimationEffectSettingzhGroupBox.Tag = "动画特效设置";
            this.AnimationEffectSettingzhGroupBox.Text = "动画特效设置";
            this.AnimationEffectSettingzhGroupBox.TextColor = System.Drawing.Color.Black;
            this.AnimationEffectSettingzhGroupBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.AnimationEffectSettingzhGroupBox.Visible = false;
            // 
            // animationEffect1
            // 
            this.animationEffect1.Location = new System.Drawing.Point(5, 19);
            this.animationEffect1.Name = "animationEffect1";
            this.animationEffect1.Size = new System.Drawing.Size(122, 180);
            this.animationEffect1.TabIndex = 0;
            // 
            // clockAttributeBox
            // 
            this.clockAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.clockAttributeBox.Controls.Add(this.clockNewContentTextBox);
            this.clockAttributeBox.Controls.Add(this.clockNewTimeIsShowCheckBox);
            this.clockAttributeBox.Controls.Add(this.clockNewWeekIsShowCheckBox);
            this.clockAttributeBox.Controls.Add(this.clockNewContentIsShowCheckBox);
            this.clockAttributeBox.Controls.Add(this.clockNewDateIsShowCheckBox);
            this.clockAttributeBox.Controls.Add(this.clockNewUnderlineButton);
            this.clockAttributeBox.Controls.Add(this.clockNewItalicButton);
            this.clockAttributeBox.Controls.Add(this.clockNewTextLable);
            this.clockAttributeBox.Controls.Add(this.clockNewFontFamilyLable);
            this.clockAttributeBox.Controls.Add(this.clockNewBoldButton);
            this.clockAttributeBox.Controls.Add(this.clockNewLineModel);
            this.clockAttributeBox.Controls.Add(this.clockNewFontSize);
            this.clockAttributeBox.Controls.Add(this.clockNewSizeLable);
            this.clockAttributeBox.Controls.Add(this.clockNewFontFamily);
            this.clockAttributeBox.Controls.Add(this.clockNewTimeColorComboBox);
            this.clockAttributeBox.Controls.Add(this.clockNewTimeStyleComboBox);
            this.clockAttributeBox.Controls.Add(this.clockNewWeekColorComboBox);
            this.clockAttributeBox.Controls.Add(this.clockNewWeekStyleComboBox);
            this.clockAttributeBox.Controls.Add(this.clockNewContentColorComboBox);
            this.clockAttributeBox.Controls.Add(this.clockNewDateColorComboBox);
            this.clockAttributeBox.Controls.Add(this.clockNewDateStyleComboBox);
            this.clockAttributeBox.Location = new System.Drawing.Point(105, 338);
            this.clockAttributeBox.Name = "clockAttributeBox";
            this.clockAttributeBox.Size = new System.Drawing.Size(70, 19);
            this.clockAttributeBox.TabIndex = 28;
            this.clockAttributeBox.Tag = "时间属性";
            this.clockAttributeBox.Text = "时间属性";
            this.clockAttributeBox.TextColor = System.Drawing.Color.Black;
            this.clockAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // clockNewContentTextBox
            // 
            this.clockNewContentTextBox.Location = new System.Drawing.Point(46, 44);
            this.clockNewContentTextBox.Name = "clockNewContentTextBox";
            this.clockNewContentTextBox.Size = new System.Drawing.Size(323, 21);
            this.clockNewContentTextBox.TabIndex = 50;
            this.clockNewContentTextBox.TextChanged += new System.EventHandler(this.clockNewContentTextBox_TextChanged);
            // 
            // clockNewTimeIsShowCheckBox
            // 
            this.clockNewTimeIsShowCheckBox.AutoSize = true;
            this.clockNewTimeIsShowCheckBox.ForeColor = System.Drawing.Color.White;
            this.clockNewTimeIsShowCheckBox.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewTimeIsShowCheckBox.Location = new System.Drawing.Point(234, 121);
            this.clockNewTimeIsShowCheckBox.Name = "clockNewTimeIsShowCheckBox";
            this.clockNewTimeIsShowCheckBox.Size = new System.Drawing.Size(15, 14);
            this.clockNewTimeIsShowCheckBox.TabIndex = 47;
            this.clockNewTimeIsShowCheckBox.UseVisualStyleBackColor = true;
            this.clockNewTimeIsShowCheckBox.CheckedChanged += new System.EventHandler(this.clockNewTimeIsShowCheckBox_CheckedChanged);
            // 
            // clockNewWeekIsShowCheckBox
            // 
            this.clockNewWeekIsShowCheckBox.AutoSize = true;
            this.clockNewWeekIsShowCheckBox.ForeColor = System.Drawing.Color.White;
            this.clockNewWeekIsShowCheckBox.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewWeekIsShowCheckBox.Location = new System.Drawing.Point(234, 96);
            this.clockNewWeekIsShowCheckBox.Name = "clockNewWeekIsShowCheckBox";
            this.clockNewWeekIsShowCheckBox.Size = new System.Drawing.Size(15, 14);
            this.clockNewWeekIsShowCheckBox.TabIndex = 46;
            this.clockNewWeekIsShowCheckBox.UseVisualStyleBackColor = true;
            this.clockNewWeekIsShowCheckBox.CheckedChanged += new System.EventHandler(this.clockNewWeekIsShowCheckBox_CheckedChanged);
            // 
            // clockNewContentIsShowCheckBox
            // 
            this.clockNewContentIsShowCheckBox.AutoSize = true;
            this.clockNewContentIsShowCheckBox.ForeColor = System.Drawing.Color.White;
            this.clockNewContentIsShowCheckBox.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewContentIsShowCheckBox.Location = new System.Drawing.Point(432, 47);
            this.clockNewContentIsShowCheckBox.Name = "clockNewContentIsShowCheckBox";
            this.clockNewContentIsShowCheckBox.Size = new System.Drawing.Size(15, 14);
            this.clockNewContentIsShowCheckBox.TabIndex = 49;
            this.clockNewContentIsShowCheckBox.UseVisualStyleBackColor = true;
            this.clockNewContentIsShowCheckBox.CheckedChanged += new System.EventHandler(this.clockNewContentIsShowCheckBox_CheckedChanged);
            // 
            // clockNewDateIsShowCheckBox
            // 
            this.clockNewDateIsShowCheckBox.AutoSize = true;
            this.clockNewDateIsShowCheckBox.ForeColor = System.Drawing.Color.White;
            this.clockNewDateIsShowCheckBox.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewDateIsShowCheckBox.Location = new System.Drawing.Point(234, 72);
            this.clockNewDateIsShowCheckBox.Name = "clockNewDateIsShowCheckBox";
            this.clockNewDateIsShowCheckBox.Size = new System.Drawing.Size(15, 14);
            this.clockNewDateIsShowCheckBox.TabIndex = 48;
            this.clockNewDateIsShowCheckBox.UseVisualStyleBackColor = true;
            this.clockNewDateIsShowCheckBox.CheckedChanged += new System.EventHandler(this.clockNewDateIsShowCheckBox_CheckedChanged);
            // 
            // clockNewUnderlineButton
            // 
            this.clockNewUnderlineButton.BackColor = System.Drawing.Color.White;
            this.clockNewUnderlineButton.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewUnderlineButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.5F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Underline))));
            this.clockNewUnderlineButton.ForeColor = System.Drawing.Color.Black;
            this.clockNewUnderlineButton.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewUnderlineButton.Location = new System.Drawing.Point(277, 19);
            this.clockNewUnderlineButton.Name = "clockNewUnderlineButton";
            this.clockNewUnderlineButton.Size = new System.Drawing.Size(21, 21);
            this.clockNewUnderlineButton.TabIndex = 43;
            this.clockNewUnderlineButton.Text = "U";
            this.clockNewUnderlineButton.UseVisualStyleBackColor = false;
            this.clockNewUnderlineButton.Click += new System.EventHandler(this.clockNewUnderlineButton_Click);
            // 
            // clockNewItalicButton
            // 
            this.clockNewItalicButton.BackColor = System.Drawing.Color.White;
            this.clockNewItalicButton.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewItalicButton.Font = new System.Drawing.Font("宋体", 10.5F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))));
            this.clockNewItalicButton.ForeColor = System.Drawing.Color.Black;
            this.clockNewItalicButton.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewItalicButton.Location = new System.Drawing.Point(256, 19);
            this.clockNewItalicButton.Name = "clockNewItalicButton";
            this.clockNewItalicButton.Size = new System.Drawing.Size(21, 21);
            this.clockNewItalicButton.TabIndex = 44;
            this.clockNewItalicButton.Text = "I";
            this.clockNewItalicButton.UseVisualStyleBackColor = false;
            this.clockNewItalicButton.Click += new System.EventHandler(this.clockNewItalicButton_Click);
            // 
            // clockNewTextLable
            // 
            this.clockNewTextLable.BackColor = System.Drawing.Color.Transparent;
            this.clockNewTextLable.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewTextLable.ForeColor = System.Drawing.Color.Black;
            this.clockNewTextLable.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewTextLable.Location = new System.Drawing.Point(7, 45);
            this.clockNewTextLable.Name = "clockNewTextLable";
            this.clockNewTextLable.Size = new System.Drawing.Size(37, 21);
            this.clockNewTextLable.TabIndex = 38;
            this.clockNewTextLable.Text = "文本";
            this.clockNewTextLable.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // clockNewFontFamilyLable
            // 
            this.clockNewFontFamilyLable.BackColor = System.Drawing.Color.Transparent;
            this.clockNewFontFamilyLable.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewFontFamilyLable.ForeColor = System.Drawing.Color.Black;
            this.clockNewFontFamilyLable.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewFontFamilyLable.Location = new System.Drawing.Point(11, 22);
            this.clockNewFontFamilyLable.Name = "clockNewFontFamilyLable";
            this.clockNewFontFamilyLable.Size = new System.Drawing.Size(30, 15);
            this.clockNewFontFamilyLable.TabIndex = 37;
            this.clockNewFontFamilyLable.Text = "字体";
            this.clockNewFontFamilyLable.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // clockNewBoldButton
            // 
            this.clockNewBoldButton.BackColor = System.Drawing.Color.White;
            this.clockNewBoldButton.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewBoldButton.FlatAppearance.BorderColor = System.Drawing.Color.White;
            this.clockNewBoldButton.Font = new System.Drawing.Font("宋体", 10.5F, System.Drawing.FontStyle.Bold);
            this.clockNewBoldButton.ForeColor = System.Drawing.SystemColors.ControlText;
            this.clockNewBoldButton.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewBoldButton.Location = new System.Drawing.Point(235, 19);
            this.clockNewBoldButton.Name = "clockNewBoldButton";
            this.clockNewBoldButton.Size = new System.Drawing.Size(21, 21);
            this.clockNewBoldButton.TabIndex = 45;
            this.clockNewBoldButton.Text = "B";
            this.clockNewBoldButton.UseVisualStyleBackColor = false;
            this.clockNewBoldButton.Click += new System.EventHandler(this.clockNewBoldButton_Click);
            // 
            // clockNewLineModel
            // 
            this.clockNewLineModel.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewLineModel.FormattingEnabled = true;
            this.clockNewLineModel.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewLineModel.Items.AddRange(new object[] {
            "单行显示",
            "多行显示",
            "文本/时间",
            "文本/(日期、周)/时",
            "文本/日期/(周、时)"});
            this.clockNewLineModel.Location = new System.Drawing.Point(314, 20);
            this.clockNewLineModel.MaxLength = 5;
            this.clockNewLineModel.Name = "clockNewLineModel";
            this.clockNewLineModel.Size = new System.Drawing.Size(120, 20);
            this.clockNewLineModel.TabIndex = 41;
            this.clockNewLineModel.SelectedIndexChanged += new System.EventHandler(this.clockNewLineModel_SelectedIndexChanged);
            // 
            // clockNewFontSize
            // 
            this.clockNewFontSize.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewFontSize.FormattingEnabled = true;
            this.clockNewFontSize.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewFontSize.Items.AddRange(new object[] {
            "8",
            "9",
            "10",
            "11",
            "12",
            "14",
            "16",
            "18",
            "20",
            "22",
            "24",
            "26",
            "28",
            "30",
            "32",
            "34",
            "36",
            "38",
            "40",
            "42",
            "45",
            "46",
            "48",
            "50",
            "52",
            "54",
            "56",
            "58",
            "60",
            "62",
            "64",
            "66",
            "68",
            "70",
            "72",
            "80",
            "90",
            "100",
            "110",
            "120",
            "130",
            "140",
            "150",
            "160",
            "170",
            "180",
            "190",
            "200"});
            this.clockNewFontSize.Location = new System.Drawing.Point(184, 20);
            this.clockNewFontSize.MaxLength = 5;
            this.clockNewFontSize.Name = "clockNewFontSize";
            this.clockNewFontSize.Size = new System.Drawing.Size(47, 20);
            this.clockNewFontSize.TabIndex = 40;
            this.clockNewFontSize.Text = "14";
            this.clockNewFontSize.SelectedIndexChanged += new System.EventHandler(this.clockNewFontSize_SelectedIndexChanged);
            // 
            // clockNewSizeLable
            // 
            this.clockNewSizeLable.BackColor = System.Drawing.Color.Transparent;
            this.clockNewSizeLable.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewSizeLable.ForeColor = System.Drawing.Color.Black;
            this.clockNewSizeLable.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.clockNewSizeLable.Location = new System.Drawing.Point(151, 23);
            this.clockNewSizeLable.Name = "clockNewSizeLable";
            this.clockNewSizeLable.Size = new System.Drawing.Size(35, 15);
            this.clockNewSizeLable.TabIndex = 39;
            this.clockNewSizeLable.Text = "字号";
            this.clockNewSizeLable.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // clockNewFontFamily
            // 
            this.clockNewFontFamily.Cursor = System.Windows.Forms.Cursors.Default;
            this.clockNewFontFamily.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.clockNewFontFamily.FormattingEnabled = true;
            this.clockNewFontFamily.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewFontFamily.Location = new System.Drawing.Point(46, 20);
            this.clockNewFontFamily.Name = "clockNewFontFamily";
            this.clockNewFontFamily.Size = new System.Drawing.Size(98, 20);
            this.clockNewFontFamily.TabIndex = 42;
            this.clockNewFontFamily.SelectedIndexChanged += new System.EventHandler(this.clockNewFontFamily_SelectedIndexChanged);
            // 
            // clockNewTimeColorComboBox
            // 
            this.clockNewTimeColorComboBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.clockNewTimeColorComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.clockNewTimeColorComboBox.FormattingEnabled = true;
            this.clockNewTimeColorComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewTimeColorComboBox.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.clockNewTimeColorComboBox.Location = new System.Drawing.Point(174, 117);
            this.clockNewTimeColorComboBox.Name = "clockNewTimeColorComboBox";
            this.clockNewTimeColorComboBox.Size = new System.Drawing.Size(51, 22);
            this.clockNewTimeColorComboBox.TabIndex = 32;
            this.clockNewTimeColorComboBox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.clockNewTimeColorComboBox.SelectedIndexChanged += new System.EventHandler(this.clockNewTimeColorComboBox_SelectedIndexChanged);
            // 
            // clockNewTimeStyleComboBox
            // 
            this.clockNewTimeStyleComboBox.FormattingEnabled = true;
            this.clockNewTimeStyleComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewTimeStyleComboBox.Items.AddRange(new object[] {
            "HH:MM",
            "HH:MM:SS",
            "HH时MM分SS 秒"});
            this.clockNewTimeStyleComboBox.Location = new System.Drawing.Point(9, 117);
            this.clockNewTimeStyleComboBox.Name = "clockNewTimeStyleComboBox";
            this.clockNewTimeStyleComboBox.Size = new System.Drawing.Size(159, 20);
            this.clockNewTimeStyleComboBox.TabIndex = 31;
            this.clockNewTimeStyleComboBox.Text = "HH:MM";
            this.clockNewTimeStyleComboBox.SelectedIndexChanged += new System.EventHandler(this.clockNewTimeStyleComboBox_SelectedIndexChanged);
            // 
            // clockNewWeekColorComboBox
            // 
            this.clockNewWeekColorComboBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.clockNewWeekColorComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.clockNewWeekColorComboBox.FormattingEnabled = true;
            this.clockNewWeekColorComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewWeekColorComboBox.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.clockNewWeekColorComboBox.Location = new System.Drawing.Point(174, 92);
            this.clockNewWeekColorComboBox.Name = "clockNewWeekColorComboBox";
            this.clockNewWeekColorComboBox.Size = new System.Drawing.Size(51, 22);
            this.clockNewWeekColorComboBox.TabIndex = 30;
            this.clockNewWeekColorComboBox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.clockNewWeekColorComboBox.SelectedIndexChanged += new System.EventHandler(this.clockNewWeekColorComboBox_SelectedIndexChanged);
            // 
            // clockNewWeekStyleComboBox
            // 
            this.clockNewWeekStyleComboBox.FormattingEnabled = true;
            this.clockNewWeekStyleComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewWeekStyleComboBox.Items.AddRange(new object[] {
            "星期一",
            "周一",
            "Monday",
            "MON"});
            this.clockNewWeekStyleComboBox.Location = new System.Drawing.Point(9, 93);
            this.clockNewWeekStyleComboBox.Name = "clockNewWeekStyleComboBox";
            this.clockNewWeekStyleComboBox.Size = new System.Drawing.Size(159, 20);
            this.clockNewWeekStyleComboBox.TabIndex = 33;
            this.clockNewWeekStyleComboBox.Text = "星期一";
            this.clockNewWeekStyleComboBox.SelectedIndexChanged += new System.EventHandler(this.clockNewWeekStyleComboBox_SelectedIndexChanged);
            // 
            // clockNewContentColorComboBox
            // 
            this.clockNewContentColorComboBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.clockNewContentColorComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.clockNewContentColorComboBox.FormattingEnabled = true;
            this.clockNewContentColorComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewContentColorComboBox.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.clockNewContentColorComboBox.Location = new System.Drawing.Point(375, 44);
            this.clockNewContentColorComboBox.Name = "clockNewContentColorComboBox";
            this.clockNewContentColorComboBox.Size = new System.Drawing.Size(51, 22);
            this.clockNewContentColorComboBox.TabIndex = 36;
            this.clockNewContentColorComboBox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.clockNewContentColorComboBox.SelectedIndexChanged += new System.EventHandler(this.clockNewContentColorComboBox_SelectedIndexChanged);
            // 
            // clockNewDateColorComboBox
            // 
            this.clockNewDateColorComboBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.clockNewDateColorComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.clockNewDateColorComboBox.FormattingEnabled = true;
            this.clockNewDateColorComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewDateColorComboBox.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.clockNewDateColorComboBox.Location = new System.Drawing.Point(174, 68);
            this.clockNewDateColorComboBox.Name = "clockNewDateColorComboBox";
            this.clockNewDateColorComboBox.Size = new System.Drawing.Size(51, 22);
            this.clockNewDateColorComboBox.TabIndex = 35;
            this.clockNewDateColorComboBox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.clockNewDateColorComboBox.SelectedIndexChanged += new System.EventHandler(this.clockNewDateColorComboBox_SelectedIndexChanged);
            // 
            // clockNewDateStyleComboBox
            // 
            this.clockNewDateStyleComboBox.DropDownHeight = 320;
            this.clockNewDateStyleComboBox.FormattingEnabled = true;
            this.clockNewDateStyleComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.clockNewDateStyleComboBox.IntegralHeight = false;
            this.clockNewDateStyleComboBox.Items.AddRange(new object[] {
            "YYYY年MM月DD日",
            "YY年MM月DD日",
            "YYYY/MM/DD"});
            this.clockNewDateStyleComboBox.Location = new System.Drawing.Point(9, 69);
            this.clockNewDateStyleComboBox.Name = "clockNewDateStyleComboBox";
            this.clockNewDateStyleComboBox.Size = new System.Drawing.Size(159, 20);
            this.clockNewDateStyleComboBox.TabIndex = 34;
            this.clockNewDateStyleComboBox.Text = "YYYY年MM月DD日";
            this.clockNewDateStyleComboBox.SelectedIndexChanged += new System.EventHandler(this.clockNewDateStyleComboBox_SelectedIndexChanged);
            // 
            // ItemAttribute
            // 
            this.ItemAttribute.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ItemAttribute.Controls.Add(this.itemByPeroidCheckBox);
            this.ItemAttribute.Controls.Add(this.label12);
            this.ItemAttribute.Controls.Add(this.itemClosedCheckBox);
            this.ItemAttribute.Controls.Add(this.label8);
            this.ItemAttribute.Controls.Add(this.itemLockedCheckBox);
            this.ItemAttribute.Controls.Add(this.itemNameTextBox);
            this.ItemAttribute.Controls.Add(this.itemSubareaNumLabel);
            this.ItemAttribute.Location = new System.Drawing.Point(21, 368);
            this.ItemAttribute.Name = "ItemAttribute";
            this.ItemAttribute.Size = new System.Drawing.Size(69, 16);
            this.ItemAttribute.TabIndex = 19;
            this.ItemAttribute.Tag = "节目属性";
            this.ItemAttribute.Text = "节目属性";
            this.ItemAttribute.TextColor = System.Drawing.Color.Black;
            this.ItemAttribute.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // itemByPeroidCheckBox
            // 
            this.itemByPeroidCheckBox.AutoSize = true;
            this.itemByPeroidCheckBox.Location = new System.Drawing.Point(23, 162);
            this.itemByPeroidCheckBox.Name = "itemByPeroidCheckBox";
            this.itemByPeroidCheckBox.Size = new System.Drawing.Size(72, 16);
            this.itemByPeroidCheckBox.TabIndex = 24;
            this.itemByPeroidCheckBox.Text = "定时播放";
            this.itemByPeroidCheckBox.UseVisualStyleBackColor = true;
            this.itemByPeroidCheckBox.CheckedChanged += new System.EventHandler(this.itemByPeroidCheckBox_CheckedChanged);
            // 
            // label12
            // 
            this.label12.Location = new System.Drawing.Point(9, 58);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(77, 32);
            this.label12.TabIndex = 12;
            this.label12.Text = "分区数量:";
            this.label12.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // itemClosedCheckBox
            // 
            this.itemClosedCheckBox.AutoSize = true;
            this.itemClosedCheckBox.Location = new System.Drawing.Point(23, 94);
            this.itemClosedCheckBox.Name = "itemClosedCheckBox";
            this.itemClosedCheckBox.Size = new System.Drawing.Size(72, 16);
            this.itemClosedCheckBox.TabIndex = 23;
            this.itemClosedCheckBox.Text = "关闭节目";
            this.itemClosedCheckBox.UseVisualStyleBackColor = true;
            this.itemClosedCheckBox.CheckedChanged += new System.EventHandler(this.itemClosedCheckBox_CheckedChanged);
            // 
            // label8
            // 
            this.label8.Location = new System.Drawing.Point(9, 23);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(77, 31);
            this.label8.TabIndex = 0;
            this.label8.Text = "节目名称:";
            this.label8.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // itemLockedCheckBox
            // 
            this.itemLockedCheckBox.AutoSize = true;
            this.itemLockedCheckBox.Location = new System.Drawing.Point(23, 130);
            this.itemLockedCheckBox.Name = "itemLockedCheckBox";
            this.itemLockedCheckBox.Size = new System.Drawing.Size(72, 16);
            this.itemLockedCheckBox.TabIndex = 22;
            this.itemLockedCheckBox.Text = "锁定节目";
            this.itemLockedCheckBox.UseVisualStyleBackColor = true;
            this.itemLockedCheckBox.CheckedChanged += new System.EventHandler(this.itemLockedCheckBox_CheckedChanged);
            // 
            // itemNameTextBox
            // 
            this.itemNameTextBox.Location = new System.Drawing.Point(92, 25);
            this.itemNameTextBox.Name = "itemNameTextBox";
            this.itemNameTextBox.Size = new System.Drawing.Size(100, 21);
            this.itemNameTextBox.TabIndex = 1;
            this.itemNameTextBox.TextChanged += new System.EventHandler(this.itemNameTextBox_TextChanged);
            // 
            // itemSubareaNumLabel
            // 
            this.itemSubareaNumLabel.Location = new System.Drawing.Point(92, 58);
            this.itemSubareaNumLabel.Name = "itemSubareaNumLabel";
            this.itemSubareaNumLabel.Size = new System.Drawing.Size(100, 34);
            this.itemSubareaNumLabel.TabIndex = 13;
            this.itemSubareaNumLabel.Text = "--";
            // 
            // itemByPeroidGroupBox
            // 
            this.itemByPeroidGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.itemByPeroidGroupBox.Controls.Add(this.label_Item_DateTo);
            this.itemByPeroidGroupBox.Controls.Add(this.itemPlayTimerByWeekRadioButton);
            this.itemByPeroidGroupBox.Controls.Add(this.itemTimerEndTime);
            this.itemByPeroidGroupBox.Controls.Add(this.itemTimerStartTime);
            this.itemByPeroidGroupBox.Controls.Add(this.itemPlayTimerByDatePanel);
            this.itemByPeroidGroupBox.Controls.Add(this.itemPlayTimerEverydayRadioButton);
            this.itemByPeroidGroupBox.Controls.Add(this.itemPlayTimerByDateRadioButton);
            this.itemByPeroidGroupBox.Controls.Add(this.itemPlayTimerByWeekPanel);
            this.itemByPeroidGroupBox.Location = new System.Drawing.Point(881, 474);
            this.itemByPeroidGroupBox.Name = "itemByPeroidGroupBox";
            this.itemByPeroidGroupBox.Size = new System.Drawing.Size(92, 19);
            this.itemByPeroidGroupBox.TabIndex = 21;
            this.itemByPeroidGroupBox.Tag = "节目播放设置";
            this.itemByPeroidGroupBox.TextColor = System.Drawing.Color.Black;
            this.itemByPeroidGroupBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // label_Item_DateTo
            // 
            this.label_Item_DateTo.Location = new System.Drawing.Point(95, 60);
            this.label_Item_DateTo.Name = "label_Item_DateTo";
            this.label_Item_DateTo.Size = new System.Drawing.Size(82, 23);
            this.label_Item_DateTo.TabIndex = 21;
            this.label_Item_DateTo.Text = "到";
            this.label_Item_DateTo.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // itemPlayTimerByWeekRadioButton
            // 
            this.itemPlayTimerByWeekRadioButton.AutoSize = true;
            this.itemPlayTimerByWeekRadioButton.Location = new System.Drawing.Point(8, 8);
            this.itemPlayTimerByWeekRadioButton.Name = "itemPlayTimerByWeekRadioButton";
            this.itemPlayTimerByWeekRadioButton.Size = new System.Drawing.Size(47, 16);
            this.itemPlayTimerByWeekRadioButton.TabIndex = 14;
            this.itemPlayTimerByWeekRadioButton.TabStop = true;
            this.itemPlayTimerByWeekRadioButton.Text = "按周";
            this.itemPlayTimerByWeekRadioButton.UseVisualStyleBackColor = true;
            this.itemPlayTimerByWeekRadioButton.CheckedChanged += new System.EventHandler(this.itemPlayTimerByWeekRadioButton_CheckedChanged);
            // 
            // itemTimerEndTime
            // 
            this.itemTimerEndTime.CustomFormat = "HH:mm";
            this.itemTimerEndTime.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.itemTimerEndTime.Location = new System.Drawing.Point(177, 59);
            this.itemTimerEndTime.Name = "itemTimerEndTime";
            this.itemTimerEndTime.ShowUpDown = true;
            this.itemTimerEndTime.Size = new System.Drawing.Size(83, 21);
            this.itemTimerEndTime.TabIndex = 20;
            this.itemTimerEndTime.ValueChanged += new System.EventHandler(this.itemTimerEndTime_ValueChanged);
            // 
            // itemTimerStartTime
            // 
            this.itemTimerStartTime.CustomFormat = "HH:mm";
            this.itemTimerStartTime.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.itemTimerStartTime.Location = new System.Drawing.Point(12, 60);
            this.itemTimerStartTime.Name = "itemTimerStartTime";
            this.itemTimerStartTime.ShowUpDown = true;
            this.itemTimerStartTime.Size = new System.Drawing.Size(83, 21);
            this.itemTimerStartTime.TabIndex = 19;
            this.itemTimerStartTime.ValueChanged += new System.EventHandler(this.itemTimerStartTime_ValueChanged);
            // 
            // itemPlayTimerByDatePanel
            // 
            this.itemPlayTimerByDatePanel.Controls.Add(this.itemTimerNoGap);
            this.itemPlayTimerByDatePanel.Controls.Add(this.label9);
            this.itemPlayTimerByDatePanel.Controls.Add(this.itemTimerEndDate);
            this.itemPlayTimerByDatePanel.Controls.Add(this.itemTimerStartDate);
            this.itemPlayTimerByDatePanel.Location = new System.Drawing.Point(9, 29);
            this.itemPlayTimerByDatePanel.Name = "itemPlayTimerByDatePanel";
            this.itemPlayTimerByDatePanel.Size = new System.Drawing.Size(440, 26);
            this.itemPlayTimerByDatePanel.TabIndex = 18;
            // 
            // itemTimerNoGap
            // 
            this.itemTimerNoGap.AutoSize = true;
            this.itemTimerNoGap.Location = new System.Drawing.Point(355, 5);
            this.itemTimerNoGap.Name = "itemTimerNoGap";
            this.itemTimerNoGap.Size = new System.Drawing.Size(72, 16);
            this.itemTimerNoGap.TabIndex = 14;
            this.itemTimerNoGap.Text = "连续播放";
            this.itemTimerNoGap.UseVisualStyleBackColor = true;
            this.itemTimerNoGap.Visible = false;
            this.itemTimerNoGap.CheckedChanged += new System.EventHandler(this.itemTimerNoGap_CheckedChanged);
            // 
            // label9
            // 
            this.label9.Location = new System.Drawing.Point(117, 1);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(82, 23);
            this.label9.TabIndex = 13;
            this.label9.Text = "到";
            this.label9.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // itemTimerEndDate
            // 
            this.itemTimerEndDate.CustomFormat = "yyyy-MM-dd";
            this.itemTimerEndDate.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.itemTimerEndDate.Location = new System.Drawing.Point(205, 1);
            this.itemTimerEndDate.Name = "itemTimerEndDate";
            this.itemTimerEndDate.Size = new System.Drawing.Size(118, 21);
            this.itemTimerEndDate.TabIndex = 12;
            this.itemTimerEndDate.ValueChanged += new System.EventHandler(this.itemTimerEndDate_ValueChanged);
            // 
            // itemTimerStartDate
            // 
            this.itemTimerStartDate.CustomFormat = "yyyy-MM-dd";
            this.itemTimerStartDate.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.itemTimerStartDate.Location = new System.Drawing.Point(2, 1);
            this.itemTimerStartDate.MinDate = new System.DateTime(1800, 1, 1, 0, 0, 0, 0);
            this.itemTimerStartDate.Name = "itemTimerStartDate";
            this.itemTimerStartDate.Size = new System.Drawing.Size(118, 21);
            this.itemTimerStartDate.TabIndex = 0;
            this.itemTimerStartDate.ValueChanged += new System.EventHandler(this.itemTimerStartDate_ValueChanged);
            // 
            // itemPlayTimerEverydayRadioButton
            // 
            this.itemPlayTimerEverydayRadioButton.AutoSize = true;
            this.itemPlayTimerEverydayRadioButton.Location = new System.Drawing.Point(180, 7);
            this.itemPlayTimerEverydayRadioButton.Name = "itemPlayTimerEverydayRadioButton";
            this.itemPlayTimerEverydayRadioButton.Size = new System.Drawing.Size(47, 16);
            this.itemPlayTimerEverydayRadioButton.TabIndex = 16;
            this.itemPlayTimerEverydayRadioButton.TabStop = true;
            this.itemPlayTimerEverydayRadioButton.Text = "每天";
            this.itemPlayTimerEverydayRadioButton.UseVisualStyleBackColor = true;
            this.itemPlayTimerEverydayRadioButton.CheckedChanged += new System.EventHandler(this.itemPlayTimerEverydayRadioButton_CheckedChanged);
            // 
            // itemPlayTimerByDateRadioButton
            // 
            this.itemPlayTimerByDateRadioButton.AutoSize = true;
            this.itemPlayTimerByDateRadioButton.Location = new System.Drawing.Point(89, 8);
            this.itemPlayTimerByDateRadioButton.Name = "itemPlayTimerByDateRadioButton";
            this.itemPlayTimerByDateRadioButton.Size = new System.Drawing.Size(59, 16);
            this.itemPlayTimerByDateRadioButton.TabIndex = 15;
            this.itemPlayTimerByDateRadioButton.TabStop = true;
            this.itemPlayTimerByDateRadioButton.Text = "按日期";
            this.itemPlayTimerByDateRadioButton.UseVisualStyleBackColor = true;
            this.itemPlayTimerByDateRadioButton.CheckedChanged += new System.EventHandler(this.itemPlayTimerByDateRadioButton_CheckedChanged);
            // 
            // itemPlayTimerByWeekPanel
            // 
            this.itemPlayTimerByWeekPanel.Controls.Add(this.itemTimerWeekThursdayCheckBox);
            this.itemPlayTimerByWeekPanel.Controls.Add(this.itemTimerWeekMondayCheckBox);
            this.itemPlayTimerByWeekPanel.Controls.Add(this.itemTimerWeekTuesdayCheckBox);
            this.itemPlayTimerByWeekPanel.Controls.Add(this.itemTimerWeekWednesdayCheckBox);
            this.itemPlayTimerByWeekPanel.Controls.Add(this.itemTimerWeekFridayCheckBox);
            this.itemPlayTimerByWeekPanel.Controls.Add(this.itemTimerWeekSaturdayCheckBox);
            this.itemPlayTimerByWeekPanel.Controls.Add(this.itemTimerWeekSundayCheckBox);
            this.itemPlayTimerByWeekPanel.Location = new System.Drawing.Point(9, 29);
            this.itemPlayTimerByWeekPanel.Name = "itemPlayTimerByWeekPanel";
            this.itemPlayTimerByWeekPanel.Size = new System.Drawing.Size(444, 31);
            this.itemPlayTimerByWeekPanel.TabIndex = 17;
            // 
            // itemTimerWeekThursdayCheckBox
            // 
            this.itemTimerWeekThursdayCheckBox.AutoSize = true;
            this.itemTimerWeekThursdayCheckBox.Location = new System.Drawing.Point(191, 3);
            this.itemTimerWeekThursdayCheckBox.Name = "itemTimerWeekThursdayCheckBox";
            this.itemTimerWeekThursdayCheckBox.Size = new System.Drawing.Size(60, 16);
            this.itemTimerWeekThursdayCheckBox.TabIndex = 4;
            this.itemTimerWeekThursdayCheckBox.Tag = "4";
            this.itemTimerWeekThursdayCheckBox.Text = "星期四";
            this.itemTimerWeekThursdayCheckBox.UseVisualStyleBackColor = true;
            this.itemTimerWeekThursdayCheckBox.CheckedChanged += new System.EventHandler(this.itemTimerWeekMondayCheckBox_CheckedChanged);
            // 
            // itemTimerWeekMondayCheckBox
            // 
            this.itemTimerWeekMondayCheckBox.AutoSize = true;
            this.itemTimerWeekMondayCheckBox.Location = new System.Drawing.Point(2, 3);
            this.itemTimerWeekMondayCheckBox.Name = "itemTimerWeekMondayCheckBox";
            this.itemTimerWeekMondayCheckBox.Size = new System.Drawing.Size(60, 16);
            this.itemTimerWeekMondayCheckBox.TabIndex = 1;
            this.itemTimerWeekMondayCheckBox.Tag = "1";
            this.itemTimerWeekMondayCheckBox.Text = "星期一";
            this.itemTimerWeekMondayCheckBox.UseVisualStyleBackColor = true;
            this.itemTimerWeekMondayCheckBox.CheckedChanged += new System.EventHandler(this.itemTimerWeekMondayCheckBox_CheckedChanged);
            // 
            // itemTimerWeekTuesdayCheckBox
            // 
            this.itemTimerWeekTuesdayCheckBox.AutoSize = true;
            this.itemTimerWeekTuesdayCheckBox.Location = new System.Drawing.Point(64, 3);
            this.itemTimerWeekTuesdayCheckBox.Name = "itemTimerWeekTuesdayCheckBox";
            this.itemTimerWeekTuesdayCheckBox.Size = new System.Drawing.Size(60, 16);
            this.itemTimerWeekTuesdayCheckBox.TabIndex = 2;
            this.itemTimerWeekTuesdayCheckBox.Tag = "2";
            this.itemTimerWeekTuesdayCheckBox.Text = "星期二";
            this.itemTimerWeekTuesdayCheckBox.UseVisualStyleBackColor = true;
            this.itemTimerWeekTuesdayCheckBox.CheckedChanged += new System.EventHandler(this.itemTimerWeekMondayCheckBox_CheckedChanged);
            // 
            // itemTimerWeekWednesdayCheckBox
            // 
            this.itemTimerWeekWednesdayCheckBox.AutoSize = true;
            this.itemTimerWeekWednesdayCheckBox.Location = new System.Drawing.Point(129, 3);
            this.itemTimerWeekWednesdayCheckBox.Name = "itemTimerWeekWednesdayCheckBox";
            this.itemTimerWeekWednesdayCheckBox.Size = new System.Drawing.Size(60, 16);
            this.itemTimerWeekWednesdayCheckBox.TabIndex = 3;
            this.itemTimerWeekWednesdayCheckBox.Tag = "3";
            this.itemTimerWeekWednesdayCheckBox.Text = "星期三";
            this.itemTimerWeekWednesdayCheckBox.UseVisualStyleBackColor = true;
            this.itemTimerWeekWednesdayCheckBox.CheckedChanged += new System.EventHandler(this.itemTimerWeekMondayCheckBox_CheckedChanged);
            // 
            // itemTimerWeekFridayCheckBox
            // 
            this.itemTimerWeekFridayCheckBox.AutoSize = true;
            this.itemTimerWeekFridayCheckBox.Location = new System.Drawing.Point(254, 3);
            this.itemTimerWeekFridayCheckBox.Name = "itemTimerWeekFridayCheckBox";
            this.itemTimerWeekFridayCheckBox.Size = new System.Drawing.Size(60, 16);
            this.itemTimerWeekFridayCheckBox.TabIndex = 5;
            this.itemTimerWeekFridayCheckBox.Tag = "5";
            this.itemTimerWeekFridayCheckBox.Text = "星期五";
            this.itemTimerWeekFridayCheckBox.UseVisualStyleBackColor = true;
            this.itemTimerWeekFridayCheckBox.CheckedChanged += new System.EventHandler(this.itemTimerWeekMondayCheckBox_CheckedChanged);
            // 
            // itemTimerWeekSaturdayCheckBox
            // 
            this.itemTimerWeekSaturdayCheckBox.AutoSize = true;
            this.itemTimerWeekSaturdayCheckBox.Location = new System.Drawing.Point(316, 3);
            this.itemTimerWeekSaturdayCheckBox.Name = "itemTimerWeekSaturdayCheckBox";
            this.itemTimerWeekSaturdayCheckBox.Size = new System.Drawing.Size(60, 16);
            this.itemTimerWeekSaturdayCheckBox.TabIndex = 6;
            this.itemTimerWeekSaturdayCheckBox.Tag = "6";
            this.itemTimerWeekSaturdayCheckBox.Text = "星期六";
            this.itemTimerWeekSaturdayCheckBox.UseVisualStyleBackColor = true;
            this.itemTimerWeekSaturdayCheckBox.CheckedChanged += new System.EventHandler(this.itemTimerWeekMondayCheckBox_CheckedChanged);
            // 
            // itemTimerWeekSundayCheckBox
            // 
            this.itemTimerWeekSundayCheckBox.AutoSize = true;
            this.itemTimerWeekSundayCheckBox.Location = new System.Drawing.Point(378, 3);
            this.itemTimerWeekSundayCheckBox.Name = "itemTimerWeekSundayCheckBox";
            this.itemTimerWeekSundayCheckBox.Size = new System.Drawing.Size(60, 16);
            this.itemTimerWeekSundayCheckBox.TabIndex = 7;
            this.itemTimerWeekSundayCheckBox.Tag = "0";
            this.itemTimerWeekSundayCheckBox.Text = "星期日";
            this.itemTimerWeekSundayCheckBox.UseVisualStyleBackColor = true;
            this.itemTimerWeekSundayCheckBox.CheckedChanged += new System.EventHandler(this.itemTimerWeekMondayCheckBox_CheckedChanged);
            // 
            // dialAttributeBox
            // 
            this.dialAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.dialAttributeBox.Controls.Add(this.dialNumberSecondHandPlus);
            this.dialAttributeBox.Controls.Add(this.dialNumberMinuteHandPlus);
            this.dialAttributeBox.Controls.Add(this.dialRightTextTextBox);
            this.dialAttributeBox.Controls.Add(this.dialConnerTextTextBox);
            this.dialAttributeBox.Controls.Add(this.dialFontColorComboBox);
            this.dialAttributeBox.Controls.Add(this.dialTimeJetType);
            this.dialAttributeBox.Controls.Add(this.dialElementLeftDown);
            this.dialAttributeBox.Controls.Add(this.dialElementUp);
            this.dialAttributeBox.Controls.Add(this.dialElementRight);
            this.dialAttributeBox.Controls.Add(this.dialElementLeft);
            this.dialAttributeBox.Controls.Add(this.dialUnderlineBoldButton);
            this.dialAttributeBox.Controls.Add(this.dialItalicBoldButton);
            this.dialAttributeBox.Controls.Add(this.dialLabelFont);
            this.dialAttributeBox.Controls.Add(this.dialFontBoldButton);
            this.dialAttributeBox.Controls.Add(this.dialFontSizeComboBox);
            this.dialAttributeBox.Controls.Add(this.dialLabelFontSize);
            this.dialAttributeBox.Controls.Add(this.dialFontComboBox);
            this.dialAttributeBox.Controls.Add(this.dialLeftTextTextBox);
            this.dialAttributeBox.Controls.Add(this.dialAreaTextTextBox);
            this.dialAttributeBox.Controls.Add(this.dialLeftAndRightTextCheckBox);
            this.dialAttributeBox.Controls.Add(this.dialConnerTextCheckBox);
            this.dialAttributeBox.Controls.Add(this.dialTimeJetPicker);
            this.dialAttributeBox.Controls.Add(this.dialAreaTextCheckBox);
            this.dialAttributeBox.Controls.Add(this.label11);
            this.dialAttributeBox.Controls.Add(this.dialHandColorScaleMinute);
            this.dialAttributeBox.Controls.Add(this.dialHandColorScaleColorHour);
            this.dialAttributeBox.Controls.Add(this.dialHandColorScale369);
            this.dialAttributeBox.Controls.Add(this.dialHandColorSecond);
            this.dialAttributeBox.Controls.Add(this.dialHandColorMinute);
            this.dialAttributeBox.Controls.Add(this.dialHandColorHour);
            this.dialAttributeBox.Controls.Add(this.dialNumberSecondHandWidthPlus);
            this.dialAttributeBox.Controls.Add(this.dialNumberMinuteHandWidthPlus);
            this.dialAttributeBox.Controls.Add(this.dialNumberHourHandWidthPlus);
            this.dialAttributeBox.Controls.Add(this.label31);
            this.dialAttributeBox.Controls.Add(this.label32);
            this.dialAttributeBox.Controls.Add(this.label33);
            this.dialAttributeBox.Controls.Add(this.dialLabelScaleShape);
            this.dialAttributeBox.Controls.Add(this.dialComboBoxScaleShape);
            this.dialAttributeBox.Controls.Add(this.dialLabelHandStyle);
            this.dialAttributeBox.Controls.Add(this.dialComboBoxHandStyle);
            this.dialAttributeBox.Controls.Add(this.dialLabelSecondHandWidthPlus);
            this.dialAttributeBox.Controls.Add(this.dialNumberHourHandPlus);
            this.dialAttributeBox.Controls.Add(this.dialLabelMinuteHandSizePlus);
            this.dialAttributeBox.Controls.Add(this.dialLabelHourHandSizePlus);
            this.dialAttributeBox.Controls.Add(this.dialLabelHourHandPlus);
            this.dialAttributeBox.Controls.Add(this.dialLabelMinuteHandPlus);
            this.dialAttributeBox.Controls.Add(this.dialLabelSecondHandPlus);
            this.dialAttributeBox.Controls.Add(this.dialNumnberScaleMinutePlus);
            this.dialAttributeBox.Controls.Add(this.dialNumberScaleHourPlus);
            this.dialAttributeBox.Controls.Add(this.dialNumberScaleCrossPlus);
            this.dialAttributeBox.Controls.Add(this.dialLabelScaleMinutePlus);
            this.dialAttributeBox.Controls.Add(this.dialLabelScaleHourPlus);
            this.dialAttributeBox.Controls.Add(this.dialLabelScaleCrossPlus);
            this.dialAttributeBox.Location = new System.Drawing.Point(103, 368);
            this.dialAttributeBox.Name = "dialAttributeBox";
            this.dialAttributeBox.Size = new System.Drawing.Size(72, 17);
            this.dialAttributeBox.TabIndex = 27;
            this.dialAttributeBox.Tag = "表盘属性";
            this.dialAttributeBox.Text = "表盘属性";
            this.dialAttributeBox.TextColor = System.Drawing.Color.Black;
            this.dialAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // dialNumberSecondHandPlus
            // 
            this.dialNumberSecondHandPlus.Location = new System.Drawing.Point(62, 163);
            this.dialNumberSecondHandPlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumberSecondHandPlus.Name = "dialNumberSecondHandPlus";
            this.dialNumberSecondHandPlus.Size = new System.Drawing.Size(74, 21);
            this.dialNumberSecondHandPlus.TabIndex = 32;
            this.dialNumberSecondHandPlus.ValueChanged += new System.EventHandler(this.dialNumberSecondHandPlus_ValueChanged);
            // 
            // dialNumberMinuteHandPlus
            // 
            this.dialNumberMinuteHandPlus.Location = new System.Drawing.Point(62, 140);
            this.dialNumberMinuteHandPlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumberMinuteHandPlus.Name = "dialNumberMinuteHandPlus";
            this.dialNumberMinuteHandPlus.Size = new System.Drawing.Size(74, 21);
            this.dialNumberMinuteHandPlus.TabIndex = 31;
            this.dialNumberMinuteHandPlus.ValueChanged += new System.EventHandler(this.dialNumberMinuteHandPlus_ValueChanged);
            // 
            // dialRightTextTextBox
            // 
            this.dialRightTextTextBox.Location = new System.Drawing.Point(332, 61);
            this.dialRightTextTextBox.Name = "dialRightTextTextBox";
            this.dialRightTextTextBox.Size = new System.Drawing.Size(62, 21);
            this.dialRightTextTextBox.TabIndex = 97;
            this.dialRightTextTextBox.TextChanged += new System.EventHandler(this.dialRightTextTextBox_TextChanged);
            this.dialRightTextTextBox.Enter += new System.EventHandler(this.dialRightTextTextBox_Enter);
            // 
            // dialConnerTextTextBox
            // 
            this.dialConnerTextTextBox.FormattingEnabled = true;
            this.dialConnerTextTextBox.Items.AddRange(new object[] {
            "花,开,富,贵",
            "萬,事,如,意",
            "欢,度,春,节",
            "喜,迎,新,春",
            "金,玉,满,堂",
            "招,財,进,寳",
            "岁,岁,平,安",
            "竹,报,平,安",
            "年,年,有,余",
            "欢,度,国,庆",
            "春,暖,花,开",
            "紫,气,东,来"});
            this.dialConnerTextTextBox.Location = new System.Drawing.Point(136, 61);
            this.dialConnerTextTextBox.Name = "dialConnerTextTextBox";
            this.dialConnerTextTextBox.Size = new System.Drawing.Size(129, 20);
            this.dialConnerTextTextBox.TabIndex = 96;
            this.dialConnerTextTextBox.SelectedIndexChanged += new System.EventHandler(this.dialConnerTextTextBox_SelectedIndexChanged);
            this.dialConnerTextTextBox.Enter += new System.EventHandler(this.dialConnerTextTextBox_Enter);
            // 
            // dialFontColorComboBox
            // 
            this.dialFontColorComboBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.dialFontColorComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.dialFontColorComboBox.Enabled = false;
            this.dialFontColorComboBox.FormattingEnabled = true;
            this.dialFontColorComboBox.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.dialFontColorComboBox.Location = new System.Drawing.Point(296, 86);
            this.dialFontColorComboBox.Name = "dialFontColorComboBox";
            this.dialFontColorComboBox.Size = new System.Drawing.Size(41, 22);
            this.dialFontColorComboBox.TabIndex = 95;
            this.dialFontColorComboBox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.dialFontColorComboBox.SelectedIndexChanged += new System.EventHandler(this.dialFontColorComboBox_SelectedIndexChanged);
            // 
            // dialTimeJetType
            // 
            this.dialTimeJetType.FormattingEnabled = true;
            this.dialTimeJetType.Items.AddRange(new object[] {
            "-",
            "+"});
            this.dialTimeJetType.Location = new System.Drawing.Point(396, 15);
            this.dialTimeJetType.Name = "dialTimeJetType";
            this.dialTimeJetType.Size = new System.Drawing.Size(48, 20);
            this.dialTimeJetType.TabIndex = 94;
            this.dialTimeJetType.SelectedIndexChanged += new System.EventHandler(this.dialTimeJetType_SelectedIndexChanged);
            // 
            // dialElementLeftDown
            // 
            this.dialElementLeftDown.Image = ((System.Drawing.Image)(resources.GetObject("dialElementLeftDown.Image")));
            this.dialElementLeftDown.Location = new System.Drawing.Point(478, 83);
            this.dialElementLeftDown.Name = "dialElementLeftDown";
            this.dialElementLeftDown.Size = new System.Drawing.Size(32, 32);
            this.dialElementLeftDown.TabIndex = 93;
            this.dialElementLeftDown.TabStop = false;
            this.dialElementLeftDown.Click += new System.EventHandler(this.dialElementDown_Click);
            this.dialElementLeftDown.MouseHover += new System.EventHandler(this.dialElementLeft_MouseHover);
            // 
            // dialElementUp
            // 
            this.dialElementUp.Image = ((System.Drawing.Image)(resources.GetObject("dialElementUp.Image")));
            this.dialElementUp.Location = new System.Drawing.Point(440, 83);
            this.dialElementUp.Name = "dialElementUp";
            this.dialElementUp.Size = new System.Drawing.Size(32, 32);
            this.dialElementUp.TabIndex = 92;
            this.dialElementUp.TabStop = false;
            this.dialElementUp.Click += new System.EventHandler(this.dialElementUp_Click);
            this.dialElementUp.MouseHover += new System.EventHandler(this.dialElementLeft_MouseHover);
            // 
            // dialElementRight
            // 
            this.dialElementRight.Image = ((System.Drawing.Image)(resources.GetObject("dialElementRight.Image")));
            this.dialElementRight.Location = new System.Drawing.Point(402, 83);
            this.dialElementRight.Name = "dialElementRight";
            this.dialElementRight.Size = new System.Drawing.Size(32, 32);
            this.dialElementRight.TabIndex = 91;
            this.dialElementRight.TabStop = false;
            this.dialElementRight.Click += new System.EventHandler(this.dialElementRight_Click);
            this.dialElementRight.MouseHover += new System.EventHandler(this.dialElementLeft_MouseHover);
            // 
            // dialElementLeft
            // 
            this.dialElementLeft.Image = ((System.Drawing.Image)(resources.GetObject("dialElementLeft.Image")));
            this.dialElementLeft.Location = new System.Drawing.Point(363, 83);
            this.dialElementLeft.Name = "dialElementLeft";
            this.dialElementLeft.Size = new System.Drawing.Size(32, 32);
            this.dialElementLeft.TabIndex = 90;
            this.dialElementLeft.TabStop = false;
            this.dialElementLeft.Click += new System.EventHandler(this.dialElementLeft_Click);
            this.dialElementLeft.MouseHover += new System.EventHandler(this.dialElementLeft_MouseHover);
            // 
            // dialUnderlineBoldButton
            // 
            this.dialUnderlineBoldButton.BackColor = System.Drawing.Color.White;
            this.dialUnderlineBoldButton.Cursor = System.Windows.Forms.Cursors.Default;
            this.dialUnderlineBoldButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.5F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Underline))));
            this.dialUnderlineBoldButton.ForeColor = System.Drawing.Color.Black;
            this.dialUnderlineBoldButton.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.dialUnderlineBoldButton.Location = new System.Drawing.Point(270, 87);
            this.dialUnderlineBoldButton.Name = "dialUnderlineBoldButton";
            this.dialUnderlineBoldButton.Size = new System.Drawing.Size(21, 21);
            this.dialUnderlineBoldButton.TabIndex = 87;
            this.dialUnderlineBoldButton.Text = "U";
            this.dialUnderlineBoldButton.UseVisualStyleBackColor = false;
            this.dialUnderlineBoldButton.Click += new System.EventHandler(this.dialUnderlineBoldButton_Click);
            // 
            // dialItalicBoldButton
            // 
            this.dialItalicBoldButton.BackColor = System.Drawing.Color.White;
            this.dialItalicBoldButton.Cursor = System.Windows.Forms.Cursors.Default;
            this.dialItalicBoldButton.Font = new System.Drawing.Font("宋体", 10.5F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))));
            this.dialItalicBoldButton.ForeColor = System.Drawing.Color.Black;
            this.dialItalicBoldButton.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.dialItalicBoldButton.Location = new System.Drawing.Point(249, 87);
            this.dialItalicBoldButton.Name = "dialItalicBoldButton";
            this.dialItalicBoldButton.Size = new System.Drawing.Size(21, 21);
            this.dialItalicBoldButton.TabIndex = 88;
            this.dialItalicBoldButton.Text = "I";
            this.dialItalicBoldButton.UseVisualStyleBackColor = false;
            this.dialItalicBoldButton.Click += new System.EventHandler(this.dialItalicBoldButton_Click);
            // 
            // dialLabelFont
            // 
            this.dialLabelFont.BackColor = System.Drawing.Color.Transparent;
            this.dialLabelFont.Cursor = System.Windows.Forms.Cursors.Default;
            this.dialLabelFont.ForeColor = System.Drawing.Color.Black;
            this.dialLabelFont.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.dialLabelFont.Location = new System.Drawing.Point(5, 90);
            this.dialLabelFont.Name = "dialLabelFont";
            this.dialLabelFont.Size = new System.Drawing.Size(30, 14);
            this.dialLabelFont.TabIndex = 83;
            this.dialLabelFont.Text = "字体";
            this.dialLabelFont.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // dialFontBoldButton
            // 
            this.dialFontBoldButton.BackColor = System.Drawing.Color.White;
            this.dialFontBoldButton.Cursor = System.Windows.Forms.Cursors.Default;
            this.dialFontBoldButton.FlatAppearance.BorderColor = System.Drawing.Color.White;
            this.dialFontBoldButton.Font = new System.Drawing.Font("宋体", 10.5F, System.Drawing.FontStyle.Bold);
            this.dialFontBoldButton.ForeColor = System.Drawing.SystemColors.ControlText;
            this.dialFontBoldButton.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.dialFontBoldButton.Location = new System.Drawing.Point(228, 87);
            this.dialFontBoldButton.Name = "dialFontBoldButton";
            this.dialFontBoldButton.Size = new System.Drawing.Size(21, 21);
            this.dialFontBoldButton.TabIndex = 89;
            this.dialFontBoldButton.Text = "B";
            this.dialFontBoldButton.UseVisualStyleBackColor = false;
            this.dialFontBoldButton.Click += new System.EventHandler(this.dialFontBoldButton_Click);
            // 
            // dialFontSizeComboBox
            // 
            this.dialFontSizeComboBox.Cursor = System.Windows.Forms.Cursors.Default;
            this.dialFontSizeComboBox.FormattingEnabled = true;
            this.dialFontSizeComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.dialFontSizeComboBox.Items.AddRange(new object[] {
            "8",
            "9",
            "10",
            "11",
            "12",
            "14",
            "16",
            "18",
            "20",
            "22",
            "24",
            "26",
            "28",
            "30",
            "32",
            "34",
            "36",
            "38",
            "40",
            "42",
            "45",
            "46",
            "48",
            "50",
            "52",
            "54",
            "56",
            "58",
            "60",
            "62",
            "64",
            "66",
            "68",
            "70",
            "72",
            "80",
            "90",
            "100",
            "110",
            "120",
            "130",
            "140",
            "150",
            "160",
            "170",
            "180",
            "190",
            "200"});
            this.dialFontSizeComboBox.Location = new System.Drawing.Point(177, 88);
            this.dialFontSizeComboBox.MaxLength = 5;
            this.dialFontSizeComboBox.Name = "dialFontSizeComboBox";
            this.dialFontSizeComboBox.Size = new System.Drawing.Size(47, 20);
            this.dialFontSizeComboBox.TabIndex = 85;
            this.dialFontSizeComboBox.Text = "14";
            this.dialFontSizeComboBox.SelectedIndexChanged += new System.EventHandler(this.diaoFontSizeComboBox_SelectedIndexChanged);
            // 
            // dialLabelFontSize
            // 
            this.dialLabelFontSize.BackColor = System.Drawing.Color.Transparent;
            this.dialLabelFontSize.Cursor = System.Windows.Forms.Cursors.Default;
            this.dialLabelFontSize.ForeColor = System.Drawing.Color.Black;
            this.dialLabelFontSize.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.dialLabelFontSize.Location = new System.Drawing.Point(141, 91);
            this.dialLabelFontSize.Name = "dialLabelFontSize";
            this.dialLabelFontSize.Size = new System.Drawing.Size(34, 14);
            this.dialLabelFontSize.TabIndex = 84;
            this.dialLabelFontSize.Text = "字号";
            this.dialLabelFontSize.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // dialFontComboBox
            // 
            this.dialFontComboBox.Cursor = System.Windows.Forms.Cursors.Default;
            this.dialFontComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.dialFontComboBox.FormattingEnabled = true;
            this.dialFontComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.dialFontComboBox.Location = new System.Drawing.Point(38, 88);
            this.dialFontComboBox.Name = "dialFontComboBox";
            this.dialFontComboBox.Size = new System.Drawing.Size(98, 20);
            this.dialFontComboBox.TabIndex = 86;
            this.dialFontComboBox.SelectedIndexChanged += new System.EventHandler(this.dialFontComboBox_SelectedIndexChanged);
            // 
            // dialLeftTextTextBox
            // 
            this.dialLeftTextTextBox.Location = new System.Drawing.Point(268, 61);
            this.dialLeftTextTextBox.Name = "dialLeftTextTextBox";
            this.dialLeftTextTextBox.Size = new System.Drawing.Size(62, 21);
            this.dialLeftTextTextBox.TabIndex = 82;
            this.dialLeftTextTextBox.TextChanged += new System.EventHandler(this.dialLeftTextTextBox_TextChanged);
            this.dialLeftTextTextBox.Enter += new System.EventHandler(this.dialLeftTextTextBox_Enter);
            // 
            // dialAreaTextTextBox
            // 
            this.dialAreaTextTextBox.Location = new System.Drawing.Point(4, 61);
            this.dialAreaTextTextBox.Name = "dialAreaTextTextBox";
            this.dialAreaTextTextBox.Size = new System.Drawing.Size(128, 21);
            this.dialAreaTextTextBox.TabIndex = 79;
            this.dialAreaTextTextBox.TextChanged += new System.EventHandler(this.dialAreaTextTextBox_TextChanged);
            this.dialAreaTextTextBox.Enter += new System.EventHandler(this.dialAreaTextTextBox_Enter);
            // 
            // dialLeftAndRightTextCheckBox
            // 
            this.dialLeftAndRightTextCheckBox.AutoSize = true;
            this.dialLeftAndRightTextCheckBox.Location = new System.Drawing.Point(270, 42);
            this.dialLeftAndRightTextCheckBox.Name = "dialLeftAndRightTextCheckBox";
            this.dialLeftAndRightTextCheckBox.Size = new System.Drawing.Size(60, 16);
            this.dialLeftAndRightTextCheckBox.TabIndex = 77;
            this.dialLeftAndRightTextCheckBox.Text = "对联字";
            this.dialLeftAndRightTextCheckBox.UseVisualStyleBackColor = true;
            this.dialLeftAndRightTextCheckBox.CheckedChanged += new System.EventHandler(this.dialLeftAndRightTextCheckBox_CheckedChanged);
            // 
            // dialConnerTextCheckBox
            // 
            this.dialConnerTextCheckBox.AutoSize = true;
            this.dialConnerTextCheckBox.Location = new System.Drawing.Point(138, 42);
            this.dialConnerTextCheckBox.Name = "dialConnerTextCheckBox";
            this.dialConnerTextCheckBox.Size = new System.Drawing.Size(60, 16);
            this.dialConnerTextCheckBox.TabIndex = 76;
            this.dialConnerTextCheckBox.Text = "四角字";
            this.dialConnerTextCheckBox.UseVisualStyleBackColor = true;
            this.dialConnerTextCheckBox.CheckedChanged += new System.EventHandler(this.dialConnerTextCheckBox_CheckedChanged);
            // 
            // dialTimeJetPicker
            // 
            this.dialTimeJetPicker.CustomFormat = "HH:mm:ss";
            this.dialTimeJetPicker.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dialTimeJetPicker.Location = new System.Drawing.Point(452, 15);
            this.dialTimeJetPicker.Name = "dialTimeJetPicker";
            this.dialTimeJetPicker.ShowUpDown = true;
            this.dialTimeJetPicker.Size = new System.Drawing.Size(73, 21);
            this.dialTimeJetPicker.TabIndex = 65;
            this.dialTimeJetPicker.ValueChanged += new System.EventHandler(this.dialTimeJetPicker_ValueChanged);
            // 
            // dialAreaTextCheckBox
            // 
            this.dialAreaTextCheckBox.AutoSize = true;
            this.dialAreaTextCheckBox.Location = new System.Drawing.Point(8, 42);
            this.dialAreaTextCheckBox.Name = "dialAreaTextCheckBox";
            this.dialAreaTextCheckBox.Size = new System.Drawing.Size(72, 16);
            this.dialAreaTextCheckBox.TabIndex = 75;
            this.dialAreaTextCheckBox.Text = "固定文字";
            this.dialAreaTextCheckBox.UseVisualStyleBackColor = true;
            this.dialAreaTextCheckBox.CheckedChanged += new System.EventHandler(this.dialAreaTextCheckBox_CheckedChanged);
            // 
            // label11
            // 
            this.label11.Location = new System.Drawing.Point(346, 21);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(49, 12);
            this.label11.TabIndex = 64;
            this.label11.Text = "时差";
            this.label11.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            // 
            // dialHandColorScaleMinute
            // 
            this.dialHandColorScaleMinute.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.dialHandColorScaleMinute.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.dialHandColorScaleMinute.FormattingEnabled = true;
            this.dialHandColorScaleMinute.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.dialHandColorScaleMinute.Location = new System.Drawing.Point(486, 164);
            this.dialHandColorScaleMinute.Name = "dialHandColorScaleMinute";
            this.dialHandColorScaleMinute.Size = new System.Drawing.Size(41, 22);
            this.dialHandColorScaleMinute.TabIndex = 74;
            this.dialHandColorScaleMinute.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.dialHandColorScaleMinute.SelectedIndexChanged += new System.EventHandler(this.dialHandColorScaleMinute_SelectedIndexChanged);
            // 
            // dialHandColorScaleColorHour
            // 
            this.dialHandColorScaleColorHour.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.dialHandColorScaleColorHour.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.dialHandColorScaleColorHour.FormattingEnabled = true;
            this.dialHandColorScaleColorHour.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.dialHandColorScaleColorHour.Location = new System.Drawing.Point(486, 141);
            this.dialHandColorScaleColorHour.Name = "dialHandColorScaleColorHour";
            this.dialHandColorScaleColorHour.Size = new System.Drawing.Size(41, 22);
            this.dialHandColorScaleColorHour.TabIndex = 73;
            this.dialHandColorScaleColorHour.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.dialHandColorScaleColorHour.SelectedIndexChanged += new System.EventHandler(this.dialHandColorScaleColor_SelectedIndexChanged);
            // 
            // dialHandColorScale369
            // 
            this.dialHandColorScale369.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.dialHandColorScale369.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.dialHandColorScale369.FormattingEnabled = true;
            this.dialHandColorScale369.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.dialHandColorScale369.Location = new System.Drawing.Point(486, 118);
            this.dialHandColorScale369.Name = "dialHandColorScale369";
            this.dialHandColorScale369.Size = new System.Drawing.Size(41, 22);
            this.dialHandColorScale369.TabIndex = 72;
            this.dialHandColorScale369.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.dialHandColorScale369.SelectedIndexChanged += new System.EventHandler(this.dialHandColorScale369_SelectedIndexChanged);
            // 
            // dialHandColorSecond
            // 
            this.dialHandColorSecond.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.dialHandColorSecond.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.dialHandColorSecond.FormattingEnabled = true;
            this.dialHandColorSecond.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.dialHandColorSecond.Location = new System.Drawing.Point(244, 164);
            this.dialHandColorSecond.Name = "dialHandColorSecond";
            this.dialHandColorSecond.Size = new System.Drawing.Size(41, 22);
            this.dialHandColorSecond.TabIndex = 71;
            this.dialHandColorSecond.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.dialHandColorSecond.SelectedIndexChanged += new System.EventHandler(this.dialHandColorSecond_SelectedIndexChanged);
            // 
            // dialHandColorMinute
            // 
            this.dialHandColorMinute.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.dialHandColorMinute.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.dialHandColorMinute.FormattingEnabled = true;
            this.dialHandColorMinute.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.dialHandColorMinute.Location = new System.Drawing.Point(244, 141);
            this.dialHandColorMinute.Name = "dialHandColorMinute";
            this.dialHandColorMinute.Size = new System.Drawing.Size(41, 22);
            this.dialHandColorMinute.TabIndex = 70;
            this.dialHandColorMinute.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.dialHandColorMinute.SelectedIndexChanged += new System.EventHandler(this.dialHandColorMinute_SelectedIndexChanged);
            // 
            // dialHandColorHour
            // 
            this.dialHandColorHour.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.dialHandColorHour.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.dialHandColorHour.FormattingEnabled = true;
            this.dialHandColorHour.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.dialHandColorHour.Location = new System.Drawing.Point(244, 118);
            this.dialHandColorHour.Name = "dialHandColorHour";
            this.dialHandColorHour.Size = new System.Drawing.Size(41, 22);
            this.dialHandColorHour.TabIndex = 69;
            this.dialHandColorHour.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.dialHandColorHour.SelectedIndexChanged += new System.EventHandler(this.dialHandColorHour_SelectedIndexChanged);
            // 
            // dialNumberSecondHandWidthPlus
            // 
            this.dialNumberSecondHandWidthPlus.Location = new System.Drawing.Point(167, 164);
            this.dialNumberSecondHandWidthPlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumberSecondHandWidthPlus.Name = "dialNumberSecondHandWidthPlus";
            this.dialNumberSecondHandWidthPlus.Size = new System.Drawing.Size(74, 21);
            this.dialNumberSecondHandWidthPlus.TabIndex = 57;
            this.dialNumberSecondHandWidthPlus.ValueChanged += new System.EventHandler(this.dialNumberSecondHandWidthPlus_ValueChanged);
            // 
            // dialNumberMinuteHandWidthPlus
            // 
            this.dialNumberMinuteHandWidthPlus.Location = new System.Drawing.Point(167, 141);
            this.dialNumberMinuteHandWidthPlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumberMinuteHandWidthPlus.Name = "dialNumberMinuteHandWidthPlus";
            this.dialNumberMinuteHandWidthPlus.Size = new System.Drawing.Size(74, 21);
            this.dialNumberMinuteHandWidthPlus.TabIndex = 56;
            this.dialNumberMinuteHandWidthPlus.ValueChanged += new System.EventHandler(this.dialNumberMinuteHandWidthPlus_ValueChanged);
            // 
            // dialNumberHourHandWidthPlus
            // 
            this.dialNumberHourHandWidthPlus.Location = new System.Drawing.Point(167, 118);
            this.dialNumberHourHandWidthPlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumberHourHandWidthPlus.Name = "dialNumberHourHandWidthPlus";
            this.dialNumberHourHandWidthPlus.Size = new System.Drawing.Size(74, 21);
            this.dialNumberHourHandWidthPlus.TabIndex = 55;
            this.dialNumberHourHandWidthPlus.ValueChanged += new System.EventHandler(this.dialNumberHourHandWidthPlus_ValueChanged);
            // 
            // label31
            // 
            this.label31.AutoSize = true;
            this.label31.Location = new System.Drawing.Point(152, 124);
            this.label31.Name = "label31";
            this.label31.Size = new System.Drawing.Size(11, 12);
            this.label31.TabIndex = 66;
            this.label31.Text = "W";
            // 
            // label32
            // 
            this.label32.AutoSize = true;
            this.label32.Location = new System.Drawing.Point(152, 146);
            this.label32.Name = "label32";
            this.label32.Size = new System.Drawing.Size(11, 12);
            this.label32.TabIndex = 67;
            this.label32.Text = "W";
            // 
            // label33
            // 
            this.label33.AutoSize = true;
            this.label33.Location = new System.Drawing.Point(152, 167);
            this.label33.Name = "label33";
            this.label33.Size = new System.Drawing.Size(11, 12);
            this.label33.TabIndex = 68;
            this.label33.Text = "W";
            // 
            // dialLabelScaleShape
            // 
            this.dialLabelScaleShape.Location = new System.Drawing.Point(2, 19);
            this.dialLabelScaleShape.Name = "dialLabelScaleShape";
            this.dialLabelScaleShape.Size = new System.Drawing.Size(60, 19);
            this.dialLabelScaleShape.TabIndex = 13;
            this.dialLabelScaleShape.Text = "刻度样式";
            this.dialLabelScaleShape.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // dialComboBoxScaleShape
            // 
            this.dialComboBoxScaleShape.FormattingEnabled = true;
            this.dialComboBoxScaleShape.Items.AddRange(new object[] {
            "圆点",
            "方块",
            "阿拉伯数字",
            "罗马数字"});
            this.dialComboBoxScaleShape.Location = new System.Drawing.Point(65, 18);
            this.dialComboBoxScaleShape.Name = "dialComboBoxScaleShape";
            this.dialComboBoxScaleShape.Size = new System.Drawing.Size(94, 20);
            this.dialComboBoxScaleShape.TabIndex = 14;
            this.dialComboBoxScaleShape.SelectedIndexChanged += new System.EventHandler(this.dialComboBoxScaleShape_SelectedIndexChanged);
            // 
            // dialLabelHandStyle
            // 
            this.dialLabelHandStyle.Location = new System.Drawing.Point(169, 22);
            this.dialLabelHandStyle.Name = "dialLabelHandStyle";
            this.dialLabelHandStyle.Size = new System.Drawing.Size(55, 12);
            this.dialLabelHandStyle.TabIndex = 15;
            this.dialLabelHandStyle.Text = "指针样式";
            // 
            // dialComboBoxHandStyle
            // 
            this.dialComboBoxHandStyle.FormattingEnabled = true;
            this.dialComboBoxHandStyle.Items.AddRange(new object[] {
            "样式1",
            "样式2"});
            this.dialComboBoxHandStyle.Location = new System.Drawing.Point(228, 16);
            this.dialComboBoxHandStyle.Name = "dialComboBoxHandStyle";
            this.dialComboBoxHandStyle.Size = new System.Drawing.Size(109, 20);
            this.dialComboBoxHandStyle.TabIndex = 16;
            this.dialComboBoxHandStyle.SelectedIndexChanged += new System.EventHandler(this.dialComboBoxHandStyle_SelectedIndexChanged);
            // 
            // dialLabelSecondHandWidthPlus
            // 
            this.dialLabelSecondHandWidthPlus.AutoSize = true;
            this.dialLabelSecondHandWidthPlus.Location = new System.Drawing.Point(6, 165);
            this.dialLabelSecondHandWidthPlus.Name = "dialLabelSecondHandWidthPlus";
            this.dialLabelSecondHandWidthPlus.Size = new System.Drawing.Size(29, 12);
            this.dialLabelSecondHandWidthPlus.TabIndex = 60;
            this.dialLabelSecondHandWidthPlus.Text = "秒针";
            // 
            // dialNumberHourHandPlus
            // 
            this.dialNumberHourHandPlus.Location = new System.Drawing.Point(62, 117);
            this.dialNumberHourHandPlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumberHourHandPlus.Name = "dialNumberHourHandPlus";
            this.dialNumberHourHandPlus.Size = new System.Drawing.Size(74, 21);
            this.dialNumberHourHandPlus.TabIndex = 29;
            this.dialNumberHourHandPlus.ValueChanged += new System.EventHandler(this.dialNumberHourHandPlus_ValueChanged);
            // 
            // dialLabelMinuteHandSizePlus
            // 
            this.dialLabelMinuteHandSizePlus.AutoSize = true;
            this.dialLabelMinuteHandSizePlus.Location = new System.Drawing.Point(6, 144);
            this.dialLabelMinuteHandSizePlus.Name = "dialLabelMinuteHandSizePlus";
            this.dialLabelMinuteHandSizePlus.Size = new System.Drawing.Size(29, 12);
            this.dialLabelMinuteHandSizePlus.TabIndex = 59;
            this.dialLabelMinuteHandSizePlus.Text = "分针";
            // 
            // dialLabelHourHandSizePlus
            // 
            this.dialLabelHourHandSizePlus.AutoSize = true;
            this.dialLabelHourHandSizePlus.Location = new System.Drawing.Point(6, 122);
            this.dialLabelHourHandSizePlus.Name = "dialLabelHourHandSizePlus";
            this.dialLabelHourHandSizePlus.Size = new System.Drawing.Size(29, 12);
            this.dialLabelHourHandSizePlus.TabIndex = 58;
            this.dialLabelHourHandSizePlus.Text = "时针";
            // 
            // dialLabelHourHandPlus
            // 
            this.dialLabelHourHandPlus.AutoSize = true;
            this.dialLabelHourHandPlus.Location = new System.Drawing.Point(47, 123);
            this.dialLabelHourHandPlus.Name = "dialLabelHourHandPlus";
            this.dialLabelHourHandPlus.Size = new System.Drawing.Size(11, 12);
            this.dialLabelHourHandPlus.TabIndex = 35;
            this.dialLabelHourHandPlus.Text = "L";
            // 
            // dialLabelMinuteHandPlus
            // 
            this.dialLabelMinuteHandPlus.AutoSize = true;
            this.dialLabelMinuteHandPlus.Location = new System.Drawing.Point(47, 145);
            this.dialLabelMinuteHandPlus.Name = "dialLabelMinuteHandPlus";
            this.dialLabelMinuteHandPlus.Size = new System.Drawing.Size(11, 12);
            this.dialLabelMinuteHandPlus.TabIndex = 36;
            this.dialLabelMinuteHandPlus.Text = "L";
            // 
            // dialLabelSecondHandPlus
            // 
            this.dialLabelSecondHandPlus.AutoSize = true;
            this.dialLabelSecondHandPlus.Location = new System.Drawing.Point(47, 166);
            this.dialLabelSecondHandPlus.Name = "dialLabelSecondHandPlus";
            this.dialLabelSecondHandPlus.Size = new System.Drawing.Size(11, 12);
            this.dialLabelSecondHandPlus.TabIndex = 37;
            this.dialLabelSecondHandPlus.Text = "L";
            // 
            // dialNumnberScaleMinutePlus
            // 
            this.dialNumnberScaleMinutePlus.Location = new System.Drawing.Point(398, 164);
            this.dialNumnberScaleMinutePlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumnberScaleMinutePlus.Name = "dialNumnberScaleMinutePlus";
            this.dialNumnberScaleMinutePlus.Size = new System.Drawing.Size(85, 21);
            this.dialNumnberScaleMinutePlus.TabIndex = 39;
            this.dialNumnberScaleMinutePlus.ValueChanged += new System.EventHandler(this.dialNumnberScaleMinutePlus_ValueChanged);
            // 
            // dialNumberScaleHourPlus
            // 
            this.dialNumberScaleHourPlus.Location = new System.Drawing.Point(398, 141);
            this.dialNumberScaleHourPlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumberScaleHourPlus.Name = "dialNumberScaleHourPlus";
            this.dialNumberScaleHourPlus.Size = new System.Drawing.Size(85, 21);
            this.dialNumberScaleHourPlus.TabIndex = 40;
            this.dialNumberScaleHourPlus.ValueChanged += new System.EventHandler(this.dialNumberScaleHourPlus_ValueChanged);
            // 
            // dialNumberScaleCrossPlus
            // 
            this.dialNumberScaleCrossPlus.Location = new System.Drawing.Point(398, 118);
            this.dialNumberScaleCrossPlus.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            -2147483648});
            this.dialNumberScaleCrossPlus.Name = "dialNumberScaleCrossPlus";
            this.dialNumberScaleCrossPlus.Size = new System.Drawing.Size(85, 21);
            this.dialNumberScaleCrossPlus.TabIndex = 41;
            this.dialNumberScaleCrossPlus.ValueChanged += new System.EventHandler(this.dialNumberScaleCrossPlus_ValueChanged);
            // 
            // dialLabelScaleMinutePlus
            // 
            this.dialLabelScaleMinutePlus.AutoSize = true;
            this.dialLabelScaleMinutePlus.Location = new System.Drawing.Point(311, 169);
            this.dialLabelScaleMinutePlus.Name = "dialLabelScaleMinutePlus";
            this.dialLabelScaleMinutePlus.Size = new System.Drawing.Size(53, 12);
            this.dialLabelScaleMinutePlus.TabIndex = 42;
            this.dialLabelScaleMinutePlus.Text = "分点刻度";
            // 
            // dialLabelScaleHourPlus
            // 
            this.dialLabelScaleHourPlus.AutoSize = true;
            this.dialLabelScaleHourPlus.Location = new System.Drawing.Point(311, 146);
            this.dialLabelScaleHourPlus.Name = "dialLabelScaleHourPlus";
            this.dialLabelScaleHourPlus.Size = new System.Drawing.Size(53, 12);
            this.dialLabelScaleHourPlus.TabIndex = 43;
            this.dialLabelScaleHourPlus.Text = "整点刻度";
            // 
            // dialLabelScaleCrossPlus
            // 
            this.dialLabelScaleCrossPlus.AutoSize = true;
            this.dialLabelScaleCrossPlus.Location = new System.Drawing.Point(311, 121);
            this.dialLabelScaleCrossPlus.Name = "dialLabelScaleCrossPlus";
            this.dialLabelScaleCrossPlus.Size = new System.Drawing.Size(59, 12);
            this.dialLabelScaleCrossPlus.TabIndex = 44;
            this.dialLabelScaleCrossPlus.Text = "369点刻度";
            // 
            // subareaEdgeSetting
            // 
            this.subareaEdgeSetting.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.subareaEdgeSetting.Controls.Add(this.checkBox2);
            this.subareaEdgeSetting.Controls.Add(this.checkBox1);
            this.subareaEdgeSetting.Controls.Add(this.edgeListComboBox);
            this.subareaEdgeSetting.Controls.Add(this.edgeSpeedComboBox);
            this.subareaEdgeSetting.Controls.Add(this.edgeModeComboBox);
            this.subareaEdgeSetting.Controls.Add(this.edgeUseEdge);
            this.subareaEdgeSetting.Controls.Add(this.edgeSpeedLabel);
            this.subareaEdgeSetting.Controls.Add(this.edgeListLabel);
            this.subareaEdgeSetting.Controls.Add(this.edgeModeLabel);
            this.subareaEdgeSetting.Location = new System.Drawing.Point(790, 420);
            this.subareaEdgeSetting.Name = "subareaEdgeSetting";
            this.subareaEdgeSetting.Size = new System.Drawing.Size(85, 20);
            this.subareaEdgeSetting.TabIndex = 26;
            this.subareaEdgeSetting.Tag = "分区跑边设置";
            this.subareaEdgeSetting.Text = "跑边设置";
            this.subareaEdgeSetting.TextColor = System.Drawing.Color.Black;
            this.subareaEdgeSetting.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // checkBox2
            // 
            this.checkBox2.AutoSize = true;
            this.checkBox2.Location = new System.Drawing.Point(95, 168);
            this.checkBox2.Name = "checkBox2";
            this.checkBox2.Size = new System.Drawing.Size(48, 16);
            this.checkBox2.TabIndex = 8;
            this.checkBox2.Text = "随机";
            this.checkBox2.UseVisualStyleBackColor = true;
            this.checkBox2.Visible = false;
            // 
            // checkBox1
            // 
            this.checkBox1.AutoSize = true;
            this.checkBox1.Location = new System.Drawing.Point(37, 168);
            this.checkBox1.Name = "checkBox1";
            this.checkBox1.Size = new System.Drawing.Size(48, 16);
            this.checkBox1.TabIndex = 7;
            this.checkBox1.Text = "随机";
            this.checkBox1.UseVisualStyleBackColor = true;
            this.checkBox1.Visible = false;
            // 
            // edgeListComboBox
            // 
            this.edgeListComboBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.edgeListComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.edgeListComboBox.FormattingEnabled = true;
            this.edgeListComboBox.Location = new System.Drawing.Point(38, 56);
            this.edgeListComboBox.Name = "edgeListComboBox";
            this.edgeListComboBox.Size = new System.Drawing.Size(90, 22);
            this.edgeListComboBox.TabIndex = 0;
            this.edgeListComboBox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.edgeListComboBox_DrawItem);
            this.edgeListComboBox.SelectedIndexChanged += new System.EventHandler(this.SubareaEdgeListComboBox_SelectedIndexChanged);
            // 
            // edgeSpeedComboBox
            // 
            this.edgeSpeedComboBox.FormattingEnabled = true;
            this.edgeSpeedComboBox.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30"});
            this.edgeSpeedComboBox.Location = new System.Drawing.Point(38, 126);
            this.edgeSpeedComboBox.Name = "edgeSpeedComboBox";
            this.edgeSpeedComboBox.Size = new System.Drawing.Size(90, 20);
            this.edgeSpeedComboBox.TabIndex = 5;
            this.edgeSpeedComboBox.SelectedIndexChanged += new System.EventHandler(this.edgeSpeedComboBox_SelectedIndexChanged);
            // 
            // edgeModeComboBox
            // 
            this.edgeModeComboBox.FormattingEnabled = true;
            this.edgeModeComboBox.Items.AddRange(new object[] {
            "静止",
            "顺时针",
            "逆时针",
            "闪烁"});
            this.edgeModeComboBox.Location = new System.Drawing.Point(38, 93);
            this.edgeModeComboBox.Name = "edgeModeComboBox";
            this.edgeModeComboBox.Size = new System.Drawing.Size(90, 20);
            this.edgeModeComboBox.TabIndex = 3;
            this.edgeModeComboBox.SelectedIndexChanged += new System.EventHandler(this.edgeModeComboBox_SelectedIndexChanged);
            // 
            // edgeUseEdge
            // 
            this.edgeUseEdge.AutoSize = true;
            this.edgeUseEdge.Location = new System.Drawing.Point(9, 32);
            this.edgeUseEdge.Name = "edgeUseEdge";
            this.edgeUseEdge.Size = new System.Drawing.Size(72, 16);
            this.edgeUseEdge.TabIndex = 2;
            this.edgeUseEdge.Text = "使用跑边";
            this.edgeUseEdge.UseVisualStyleBackColor = true;
            this.edgeUseEdge.CheckedChanged += new System.EventHandler(this.edgeUseEdge_CheckedChanged);
            // 
            // edgeSpeedLabel
            // 
            this.edgeSpeedLabel.AutoSize = true;
            this.edgeSpeedLabel.Location = new System.Drawing.Point(3, 129);
            this.edgeSpeedLabel.Name = "edgeSpeedLabel";
            this.edgeSpeedLabel.Size = new System.Drawing.Size(29, 12);
            this.edgeSpeedLabel.TabIndex = 6;
            this.edgeSpeedLabel.Text = "速度";
            // 
            // edgeListLabel
            // 
            this.edgeListLabel.AutoSize = true;
            this.edgeListLabel.Location = new System.Drawing.Point(3, 59);
            this.edgeListLabel.Name = "edgeListLabel";
            this.edgeListLabel.Size = new System.Drawing.Size(29, 12);
            this.edgeListLabel.TabIndex = 1;
            this.edgeListLabel.Text = "跑边";
            // 
            // edgeModeLabel
            // 
            this.edgeModeLabel.AutoSize = true;
            this.edgeModeLabel.Location = new System.Drawing.Point(3, 96);
            this.edgeModeLabel.Name = "edgeModeLabel";
            this.edgeModeLabel.Size = new System.Drawing.Size(29, 12);
            this.edgeModeLabel.TabIndex = 4;
            this.edgeModeLabel.Text = "模式";
            // 
            // generateAnimationZhGroupBox
            // 
            this.generateAnimationZhGroupBox.Location = new System.Drawing.Point(746, 588);
            this.generateAnimationZhGroupBox.Name = "generateAnimationZhGroupBox";
            this.generateAnimationZhGroupBox.Size = new System.Drawing.Size(91, 20);
            this.generateAnimationZhGroupBox.TabIndex = 36;
            this.generateAnimationZhGroupBox.Tag = "正在生成动画";
            this.generateAnimationZhGroupBox.Text = "正在生成动画";
            this.generateAnimationZhGroupBox.TextColor = System.Drawing.Color.Black;
            this.generateAnimationZhGroupBox.TextFont = new System.Drawing.Font("宋体", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // subareaEffectSetting
            // 
            this.subareaEffectSetting.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.subareaEffectSetting.Controls.Add(this.effectLoop);
            this.subareaEffectSetting.Controls.Add(this.effectStay);
            this.subareaEffectSetting.Controls.Add(this.effectEntrySpeed);
            this.subareaEffectSetting.Controls.Add(this.effectExitSpeed);
            this.subareaEffectSetting.Controls.Add(this.effectEntryType);
            this.subareaEffectSetting.Controls.Add(this.effectExitType);
            this.subareaEffectSetting.Controls.Add(this.label25);
            this.subareaEffectSetting.Controls.Add(this.label24);
            this.subareaEffectSetting.Controls.Add(this.effectLabelEntrySpeed);
            this.subareaEffectSetting.Controls.Add(this.effectLabelEntryEntry);
            this.subareaEffectSetting.Controls.Add(this.effectLabelSpeedExitSpeed);
            this.subareaEffectSetting.Controls.Add(this.effectLabelSpeedExit);
            this.subareaEffectSetting.Location = new System.Drawing.Point(881, 388);
            this.subareaEffectSetting.Name = "subareaEffectSetting";
            this.subareaEffectSetting.Size = new System.Drawing.Size(92, 20);
            this.subareaEffectSetting.TabIndex = 25;
            this.subareaEffectSetting.Tag = "内容特技显示";
            this.subareaEffectSetting.Text = "特技显示";
            this.subareaEffectSetting.TextColor = System.Drawing.Color.Black;
            this.subareaEffectSetting.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // effectLoop
            // 
            this.effectLoop.FormattingEnabled = true;
            this.effectLoop.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32"});
            this.effectLoop.Location = new System.Drawing.Point(182, 163);
            this.effectLoop.Name = "effectLoop";
            this.effectLoop.Size = new System.Drawing.Size(80, 20);
            this.effectLoop.TabIndex = 15;
            this.effectLoop.Visible = false;
            this.effectLoop.SelectedIndexChanged += new System.EventHandler(this.effectLoop_SelectedIndexChanged);
            // 
            // effectStay
            // 
            this.effectStay.FormattingEnabled = true;
            this.effectStay.Items.AddRange(new object[] {
            "0.000s",
            "0.010s",
            "0.015s",
            "0.020s",
            "0.030s",
            "0.040s",
            "0.050s",
            "0.080s",
            "0.1s",
            "0.2s",
            "0.5s",
            "0.8s",
            "1s",
            "2s",
            "3s",
            "5s",
            "6s",
            "7s",
            "8s",
            "9s",
            "10s",
            "11s",
            "13s",
            "14s",
            "15s",
            "16s",
            "17s",
            "18s",
            "19s",
            "20s",
            "21s",
            "22s",
            "23s",
            "25s",
            "30s",
            "35s",
            "40s",
            "45s",
            "50s",
            "60s",
            "70s",
            "80s",
            "90s",
            "100s",
            "120s",
            "150s",
            "200s",
            "500s"});
            this.effectStay.Location = new System.Drawing.Point(42, 150);
            this.effectStay.Name = "effectStay";
            this.effectStay.Size = new System.Drawing.Size(80, 20);
            this.effectStay.TabIndex = 13;
            this.effectStay.SelectedIndexChanged += new System.EventHandler(this.effectStay_SelectedIndexChanged);
            // 
            // effectEntrySpeed
            // 
            this.effectEntrySpeed.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.effectEntrySpeed.FormattingEnabled = true;
            this.effectEntrySpeed.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32"});
            this.effectEntrySpeed.Location = new System.Drawing.Point(42, 63);
            this.effectEntrySpeed.Name = "effectEntrySpeed";
            this.effectEntrySpeed.Size = new System.Drawing.Size(80, 20);
            this.effectEntrySpeed.TabIndex = 8;
            this.effectEntrySpeed.SelectedIndexChanged += new System.EventHandler(this.effectEntrySpeed_SelectedIndexChanged);
            // 
            // effectExitSpeed
            // 
            this.effectExitSpeed.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.effectExitSpeed.FormattingEnabled = true;
            this.effectExitSpeed.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32"});
            this.effectExitSpeed.Location = new System.Drawing.Point(42, 122);
            this.effectExitSpeed.Name = "effectExitSpeed";
            this.effectExitSpeed.Size = new System.Drawing.Size(80, 20);
            this.effectExitSpeed.TabIndex = 11;
            this.effectExitSpeed.SelectedIndexChanged += new System.EventHandler(this.effectExitSpeed_SelectedIndexChanged);
            // 
            // effectEntryType
            // 
            this.effectEntryType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.effectEntryType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.effectEntryType.FormattingEnabled = true;
            this.effectEntryType.Location = new System.Drawing.Point(42, 32);
            this.effectEntryType.Name = "effectEntryType";
            this.effectEntryType.Size = new System.Drawing.Size(80, 22);
            this.effectEntryType.TabIndex = 7;
            this.effectEntryType.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.effectEntryType_DrawItem);
            this.effectEntryType.SelectedIndexChanged += new System.EventHandler(this.effectEntryType_SelectedIndexChanged);
            this.effectEntryType.DropDownClosed += new System.EventHandler(this.effectEntryType_DropDownClosed);
            // 
            // effectExitType
            // 
            this.effectExitType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.effectExitType.DropDownHeight = 500;
            this.effectExitType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.effectExitType.FormattingEnabled = true;
            this.effectExitType.IntegralHeight = false;
            this.effectExitType.Location = new System.Drawing.Point(42, 92);
            this.effectExitType.Name = "effectExitType";
            this.effectExitType.Size = new System.Drawing.Size(80, 22);
            this.effectExitType.TabIndex = 9;
            this.effectExitType.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.effectExitType_DrawItem);
            this.effectExitType.SelectedIndexChanged += new System.EventHandler(this.effectExitType_SelectedIndexChanged);
            this.effectExitType.DropDownClosed += new System.EventHandler(this.effectEntryType_DropDownClosed);
            // 
            // label25
            // 
            this.label25.AutoSize = true;
            this.label25.Location = new System.Drawing.Point(142, 166);
            this.label25.Name = "label25";
            this.label25.Size = new System.Drawing.Size(29, 12);
            this.label25.TabIndex = 14;
            this.label25.Text = "循环";
            this.label25.Visible = false;
            // 
            // label24
            // 
            this.label24.AutoSize = true;
            this.label24.Location = new System.Drawing.Point(2, 153);
            this.label24.Name = "label24";
            this.label24.Size = new System.Drawing.Size(29, 12);
            this.label24.TabIndex = 12;
            this.label24.Text = "停留";
            // 
            // effectLabelEntrySpeed
            // 
            this.effectLabelEntrySpeed.AutoSize = true;
            this.effectLabelEntrySpeed.Location = new System.Drawing.Point(2, 67);
            this.effectLabelEntrySpeed.Name = "effectLabelEntrySpeed";
            this.effectLabelEntrySpeed.Size = new System.Drawing.Size(29, 12);
            this.effectLabelEntrySpeed.TabIndex = 8;
            this.effectLabelEntrySpeed.Text = "速度";
            // 
            // effectLabelEntryEntry
            // 
            this.effectLabelEntryEntry.AutoSize = true;
            this.effectLabelEntryEntry.Location = new System.Drawing.Point(2, 36);
            this.effectLabelEntryEntry.Name = "effectLabelEntryEntry";
            this.effectLabelEntryEntry.Size = new System.Drawing.Size(29, 12);
            this.effectLabelEntryEntry.TabIndex = 7;
            this.effectLabelEntryEntry.Text = "进入";
            // 
            // effectLabelSpeedExitSpeed
            // 
            this.effectLabelSpeedExitSpeed.AutoSize = true;
            this.effectLabelSpeedExitSpeed.Location = new System.Drawing.Point(2, 126);
            this.effectLabelSpeedExitSpeed.Name = "effectLabelSpeedExitSpeed";
            this.effectLabelSpeedExitSpeed.Size = new System.Drawing.Size(29, 12);
            this.effectLabelSpeedExitSpeed.TabIndex = 10;
            this.effectLabelSpeedExitSpeed.Text = "速度";
            // 
            // effectLabelSpeedExit
            // 
            this.effectLabelSpeedExit.AutoSize = true;
            this.effectLabelSpeedExit.Location = new System.Drawing.Point(2, 96);
            this.effectLabelSpeedExit.Name = "effectLabelSpeedExit";
            this.effectLabelSpeedExit.Size = new System.Drawing.Size(29, 12);
            this.effectLabelSpeedExit.TabIndex = 9;
            this.effectLabelSpeedExit.Text = "退出";
            // 
            // counterAttributeBox
            // 
            this.counterAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.counterAttributeBox.Controls.Add(this.counterShowUnit);
            this.counterAttributeBox.Controls.Add(this.counterTargetHour);
            this.counterAttributeBox.Controls.Add(this.counterTargetDay);
            this.counterAttributeBox.Controls.Add(this.counterTargetMonth);
            this.counterAttributeBox.Controls.Add(this.counterTargetYear);
            this.counterAttributeBox.Controls.Add(this.CounterNewContentTextBox);
            this.counterAttributeBox.Controls.Add(this.counterNewSecondUnit);
            this.counterAttributeBox.Controls.Add(this.counterNewMinuteUnit);
            this.counterAttributeBox.Controls.Add(this.counterNewHourUnit);
            this.counterAttributeBox.Controls.Add(this.counterNewYearUnit);
            this.counterAttributeBox.Controls.Add(this.counterNewDayUnit);
            this.counterAttributeBox.Controls.Add(this.counternewlabel34);
            this.counterAttributeBox.Controls.Add(this.counterNewContentCheckBox);
            this.counterAttributeBox.Controls.Add(this.counterNewContentColorComboBox);
            this.counterAttributeBox.Controls.Add(this.counterNewColor);
            this.counterAttributeBox.Controls.Add(this.counterNewUnderline);
            this.counterAttributeBox.Controls.Add(this.counterNewItalic);
            this.counterAttributeBox.Controls.Add(this.counterNewBlod);
            this.counterAttributeBox.Controls.Add(this.counterNewSize);
            this.counterAttributeBox.Controls.Add(this.counterNewFont);
            this.counterAttributeBox.Controls.Add(this.counterNewLineModel);
            this.counterAttributeBox.Controls.Add(this.counterLabelStartTime);
            this.counterAttributeBox.Controls.Add(this.counterOptionYear);
            this.counterAttributeBox.Controls.Add(this.counterLabelTargetSecond);
            this.counterAttributeBox.Controls.Add(this.counterLabelCounterModel);
            this.counterAttributeBox.Controls.Add(this.counterLabelTargetMinute);
            this.counterAttributeBox.Controls.Add(this.counterTargetMinute);
            this.counterAttributeBox.Controls.Add(this.counterLabelElementsSetting);
            this.counterAttributeBox.Controls.Add(this.counterLabelTargetDay);
            this.counterAttributeBox.Controls.Add(this.counterLabelTargetMonth);
            this.counterAttributeBox.Controls.Add(this.counterLabelTargetYear);
            this.counterAttributeBox.Controls.Add(this.counterTypeDown);
            this.counterAttributeBox.Controls.Add(this.counterTypeUp);
            this.counterAttributeBox.Controls.Add(this.counterOptionSecond);
            this.counterAttributeBox.Controls.Add(this.counterOptionDay);
            this.counterAttributeBox.Controls.Add(this.counterLabelOption);
            this.counterAttributeBox.Controls.Add(this.counterOptionHour);
            this.counterAttributeBox.Controls.Add(this.counterOptionMinute);
            this.counterAttributeBox.Location = new System.Drawing.Point(105, 392);
            this.counterAttributeBox.Name = "counterAttributeBox";
            this.counterAttributeBox.Size = new System.Drawing.Size(70, 18);
            this.counterAttributeBox.TabIndex = 28;
            this.counterAttributeBox.Tag = "计时器属性";
            this.counterAttributeBox.Text = "计时器属性";
            this.counterAttributeBox.TextColor = System.Drawing.Color.Black;
            this.counterAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            // 
            // counterShowUnit
            // 
            this.counterShowUnit.AutoSize = true;
            this.counterShowUnit.Location = new System.Drawing.Point(327, 112);
            this.counterShowUnit.Name = "counterShowUnit";
            this.counterShowUnit.Size = new System.Drawing.Size(72, 16);
            this.counterShowUnit.TabIndex = 90;
            this.counterShowUnit.Text = "显示单位";
            this.counterShowUnit.UseVisualStyleBackColor = true;
            this.counterShowUnit.CheckedChanged += new System.EventHandler(this.counterShowUnit_CheckedChanged);
            // 
            // counterTargetHour
            // 
            this.counterTargetHour.Location = new System.Drawing.Point(360, 81);
            this.counterTargetHour.Name = "counterTargetHour";
            this.counterTargetHour.Size = new System.Drawing.Size(36, 21);
            this.counterTargetHour.TabIndex = 66;
            this.counterTargetHour.ValueChanged += new System.EventHandler(this.counterTargetHour_ValueChanged);
            // 
            // counterTargetDay
            // 
            this.counterTargetDay.Location = new System.Drawing.Point(288, 81);
            this.counterTargetDay.Name = "counterTargetDay";
            this.counterTargetDay.Size = new System.Drawing.Size(36, 21);
            this.counterTargetDay.TabIndex = 64;
            this.counterTargetDay.ValueChanged += new System.EventHandler(this.counterTargetDay_ValueChanged);
            // 
            // counterTargetMonth
            // 
            this.counterTargetMonth.Location = new System.Drawing.Point(200, 81);
            this.counterTargetMonth.Name = "counterTargetMonth";
            this.counterTargetMonth.Size = new System.Drawing.Size(36, 21);
            this.counterTargetMonth.TabIndex = 62;
            this.counterTargetMonth.ValueChanged += new System.EventHandler(this.counterTargetMonth_ValueChanged);
            // 
            // counterTargetYear
            // 
            this.counterTargetYear.Location = new System.Drawing.Point(99, 81);
            this.counterTargetYear.Name = "counterTargetYear";
            this.counterTargetYear.Size = new System.Drawing.Size(54, 21);
            this.counterTargetYear.TabIndex = 60;
            this.counterTargetYear.ValueChanged += new System.EventHandler(this.counterTargetYear_ValueChanged);
            // 
            // CounterNewContentTextBox
            // 
            this.CounterNewContentTextBox.Location = new System.Drawing.Point(70, 50);
            this.CounterNewContentTextBox.Name = "CounterNewContentTextBox";
            this.CounterNewContentTextBox.Size = new System.Drawing.Size(343, 21);
            this.CounterNewContentTextBox.TabIndex = 80;
            this.CounterNewContentTextBox.TextChanged += new System.EventHandler(this.CounterNewContentTextBox_TextChanged);
            // 
            // counterNewSecondUnit
            // 
            this.counterNewSecondUnit.FormattingEnabled = true;
            this.counterNewSecondUnit.Items.AddRange(new object[] {
            "秒",
            "秒钟",
            "S",
            "Second"});
            this.counterNewSecondUnit.Location = new System.Drawing.Point(404, 158);
            this.counterNewSecondUnit.Name = "counterNewSecondUnit";
            this.counterNewSecondUnit.Size = new System.Drawing.Size(55, 20);
            this.counterNewSecondUnit.TabIndex = 89;
            this.counterNewSecondUnit.SelectedIndexChanged += new System.EventHandler(this.counterNewSecondUnit_SelectedIndexChanged);
            // 
            // counterNewMinuteUnit
            // 
            this.counterNewMinuteUnit.FormattingEnabled = true;
            this.counterNewMinuteUnit.Items.AddRange(new object[] {
            "分",
            "分钟",
            "M",
            "Minute"});
            this.counterNewMinuteUnit.Location = new System.Drawing.Point(325, 158);
            this.counterNewMinuteUnit.Name = "counterNewMinuteUnit";
            this.counterNewMinuteUnit.Size = new System.Drawing.Size(55, 20);
            this.counterNewMinuteUnit.TabIndex = 88;
            this.counterNewMinuteUnit.SelectedIndexChanged += new System.EventHandler(this.counterNewMinuteUnit_SelectedIndexChanged);
            // 
            // counterNewHourUnit
            // 
            this.counterNewHourUnit.FormattingEnabled = true;
            this.counterNewHourUnit.Items.AddRange(new object[] {
            "时",
            "小时",
            "H",
            "Hour"});
            this.counterNewHourUnit.Location = new System.Drawing.Point(248, 159);
            this.counterNewHourUnit.Name = "counterNewHourUnit";
            this.counterNewHourUnit.Size = new System.Drawing.Size(55, 20);
            this.counterNewHourUnit.TabIndex = 87;
            this.counterNewHourUnit.SelectedIndexChanged += new System.EventHandler(this.counterNewHourUnit_SelectedIndexChanged);
            // 
            // counterNewYearUnit
            // 
            this.counterNewYearUnit.FormattingEnabled = true;
            this.counterNewYearUnit.Items.AddRange(new object[] {
            "年",
            "Y",
            "Year"});
            this.counterNewYearUnit.Location = new System.Drawing.Point(95, 159);
            this.counterNewYearUnit.Name = "counterNewYearUnit";
            this.counterNewYearUnit.Size = new System.Drawing.Size(55, 20);
            this.counterNewYearUnit.TabIndex = 86;
            this.counterNewYearUnit.SelectedIndexChanged += new System.EventHandler(this.counterNewYearUnit_SelectedIndexChanged);
            // 
            // counterNewDayUnit
            // 
            this.counterNewDayUnit.FormattingEnabled = true;
            this.counterNewDayUnit.Items.AddRange(new object[] {
            "天",
            "D",
            "Day"});
            this.counterNewDayUnit.Location = new System.Drawing.Point(172, 159);
            this.counterNewDayUnit.Name = "counterNewDayUnit";
            this.counterNewDayUnit.Size = new System.Drawing.Size(55, 20);
            this.counterNewDayUnit.TabIndex = 85;
            this.counterNewDayUnit.SelectedIndexChanged += new System.EventHandler(this.counterNewDayUnit_SelectedIndexChanged);
            // 
            // counternewlabel34
            // 
            this.counternewlabel34.Location = new System.Drawing.Point(10, 53);
            this.counternewlabel34.Name = "counternewlabel34";
            this.counternewlabel34.Size = new System.Drawing.Size(53, 26);
            this.counternewlabel34.TabIndex = 83;
            this.counternewlabel34.Text = "提示内容";
            // 
            // counterNewContentCheckBox
            // 
            this.counterNewContentCheckBox.AutoSize = true;
            this.counterNewContentCheckBox.Location = new System.Drawing.Point(483, 55);
            this.counterNewContentCheckBox.Name = "counterNewContentCheckBox";
            this.counterNewContentCheckBox.Size = new System.Drawing.Size(15, 14);
            this.counterNewContentCheckBox.TabIndex = 82;
            this.counterNewContentCheckBox.UseVisualStyleBackColor = true;
            this.counterNewContentCheckBox.CheckedChanged += new System.EventHandler(this.counterNewContentCheckBox_CheckedChanged);
            // 
            // counterNewContentColorComboBox
            // 
            this.counterNewContentColorComboBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.counterNewContentColorComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.counterNewContentColorComboBox.FormattingEnabled = true;
            this.counterNewContentColorComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.counterNewContentColorComboBox.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.counterNewContentColorComboBox.Location = new System.Drawing.Point(418, 50);
            this.counterNewContentColorComboBox.Name = "counterNewContentColorComboBox";
            this.counterNewContentColorComboBox.Size = new System.Drawing.Size(51, 22);
            this.counterNewContentColorComboBox.TabIndex = 81;
            this.counterNewContentColorComboBox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.counterNewContentColorComboBox.SelectedIndexChanged += new System.EventHandler(this.counterNewContentColorComboBox_SelectedIndexChanged);
            // 
            // counterNewColor
            // 
            this.counterNewColor.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.counterNewColor.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.counterNewColor.FormattingEnabled = true;
            this.counterNewColor.ImeMode = System.Windows.Forms.ImeMode.On;
            this.counterNewColor.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.counterNewColor.Location = new System.Drawing.Point(289, 21);
            this.counterNewColor.Name = "counterNewColor";
            this.counterNewColor.Size = new System.Drawing.Size(51, 22);
            this.counterNewColor.TabIndex = 79;
            this.counterNewColor.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.counterNewColor.SelectedIndexChanged += new System.EventHandler(this.counterNewColor_SelectedIndexChanged);
            // 
            // counterNewUnderline
            // 
            this.counterNewUnderline.BackColor = System.Drawing.Color.White;
            this.counterNewUnderline.Cursor = System.Windows.Forms.Cursors.Default;
            this.counterNewUnderline.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.5F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Underline))));
            this.counterNewUnderline.ForeColor = System.Drawing.Color.Black;
            this.counterNewUnderline.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.counterNewUnderline.Location = new System.Drawing.Point(266, 21);
            this.counterNewUnderline.Name = "counterNewUnderline";
            this.counterNewUnderline.Size = new System.Drawing.Size(21, 21);
            this.counterNewUnderline.TabIndex = 76;
            this.counterNewUnderline.Text = "U";
            this.counterNewUnderline.UseVisualStyleBackColor = false;
            this.counterNewUnderline.Click += new System.EventHandler(this.counterNewUnderline_Click);
            // 
            // counterNewItalic
            // 
            this.counterNewItalic.BackColor = System.Drawing.Color.White;
            this.counterNewItalic.Cursor = System.Windows.Forms.Cursors.Default;
            this.counterNewItalic.Font = new System.Drawing.Font("宋体", 10.5F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))));
            this.counterNewItalic.ForeColor = System.Drawing.Color.Black;
            this.counterNewItalic.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.counterNewItalic.Location = new System.Drawing.Point(245, 21);
            this.counterNewItalic.Name = "counterNewItalic";
            this.counterNewItalic.Size = new System.Drawing.Size(21, 21);
            this.counterNewItalic.TabIndex = 77;
            this.counterNewItalic.Text = "I";
            this.counterNewItalic.UseVisualStyleBackColor = false;
            this.counterNewItalic.Click += new System.EventHandler(this.counterNewItalic_Click);
            // 
            // counterNewBlod
            // 
            this.counterNewBlod.BackColor = System.Drawing.Color.White;
            this.counterNewBlod.Cursor = System.Windows.Forms.Cursors.Default;
            this.counterNewBlod.FlatAppearance.BorderColor = System.Drawing.Color.White;
            this.counterNewBlod.Font = new System.Drawing.Font("宋体", 10.5F, System.Drawing.FontStyle.Bold);
            this.counterNewBlod.ForeColor = System.Drawing.SystemColors.ControlText;
            this.counterNewBlod.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.counterNewBlod.Location = new System.Drawing.Point(224, 21);
            this.counterNewBlod.Name = "counterNewBlod";
            this.counterNewBlod.Size = new System.Drawing.Size(21, 21);
            this.counterNewBlod.TabIndex = 78;
            this.counterNewBlod.Text = "B";
            this.counterNewBlod.UseVisualStyleBackColor = false;
            this.counterNewBlod.Click += new System.EventHandler(this.counterNewBlod_Click);
            // 
            // counterNewSize
            // 
            this.counterNewSize.Cursor = System.Windows.Forms.Cursors.Default;
            this.counterNewSize.FormattingEnabled = true;
            this.counterNewSize.ImeMode = System.Windows.Forms.ImeMode.On;
            this.counterNewSize.Items.AddRange(new object[] {
            "8",
            "9",
            "10",
            "11",
            "12",
            "14",
            "16",
            "18",
            "20",
            "22",
            "24",
            "26",
            "28",
            "30",
            "32",
            "34",
            "36",
            "38",
            "40",
            "42",
            "45",
            "46",
            "48",
            "50",
            "52",
            "54",
            "56",
            "58",
            "60",
            "62",
            "64",
            "66",
            "68",
            "70",
            "72",
            "80",
            "90",
            "100",
            "110",
            "120",
            "130",
            "140",
            "150",
            "160",
            "170",
            "180",
            "190",
            "200"});
            this.counterNewSize.Location = new System.Drawing.Point(173, 22);
            this.counterNewSize.MaxLength = 5;
            this.counterNewSize.Name = "counterNewSize";
            this.counterNewSize.Size = new System.Drawing.Size(47, 20);
            this.counterNewSize.TabIndex = 74;
            this.counterNewSize.Text = "14";
            this.counterNewSize.SelectedIndexChanged += new System.EventHandler(this.counterNewSize_SelectedIndexChanged);
            // 
            // counterNewFont
            // 
            this.counterNewFont.Cursor = System.Windows.Forms.Cursors.Default;
            this.counterNewFont.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.counterNewFont.FormattingEnabled = true;
            this.counterNewFont.ImeMode = System.Windows.Forms.ImeMode.On;
            this.counterNewFont.Location = new System.Drawing.Point(72, 22);
            this.counterNewFont.Name = "counterNewFont";
            this.counterNewFont.Size = new System.Drawing.Size(98, 20);
            this.counterNewFont.TabIndex = 75;
            this.counterNewFont.SelectedIndexChanged += new System.EventHandler(this.counterNewFont_SelectedIndexChanged);
            // 
            // counterNewLineModel
            // 
            this.counterNewLineModel.Cursor = System.Windows.Forms.Cursors.Default;
            this.counterNewLineModel.FormattingEnabled = true;
            this.counterNewLineModel.ImeMode = System.Windows.Forms.ImeMode.On;
            this.counterNewLineModel.Items.AddRange(new object[] {
            "单行显示",
            "多行显示"});
            this.counterNewLineModel.Location = new System.Drawing.Point(351, 23);
            this.counterNewLineModel.MaxLength = 5;
            this.counterNewLineModel.Name = "counterNewLineModel";
            this.counterNewLineModel.Size = new System.Drawing.Size(120, 20);
            this.counterNewLineModel.TabIndex = 71;
            this.counterNewLineModel.SelectedIndexChanged += new System.EventHandler(this.counterNewLineModel_SelectedIndexChanged);
            // 
            // counterLabelStartTime
            // 
            this.counterLabelStartTime.Location = new System.Drawing.Point(9, 86);
            this.counterLabelStartTime.Name = "counterLabelStartTime";
            this.counterLabelStartTime.Size = new System.Drawing.Size(83, 24);
            this.counterLabelStartTime.TabIndex = 1;
            this.counterLabelStartTime.Text = "目标/起始时间";
            // 
            // counterOptionYear
            // 
            this.counterOptionYear.AutoSize = true;
            this.counterOptionYear.Location = new System.Drawing.Point(97, 137);
            this.counterOptionYear.Name = "counterOptionYear";
            this.counterOptionYear.Size = new System.Drawing.Size(36, 16);
            this.counterOptionYear.TabIndex = 70;
            this.counterOptionYear.Text = "年";
            this.counterOptionYear.UseVisualStyleBackColor = true;
            this.counterOptionYear.CheckedChanged += new System.EventHandler(this.counterOptionYear_CheckedChanged);
            // 
            // counterLabelTargetSecond
            // 
            this.counterLabelTargetSecond.Location = new System.Drawing.Point(471, 85);
            this.counterLabelTargetSecond.Name = "counterLabelTargetSecond";
            this.counterLabelTargetSecond.Size = new System.Drawing.Size(47, 20);
            this.counterLabelTargetSecond.TabIndex = 69;
            this.counterLabelTargetSecond.Text = "分";
            // 
            // counterLabelCounterModel
            // 
            this.counterLabelCounterModel.Location = new System.Drawing.Point(10, 113);
            this.counterLabelCounterModel.Name = "counterLabelCounterModel";
            this.counterLabelCounterModel.Size = new System.Drawing.Size(83, 12);
            this.counterLabelCounterModel.TabIndex = 2;
            this.counterLabelCounterModel.Text = "计时模式";
            // 
            // counterLabelTargetMinute
            // 
            this.counterLabelTargetMinute.Location = new System.Drawing.Point(398, 84);
            this.counterLabelTargetMinute.Name = "counterLabelTargetMinute";
            this.counterLabelTargetMinute.Size = new System.Drawing.Size(35, 20);
            this.counterLabelTargetMinute.TabIndex = 68;
            this.counterLabelTargetMinute.Text = "时";
            // 
            // counterTargetMinute
            // 
            this.counterTargetMinute.Location = new System.Drawing.Point(434, 81);
            this.counterTargetMinute.Name = "counterTargetMinute";
            this.counterTargetMinute.Size = new System.Drawing.Size(36, 21);
            this.counterTargetMinute.TabIndex = 67;
            this.counterTargetMinute.ValueChanged += new System.EventHandler(this.counterTargetMinute_ValueChanged);
            // 
            // counterLabelElementsSetting
            // 
            this.counterLabelElementsSetting.Location = new System.Drawing.Point(9, 26);
            this.counterLabelElementsSetting.Name = "counterLabelElementsSetting";
            this.counterLabelElementsSetting.Size = new System.Drawing.Size(84, 26);
            this.counterLabelElementsSetting.TabIndex = 4;
            this.counterLabelElementsSetting.Text = "内容设置";
            // 
            // counterLabelTargetDay
            // 
            this.counterLabelTargetDay.Location = new System.Drawing.Point(324, 84);
            this.counterLabelTargetDay.Name = "counterLabelTargetDay";
            this.counterLabelTargetDay.Size = new System.Drawing.Size(35, 20);
            this.counterLabelTargetDay.TabIndex = 65;
            this.counterLabelTargetDay.Text = "日";
            // 
            // counterLabelTargetMonth
            // 
            this.counterLabelTargetMonth.Location = new System.Drawing.Point(239, 84);
            this.counterLabelTargetMonth.Name = "counterLabelTargetMonth";
            this.counterLabelTargetMonth.Size = new System.Drawing.Size(45, 12);
            this.counterLabelTargetMonth.TabIndex = 63;
            this.counterLabelTargetMonth.Text = "月";
            // 
            // counterLabelTargetYear
            // 
            this.counterLabelTargetYear.Location = new System.Drawing.Point(159, 86);
            this.counterLabelTargetYear.Name = "counterLabelTargetYear";
            this.counterLabelTargetYear.Size = new System.Drawing.Size(39, 12);
            this.counterLabelTargetYear.TabIndex = 61;
            this.counterLabelTargetYear.Text = "年";
            // 
            // counterTypeDown
            // 
            this.counterTypeDown.AutoSize = true;
            this.counterTypeDown.Location = new System.Drawing.Point(215, 111);
            this.counterTypeDown.Name = "counterTypeDown";
            this.counterTypeDown.Size = new System.Drawing.Size(59, 16);
            this.counterTypeDown.TabIndex = 59;
            this.counterTypeDown.TabStop = true;
            this.counterTypeDown.Text = "倒计时";
            this.counterTypeDown.UseVisualStyleBackColor = true;
            this.counterTypeDown.CheckedChanged += new System.EventHandler(this.counterTypeDown_CheckedChanged);
            // 
            // counterTypeUp
            // 
            this.counterTypeUp.AutoSize = true;
            this.counterTypeUp.Location = new System.Drawing.Point(103, 112);
            this.counterTypeUp.Name = "counterTypeUp";
            this.counterTypeUp.Size = new System.Drawing.Size(59, 16);
            this.counterTypeUp.TabIndex = 58;
            this.counterTypeUp.TabStop = true;
            this.counterTypeUp.Text = "正计时";
            this.counterTypeUp.UseVisualStyleBackColor = true;
            this.counterTypeUp.CheckedChanged += new System.EventHandler(this.counterTypeUp_CheckedChanged);
            // 
            // counterOptionSecond
            // 
            this.counterOptionSecond.AutoSize = true;
            this.counterOptionSecond.Location = new System.Drawing.Point(404, 136);
            this.counterOptionSecond.Name = "counterOptionSecond";
            this.counterOptionSecond.Size = new System.Drawing.Size(36, 16);
            this.counterOptionSecond.TabIndex = 56;
            this.counterOptionSecond.Text = "秒";
            this.counterOptionSecond.UseVisualStyleBackColor = true;
            this.counterOptionSecond.CheckedChanged += new System.EventHandler(this.counterOptionSecond_CheckedChanged);
            // 
            // counterOptionDay
            // 
            this.counterOptionDay.AutoSize = true;
            this.counterOptionDay.Location = new System.Drawing.Point(174, 137);
            this.counterOptionDay.Name = "counterOptionDay";
            this.counterOptionDay.Size = new System.Drawing.Size(36, 16);
            this.counterOptionDay.TabIndex = 52;
            this.counterOptionDay.Text = "天";
            this.counterOptionDay.UseVisualStyleBackColor = true;
            this.counterOptionDay.CheckedChanged += new System.EventHandler(this.counterOptionDay_CheckedChanged);
            // 
            // counterLabelOption
            // 
            this.counterLabelOption.Location = new System.Drawing.Point(10, 139);
            this.counterLabelOption.Name = "counterLabelOption";
            this.counterLabelOption.Size = new System.Drawing.Size(82, 25);
            this.counterLabelOption.TabIndex = 55;
            this.counterLabelOption.Text = "显示选项:";
            // 
            // counterOptionHour
            // 
            this.counterOptionHour.AutoSize = true;
            this.counterOptionHour.Location = new System.Drawing.Point(248, 136);
            this.counterOptionHour.Name = "counterOptionHour";
            this.counterOptionHour.Size = new System.Drawing.Size(36, 16);
            this.counterOptionHour.TabIndex = 53;
            this.counterOptionHour.Text = "时";
            this.counterOptionHour.UseVisualStyleBackColor = true;
            this.counterOptionHour.CheckedChanged += new System.EventHandler(this.counterOptionHour_CheckedChanged);
            // 
            // counterOptionMinute
            // 
            this.counterOptionMinute.AutoSize = true;
            this.counterOptionMinute.Location = new System.Drawing.Point(327, 136);
            this.counterOptionMinute.Name = "counterOptionMinute";
            this.counterOptionMinute.Size = new System.Drawing.Size(36, 16);
            this.counterOptionMinute.TabIndex = 54;
            this.counterOptionMinute.Text = "分";
            this.counterOptionMinute.UseVisualStyleBackColor = true;
            this.counterOptionMinute.CheckedChanged += new System.EventHandler(this.counterOptionMinute_CheckedChanged);
            // 
            // animationAttributeBox
            // 
            this.animationAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.animationAttributeBox.Controls.Add(this.animationEditor1);
            this.animationAttributeBox.Location = new System.Drawing.Point(21, 393);
            this.animationAttributeBox.Name = "animationAttributeBox";
            this.animationAttributeBox.Size = new System.Drawing.Size(69, 15);
            this.animationAttributeBox.TabIndex = 33;
            this.animationAttributeBox.Tag = "动画属性";
            this.animationAttributeBox.Text = "动画属性";
            this.animationAttributeBox.TextColor = System.Drawing.Color.Black;
            this.animationAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // animationEditor1
            // 
            this.animationEditor1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.animationEditor1.BackColor = System.Drawing.Color.Transparent;
            this.animationEditor1.Location = new System.Drawing.Point(10, 21);
            this.animationEditor1.Name = "animationEditor1";
            this.animationEditor1.Size = new System.Drawing.Size(53, 0);
            this.animationEditor1.TabIndex = 0;
            // 
            // animationPreviewZhGroupBox
            // 
            this.animationPreviewZhGroupBox.Location = new System.Drawing.Point(631, 565);
            this.animationPreviewZhGroupBox.Name = "animationPreviewZhGroupBox";
            this.animationPreviewZhGroupBox.Size = new System.Drawing.Size(74, 23);
            this.animationPreviewZhGroupBox.TabIndex = 4;
            this.animationPreviewZhGroupBox.Tag = "动画预览";
            this.animationPreviewZhGroupBox.Text = "动画预览";
            this.animationPreviewZhGroupBox.TextColor = System.Drawing.Color.Black;
            this.animationPreviewZhGroupBox.TextFont = new System.Drawing.Font("宋体", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // temperatureAttributeBox
            // 
            this.temperatureAttributeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.temperatureAttributeBox.Controls.Add(this.temperatureDegreeUnitComboBox);
            this.temperatureAttributeBox.Controls.Add(this.label_TemperatuUnit);
            this.temperatureAttributeBox.Controls.Add(this.temperatureContentTextBox);
            this.temperatureAttributeBox.Controls.Add(this.temperatureFontComboBox);
            this.temperatureAttributeBox.Controls.Add(this.temperatureLineModelComboBox);
            this.temperatureAttributeBox.Controls.Add(this.temperatureAlarmOutput);
            this.temperatureAttributeBox.Controls.Add(this.temperatureAlarmType);
            this.temperatureAttributeBox.Controls.Add(this.temperatureMinDegreeNumericUpDown);
            this.temperatureAttributeBox.Controls.Add(this.temperatureMaxDegreeNumericUpDown);
            this.temperatureAttributeBox.Controls.Add(this.temperatureIsUseContentCheckBox);
            this.temperatureAttributeBox.Controls.Add(this.temperaturelabel13);
            this.temperatureAttributeBox.Controls.Add(this.temperatureColorComboBox);
            this.temperatureAttributeBox.Controls.Add(this.temperatureUnderline);
            this.temperatureAttributeBox.Controls.Add(this.temperatureItalic);
            this.temperatureAttributeBox.Controls.Add(this.temperatureBold);
            this.temperatureAttributeBox.Controls.Add(this.temperatureSizeComboBox);
            this.temperatureAttributeBox.Controls.Add(this.temperaturelabel6);
            this.temperatureAttributeBox.Controls.Add(this.temperaturelabel65);
            this.temperatureAttributeBox.Controls.Add(this.temperaturelabel66);
            this.temperatureAttributeBox.Controls.Add(this.temperaturelabel61);
            this.temperatureAttributeBox.Controls.Add(this.temperaturelabel62);
            this.temperatureAttributeBox.Location = new System.Drawing.Point(21, 506);
            this.temperatureAttributeBox.Name = "temperatureAttributeBox";
            this.temperatureAttributeBox.Size = new System.Drawing.Size(69, 17);
            this.temperatureAttributeBox.TabIndex = 28;
            this.temperatureAttributeBox.Tag = "温度属性";
            this.temperatureAttributeBox.Text = "温度属性";
            this.temperatureAttributeBox.TextColor = System.Drawing.Color.Black;
            this.temperatureAttributeBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // temperatureDegreeUnitComboBox
            // 
            this.temperatureDegreeUnitComboBox.FormattingEnabled = true;
            this.temperatureDegreeUnitComboBox.Items.AddRange(new object[] {
            "℃",
            "度",
            "°"});
            this.temperatureDegreeUnitComboBox.Location = new System.Drawing.Point(89, 87);
            this.temperatureDegreeUnitComboBox.Name = "temperatureDegreeUnitComboBox";
            this.temperatureDegreeUnitComboBox.Size = new System.Drawing.Size(97, 20);
            this.temperatureDegreeUnitComboBox.TabIndex = 91;
            this.temperatureDegreeUnitComboBox.SelectedIndexChanged += new System.EventHandler(this.temperatureDegreeUnitComboBox_SelectedIndexChanged);
            // 
            // label_TemperatuUnit
            // 
            this.label_TemperatuUnit.Location = new System.Drawing.Point(17, 90);
            this.label_TemperatuUnit.Name = "label_TemperatuUnit";
            this.label_TemperatuUnit.Size = new System.Drawing.Size(84, 26);
            this.label_TemperatuUnit.TabIndex = 92;
            this.label_TemperatuUnit.Text = "温度单位";
            // 
            // temperatureContentTextBox
            // 
            this.temperatureContentTextBox.Location = new System.Drawing.Point(88, 54);
            this.temperatureContentTextBox.Name = "temperatureContentTextBox";
            this.temperatureContentTextBox.Size = new System.Drawing.Size(381, 21);
            this.temperatureContentTextBox.TabIndex = 88;
            this.temperatureContentTextBox.TextChanged += new System.EventHandler(this.temperatureContentTextBox_TextChanged);
            // 
            // temperatureFontComboBox
            // 
            this.temperatureFontComboBox.Cursor = System.Windows.Forms.Cursors.Default;
            this.temperatureFontComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.temperatureFontComboBox.FormattingEnabled = true;
            this.temperatureFontComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.temperatureFontComboBox.Location = new System.Drawing.Point(88, 22);
            this.temperatureFontComboBox.Name = "temperatureFontComboBox";
            this.temperatureFontComboBox.Size = new System.Drawing.Size(98, 20);
            this.temperatureFontComboBox.TabIndex = 83;
            this.temperatureFontComboBox.SelectedIndexChanged += new System.EventHandler(this.temperatureFontComboBox_SelectedIndexChanged);
            // 
            // temperatureLineModelComboBox
            // 
            this.temperatureLineModelComboBox.Cursor = System.Windows.Forms.Cursors.Default;
            this.temperatureLineModelComboBox.FormattingEnabled = true;
            this.temperatureLineModelComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.temperatureLineModelComboBox.Items.AddRange(new object[] {
            "单行显示",
            "多行显示"});
            this.temperatureLineModelComboBox.Location = new System.Drawing.Point(374, 23);
            this.temperatureLineModelComboBox.MaxLength = 5;
            this.temperatureLineModelComboBox.Name = "temperatureLineModelComboBox";
            this.temperatureLineModelComboBox.Size = new System.Drawing.Size(95, 20);
            this.temperatureLineModelComboBox.TabIndex = 81;
            this.temperatureLineModelComboBox.SelectedIndexChanged += new System.EventHandler(this.temperatureLineModelComboBox_SelectedIndexChanged);
            // 
            // temperatureAlarmOutput
            // 
            this.temperatureAlarmOutput.Enabled = false;
            this.temperatureAlarmOutput.FormattingEnabled = true;
            this.temperatureAlarmOutput.Items.AddRange(new object[] {
            "无输出",
            "高电平",
            "低电平"});
            this.temperatureAlarmOutput.Location = new System.Drawing.Point(266, 147);
            this.temperatureAlarmOutput.Name = "temperatureAlarmOutput";
            this.temperatureAlarmOutput.Size = new System.Drawing.Size(87, 20);
            this.temperatureAlarmOutput.TabIndex = 32;
            this.temperatureAlarmOutput.Visible = false;
            this.temperatureAlarmOutput.SelectedIndexChanged += new System.EventHandler(this.temperatureAlarmOutput_SelectedIndexChanged);
            // 
            // temperatureAlarmType
            // 
            this.temperatureAlarmType.Enabled = false;
            this.temperatureAlarmType.FormattingEnabled = true;
            this.temperatureAlarmType.Items.AddRange(new object[] {
            "变色",
            "闪烁"});
            this.temperatureAlarmType.Location = new System.Drawing.Point(90, 145);
            this.temperatureAlarmType.Name = "temperatureAlarmType";
            this.temperatureAlarmType.Size = new System.Drawing.Size(87, 20);
            this.temperatureAlarmType.TabIndex = 30;
            this.temperatureAlarmType.Visible = false;
            this.temperatureAlarmType.SelectedIndexChanged += new System.EventHandler(this.temperatureAlarmType_SelectedIndexChanged);
            // 
            // temperatureMinDegreeNumericUpDown
            // 
            this.temperatureMinDegreeNumericUpDown.Enabled = false;
            this.temperatureMinDegreeNumericUpDown.Location = new System.Drawing.Point(266, 120);
            this.temperatureMinDegreeNumericUpDown.Minimum = new decimal(new int[] {
            100,
            0,
            0,
            -2147483648});
            this.temperatureMinDegreeNumericUpDown.Name = "temperatureMinDegreeNumericUpDown";
            this.temperatureMinDegreeNumericUpDown.Size = new System.Drawing.Size(87, 21);
            this.temperatureMinDegreeNumericUpDown.TabIndex = 26;
            this.temperatureMinDegreeNumericUpDown.Visible = false;
            this.temperatureMinDegreeNumericUpDown.Click += new System.EventHandler(this.temperatureMinDegreeNumericUpDown_Click);
            // 
            // temperatureMaxDegreeNumericUpDown
            // 
            this.temperatureMaxDegreeNumericUpDown.Enabled = false;
            this.temperatureMaxDegreeNumericUpDown.Location = new System.Drawing.Point(90, 118);
            this.temperatureMaxDegreeNumericUpDown.Minimum = new decimal(new int[] {
            100,
            0,
            0,
            -2147483648});
            this.temperatureMaxDegreeNumericUpDown.Name = "temperatureMaxDegreeNumericUpDown";
            this.temperatureMaxDegreeNumericUpDown.Size = new System.Drawing.Size(87, 21);
            this.temperatureMaxDegreeNumericUpDown.TabIndex = 24;
            this.temperatureMaxDegreeNumericUpDown.Visible = false;
            this.temperatureMaxDegreeNumericUpDown.Click += new System.EventHandler(this.temperatureMaxDegreeNumericUpDown_Click);
            // 
            // temperatureIsUseContentCheckBox
            // 
            this.temperatureIsUseContentCheckBox.AutoSize = true;
            this.temperatureIsUseContentCheckBox.Location = new System.Drawing.Point(476, 58);
            this.temperatureIsUseContentCheckBox.Name = "temperatureIsUseContentCheckBox";
            this.temperatureIsUseContentCheckBox.Size = new System.Drawing.Size(15, 14);
            this.temperatureIsUseContentCheckBox.TabIndex = 90;
            this.temperatureIsUseContentCheckBox.UseVisualStyleBackColor = true;
            this.temperatureIsUseContentCheckBox.CheckedChanged += new System.EventHandler(this.temperatureIsUseContentCheckBox_CheckedChanged);
            // 
            // temperaturelabel13
            // 
            this.temperaturelabel13.Location = new System.Drawing.Point(16, 58);
            this.temperaturelabel13.Name = "temperaturelabel13";
            this.temperaturelabel13.Size = new System.Drawing.Size(84, 26);
            this.temperaturelabel13.TabIndex = 89;
            this.temperaturelabel13.Text = "提示内容";
            // 
            // temperatureColorComboBox
            // 
            this.temperatureColorComboBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;
            this.temperatureColorComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.temperatureColorComboBox.FormattingEnabled = true;
            this.temperatureColorComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.temperatureColorComboBox.Items.AddRange(new object[] {
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--",
            "--"});
            this.temperatureColorComboBox.Location = new System.Drawing.Point(305, 21);
            this.temperatureColorComboBox.Name = "temperatureColorComboBox";
            this.temperatureColorComboBox.Size = new System.Drawing.Size(51, 22);
            this.temperatureColorComboBox.TabIndex = 87;
            this.temperatureColorComboBox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.clockNewDateColorComboBox_DrawItem);
            this.temperatureColorComboBox.SelectedIndexChanged += new System.EventHandler(this.temperatureColorComboBox_SelectedIndexChanged);
            // 
            // temperatureUnderline
            // 
            this.temperatureUnderline.BackColor = System.Drawing.Color.White;
            this.temperatureUnderline.Cursor = System.Windows.Forms.Cursors.Default;
            this.temperatureUnderline.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.5F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Underline))));
            this.temperatureUnderline.ForeColor = System.Drawing.Color.Black;
            this.temperatureUnderline.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.temperatureUnderline.Location = new System.Drawing.Point(282, 21);
            this.temperatureUnderline.Name = "temperatureUnderline";
            this.temperatureUnderline.Size = new System.Drawing.Size(21, 21);
            this.temperatureUnderline.TabIndex = 84;
            this.temperatureUnderline.Text = "U";
            this.temperatureUnderline.UseVisualStyleBackColor = false;
            this.temperatureUnderline.Click += new System.EventHandler(this.temperatureUnderline_Click);
            // 
            // temperatureItalic
            // 
            this.temperatureItalic.BackColor = System.Drawing.Color.White;
            this.temperatureItalic.Cursor = System.Windows.Forms.Cursors.Default;
            this.temperatureItalic.Font = new System.Drawing.Font("宋体", 10.5F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))));
            this.temperatureItalic.ForeColor = System.Drawing.Color.Black;
            this.temperatureItalic.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.temperatureItalic.Location = new System.Drawing.Point(261, 21);
            this.temperatureItalic.Name = "temperatureItalic";
            this.temperatureItalic.Size = new System.Drawing.Size(21, 21);
            this.temperatureItalic.TabIndex = 85;
            this.temperatureItalic.Text = "I";
            this.temperatureItalic.UseVisualStyleBackColor = false;
            this.temperatureItalic.Click += new System.EventHandler(this.temperatureItalic_Click);
            // 
            // temperatureBold
            // 
            this.temperatureBold.BackColor = System.Drawing.Color.White;
            this.temperatureBold.Cursor = System.Windows.Forms.Cursors.Default;
            this.temperatureBold.FlatAppearance.BorderColor = System.Drawing.Color.White;
            this.temperatureBold.Font = new System.Drawing.Font("宋体", 10.5F, System.Drawing.FontStyle.Bold);
            this.temperatureBold.ForeColor = System.Drawing.SystemColors.ControlText;
            this.temperatureBold.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.temperatureBold.Location = new System.Drawing.Point(240, 21);
            this.temperatureBold.Name = "temperatureBold";
            this.temperatureBold.Size = new System.Drawing.Size(21, 21);
            this.temperatureBold.TabIndex = 86;
            this.temperatureBold.Text = "B";
            this.temperatureBold.UseVisualStyleBackColor = false;
            this.temperatureBold.Click += new System.EventHandler(this.temperatureBold_Click);
            // 
            // temperatureSizeComboBox
            // 
            this.temperatureSizeComboBox.Cursor = System.Windows.Forms.Cursors.Default;
            this.temperatureSizeComboBox.FormattingEnabled = true;
            this.temperatureSizeComboBox.ImeMode = System.Windows.Forms.ImeMode.On;
            this.temperatureSizeComboBox.Items.AddRange(new object[] {
            "8",
            "9",
            "10",
            "11",
            "12",
            "14",
            "16",
            "18",
            "20",
            "22",
            "24",
            "26",
            "28",
            "30",
            "32",
            "34",
            "36",
            "38",
            "40",
            "42",
            "45",
            "46",
            "48",
            "50",
            "52",
            "54",
            "56",
            "58",
            "60",
            "62",
            "64",
            "66",
            "68",
            "70",
            "72",
            "80",
            "90",
            "100",
            "110",
            "120",
            "130",
            "140",
            "150",
            "160",
            "170",
            "180",
            "190",
            "200"});
            this.temperatureSizeComboBox.Location = new System.Drawing.Point(189, 22);
            this.temperatureSizeComboBox.MaxLength = 5;
            this.temperatureSizeComboBox.Name = "temperatureSizeComboBox";
            this.temperatureSizeComboBox.Size = new System.Drawing.Size(47, 20);
            this.temperatureSizeComboBox.TabIndex = 82;
            this.temperatureSizeComboBox.Text = "14";
            this.temperatureSizeComboBox.SelectedIndexChanged += new System.EventHandler(this.temperatureSizeComboBox_SelectedIndexChanged);
            // 
            // temperaturelabel6
            // 
            this.temperaturelabel6.Location = new System.Drawing.Point(16, 25);
            this.temperaturelabel6.Name = "temperaturelabel6";
            this.temperaturelabel6.Size = new System.Drawing.Size(84, 26);
            this.temperaturelabel6.TabIndex = 80;
            this.temperaturelabel6.Text = "内容设置";
            // 
            // temperaturelabel65
            // 
            this.temperaturelabel65.AutoSize = true;
            this.temperaturelabel65.Enabled = false;
            this.temperaturelabel65.Location = new System.Drawing.Point(183, 150);
            this.temperaturelabel65.Name = "temperaturelabel65";
            this.temperaturelabel65.Size = new System.Drawing.Size(53, 12);
            this.temperaturelabel65.TabIndex = 31;
            this.temperaturelabel65.Text = "报警输出";
            this.temperaturelabel65.Visible = false;
            // 
            // temperaturelabel66
            // 
            this.temperaturelabel66.AutoSize = true;
            this.temperaturelabel66.Enabled = false;
            this.temperaturelabel66.Location = new System.Drawing.Point(19, 149);
            this.temperaturelabel66.Name = "temperaturelabel66";
            this.temperaturelabel66.Size = new System.Drawing.Size(53, 12);
            this.temperaturelabel66.TabIndex = 29;
            this.temperaturelabel66.Text = "报警方式";
            this.temperaturelabel66.Visible = false;
            // 
            // temperaturelabel61
            // 
            this.temperaturelabel61.AutoSize = true;
            this.temperaturelabel61.Enabled = false;
            this.temperaturelabel61.Location = new System.Drawing.Point(19, 121);
            this.temperaturelabel61.Name = "temperaturelabel61";
            this.temperaturelabel61.Size = new System.Drawing.Size(65, 12);
            this.temperaturelabel61.TabIndex = 21;
            this.temperaturelabel61.Text = "高温预警值";
            this.temperaturelabel61.Visible = false;
            // 
            // temperaturelabel62
            // 
            this.temperaturelabel62.AutoSize = true;
            this.temperaturelabel62.Enabled = false;
            this.temperaturelabel62.Location = new System.Drawing.Point(181, 124);
            this.temperaturelabel62.Name = "temperaturelabel62";
            this.temperaturelabel62.Size = new System.Drawing.Size(65, 12);
            this.temperaturelabel62.TabIndex = 25;
            this.temperaturelabel62.Text = "低温预警值";
            this.temperaturelabel62.Visible = false;
            // 
            // itemBackgroundSettingGroupBox
            // 
            this.itemBackgroundSettingGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.itemBackgroundSettingGroupBox.Controls.Add(this.itemBackgroundEffectComboBox);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.itemBackgroundSizeModel);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.itemBackgroundGradation);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.itemBackgroundSpeed);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.itemBackgroundUseGif);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.label26);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.label23);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.itemBackgroundIsUse);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.itemBackgroundSelectButton);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.label22);
            this.itemBackgroundSettingGroupBox.Controls.Add(this.label21);
            this.itemBackgroundSettingGroupBox.Location = new System.Drawing.Point(790, 365);
            this.itemBackgroundSettingGroupBox.Name = "itemBackgroundSettingGroupBox";
            this.itemBackgroundSettingGroupBox.Size = new System.Drawing.Size(85, 20);
            this.itemBackgroundSettingGroupBox.TabIndex = 23;
            this.itemBackgroundSettingGroupBox.Tag = "节目背景设置";
            this.itemBackgroundSettingGroupBox.Text = "节目背景设置";
            this.itemBackgroundSettingGroupBox.TextColor = System.Drawing.Color.Black;
            this.itemBackgroundSettingGroupBox.TextFont = new System.Drawing.Font("微软雅黑", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            this.itemBackgroundSettingGroupBox.Paint += new System.Windows.Forms.PaintEventHandler(this.itemBackgroundSettingGroupBox_Paint);
            // 
            // itemBackgroundEffectComboBox
            // 
            this.itemBackgroundEffectComboBox.FormattingEnabled = true;
            this.itemBackgroundEffectComboBox.Location = new System.Drawing.Point(42, 56);
            this.itemBackgroundEffectComboBox.Name = "itemBackgroundEffectComboBox";
            this.itemBackgroundEffectComboBox.Size = new System.Drawing.Size(81, 20);
            this.itemBackgroundEffectComboBox.TabIndex = 10;
            this.itemBackgroundEffectComboBox.Click += new System.EventHandler(this.itemBackgroundEffectComboBox_Click);
            // 
            // itemBackgroundSizeModel
            // 
            this.itemBackgroundSizeModel.FormattingEnabled = true;
            this.itemBackgroundSizeModel.Items.AddRange(new object[] {
            "居中",
            "平铺",
            "拉伸",
            "自适应"});
            this.itemBackgroundSizeModel.Location = new System.Drawing.Point(181, 168);
            this.itemBackgroundSizeModel.Name = "itemBackgroundSizeModel";
            this.itemBackgroundSizeModel.Size = new System.Drawing.Size(81, 20);
            this.itemBackgroundSizeModel.TabIndex = 8;
            this.itemBackgroundSizeModel.Visible = false;
            // 
            // itemBackgroundGradation
            // 
            this.itemBackgroundGradation.FormattingEnabled = true;
            this.itemBackgroundGradation.Items.AddRange(new object[] {
            "无灰度",
            "4级灰度",
            "8级灰度",
            "16级灰度"});
            this.itemBackgroundGradation.Location = new System.Drawing.Point(181, 152);
            this.itemBackgroundGradation.Name = "itemBackgroundGradation";
            this.itemBackgroundGradation.Size = new System.Drawing.Size(81, 20);
            this.itemBackgroundGradation.TabIndex = 3;
            this.itemBackgroundGradation.Text = "无灰度";
            this.itemBackgroundGradation.Visible = false;
            // 
            // itemBackgroundSpeed
            // 
            this.itemBackgroundSpeed.FormattingEnabled = true;
            this.itemBackgroundSpeed.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30"});
            this.itemBackgroundSpeed.Location = new System.Drawing.Point(42, 93);
            this.itemBackgroundSpeed.Name = "itemBackgroundSpeed";
            this.itemBackgroundSpeed.Size = new System.Drawing.Size(81, 20);
            this.itemBackgroundSpeed.TabIndex = 5;
            this.itemBackgroundSpeed.SelectedIndexChanged += new System.EventHandler(this.itemBackgroundSpeed_SelectedIndexChanged);
            // 
            // itemBackgroundUseGif
            // 
            this.itemBackgroundUseGif.AutoSize = true;
            this.itemBackgroundUseGif.Location = new System.Drawing.Point(11, 130);
            this.itemBackgroundUseGif.Name = "itemBackgroundUseGif";
            this.itemBackgroundUseGif.Size = new System.Drawing.Size(15, 14);
            this.itemBackgroundUseGif.TabIndex = 12;
            this.itemBackgroundUseGif.UseVisualStyleBackColor = true;
            this.itemBackgroundUseGif.CheckedChanged += new System.EventHandler(this.itemBackgroundUseGif_CheckedChanged);
            // 
            // label26
            // 
            this.label26.AutoSize = true;
            this.label26.Location = new System.Drawing.Point(3, 59);
            this.label26.Name = "label26";
            this.label26.Size = new System.Drawing.Size(29, 12);
            this.label26.TabIndex = 11;
            this.label26.Text = "效果";
            // 
            // label23
            // 
            this.label23.AutoSize = true;
            this.label23.Location = new System.Drawing.Point(141, 173);
            this.label23.Name = "label23";
            this.label23.Size = new System.Drawing.Size(29, 12);
            this.label23.TabIndex = 9;
            this.label23.Text = "尺寸";
            this.label23.Visible = false;
            // 
            // itemBackgroundIsUse
            // 
            this.itemBackgroundIsUse.AutoSize = true;
            this.itemBackgroundIsUse.Location = new System.Drawing.Point(9, 32);
            this.itemBackgroundIsUse.Name = "itemBackgroundIsUse";
            this.itemBackgroundIsUse.Size = new System.Drawing.Size(72, 16);
            this.itemBackgroundIsUse.TabIndex = 2;
            this.itemBackgroundIsUse.Text = "使用背景";
            this.itemBackgroundIsUse.UseVisualStyleBackColor = true;
            this.itemBackgroundIsUse.CheckedChanged += new System.EventHandler(this.itemUseBackground_CheckedChanged);
            // 
            // itemBackgroundSelectButton
            // 
            this.itemBackgroundSelectButton.Location = new System.Drawing.Point(42, 126);
            this.itemBackgroundSelectButton.Name = "itemBackgroundSelectButton";
            this.itemBackgroundSelectButton.Size = new System.Drawing.Size(83, 23);
            this.itemBackgroundSelectButton.TabIndex = 7;
            this.itemBackgroundSelectButton.Text = "自定义背景";
            this.itemBackgroundSelectButton.UseVisualStyleBackColor = true;
            this.itemBackgroundSelectButton.Click += new System.EventHandler(this.itemSelectBackgroundButton_Click);
            // 
            // label22
            // 
            this.label22.AutoSize = true;
            this.label22.Location = new System.Drawing.Point(141, 158);
            this.label22.Name = "label22";
            this.label22.Size = new System.Drawing.Size(29, 12);
            this.label22.TabIndex = 4;
            this.label22.Text = "灰度";
            this.label22.Visible = false;
            // 
            // label21
            // 
            this.label21.AutoSize = true;
            this.label21.Location = new System.Drawing.Point(3, 96);
            this.label21.Name = "label21";
            this.label21.Size = new System.Drawing.Size(29, 12);
            this.label21.TabIndex = 6;
            this.label21.Text = "速度";
            // 
            // subareaAttribute
            // 
            this.subareaAttribute.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.subareaAttribute.Controls.Add(this.subareaLabelHeight);
            this.subareaAttribute.Controls.Add(this.subareaLabel21);
            this.subareaAttribute.Controls.Add(this.subareaLabelWidth);
            this.subareaAttribute.Controls.Add(this.subareaTitle);
            this.subareaAttribute.Controls.Add(this.subareaLabelY);
            this.subareaAttribute.Controls.Add(this.subareaLocaltionX);
            this.subareaAttribute.Controls.Add(this.subareaLabelX);
            this.subareaAttribute.Controls.Add(this.subareaSizeWidth);
            this.subareaAttribute.Controls.Add(this.subareaSizeHeight);
            this.subareaAttribute.Controls.Add(this.subareaLocaltionY);
            this.subareaAttribute.Location = new System.Drawing.Point(7, 337);
            this.subareaAttribute.Name = "subareaAttribute";
            this.subareaAttribute.Size = new System.Drawing.Size(70, 20);
            this.subareaAttribute.TabIndex = 24;
            this.subareaAttribute.Tag = "分区属性";
            this.subareaAttribute.Text = "分区属性";
            this.subareaAttribute.TextColor = System.Drawing.Color.Black;
            this.subareaAttribute.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // subareaLabelHeight
            // 
            this.subareaLabelHeight.Location = new System.Drawing.Point(7, 162);
            this.subareaLabelHeight.Name = "subareaLabelHeight";
            this.subareaLabelHeight.Size = new System.Drawing.Size(45, 12);
            this.subareaLabelHeight.TabIndex = 9;
            this.subareaLabelHeight.Text = "高度";
            this.subareaLabelHeight.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // subareaLabel21
            // 
            this.subareaLabel21.Location = new System.Drawing.Point(6, 31);
            this.subareaLabel21.Name = "subareaLabel21";
            this.subareaLabel21.Size = new System.Drawing.Size(45, 23);
            this.subareaLabel21.TabIndex = 0;
            this.subareaLabel21.Text = "名称";
            this.subareaLabel21.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // subareaLabelWidth
            // 
            this.subareaLabelWidth.Location = new System.Drawing.Point(7, 128);
            this.subareaLabelWidth.Name = "subareaLabelWidth";
            this.subareaLabelWidth.Size = new System.Drawing.Size(45, 12);
            this.subareaLabelWidth.TabIndex = 8;
            this.subareaLabelWidth.Text = "宽度";
            this.subareaLabelWidth.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // subareaTitle
            // 
            this.subareaTitle.Location = new System.Drawing.Point(56, 26);
            this.subareaTitle.Name = "subareaTitle";
            this.subareaTitle.Size = new System.Drawing.Size(60, 21);
            this.subareaTitle.TabIndex = 1;
            this.subareaTitle.TextChanged += new System.EventHandler(this.subareaTitle_TextChanged);
            // 
            // subareaLabelY
            // 
            this.subareaLabelY.Location = new System.Drawing.Point(6, 94);
            this.subareaLabelY.Name = "subareaLabelY";
            this.subareaLabelY.Size = new System.Drawing.Size(45, 12);
            this.subareaLabelY.TabIndex = 7;
            this.subareaLabelY.Text = "Y坐标";
            this.subareaLabelY.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // subareaLocaltionX
            // 
            this.subareaLocaltionX.Location = new System.Drawing.Point(56, 60);
            this.subareaLocaltionX.Name = "subareaLocaltionX";
            this.subareaLocaltionX.Size = new System.Drawing.Size(60, 21);
            this.subareaLocaltionX.TabIndex = 2;
            this.subareaLocaltionX.ValueChanged += new System.EventHandler(this.subareaLocaltionX_ValueChanged);
            this.subareaLocaltionX.KeyDown += new System.Windows.Forms.KeyEventHandler(this.subareaLocaltionX_KeyDown);
            // 
            // subareaLabelX
            // 
            this.subareaLabelX.Location = new System.Drawing.Point(6, 64);
            this.subareaLabelX.Name = "subareaLabelX";
            this.subareaLabelX.Size = new System.Drawing.Size(45, 12);
            this.subareaLabelX.TabIndex = 6;
            this.subareaLabelX.Text = "X坐标";
            this.subareaLabelX.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // subareaSizeWidth
            // 
            this.subareaSizeWidth.Location = new System.Drawing.Point(56, 122);
            this.subareaSizeWidth.Name = "subareaSizeWidth";
            this.subareaSizeWidth.Size = new System.Drawing.Size(60, 21);
            this.subareaSizeWidth.TabIndex = 3;
            this.subareaSizeWidth.ValueChanged += new System.EventHandler(this.subareaSizeWidth_ValueChanged);
            this.subareaSizeWidth.KeyDown += new System.Windows.Forms.KeyEventHandler(this.subareaSizeWidth_KeyDown);
            this.subareaSizeWidth.Leave += new System.EventHandler(this.subareaSizeWidth_Leave);
            // 
            // subareaSizeHeight
            // 
            this.subareaSizeHeight.Location = new System.Drawing.Point(56, 156);
            this.subareaSizeHeight.Name = "subareaSizeHeight";
            this.subareaSizeHeight.Size = new System.Drawing.Size(60, 21);
            this.subareaSizeHeight.TabIndex = 5;
            this.subareaSizeHeight.ValueChanged += new System.EventHandler(this.subareaSizeHeight_ValueChanged);
            this.subareaSizeHeight.KeyDown += new System.Windows.Forms.KeyEventHandler(this.subareaSizeHeight_KeyDown);
            this.subareaSizeHeight.Leave += new System.EventHandler(this.subareaSizeHeight_Leave);
            // 
            // subareaLocaltionY
            // 
            this.subareaLocaltionY.Location = new System.Drawing.Point(56, 90);
            this.subareaLocaltionY.Name = "subareaLocaltionY";
            this.subareaLocaltionY.Size = new System.Drawing.Size(60, 21);
            this.subareaLocaltionY.TabIndex = 4;
            this.subareaLocaltionY.ValueChanged += new System.EventHandler(this.subareaLocaltionY_ValueChanged);
            this.subareaLocaltionY.KeyDown += new System.Windows.Forms.KeyEventHandler(this.subareaLocaltionY_KeyDown);
            // 
            // zhGroupBox_Panel
            // 
            this.zhGroupBox_Panel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.zhGroupBox_Panel.Controls.Add(this.panelToolStrip);
            this.zhGroupBox_Panel.Controls.Add(this.panel_Item);
            this.zhGroupBox_Panel.Location = new System.Drawing.Point(206, 106);
            this.zhGroupBox_Panel.Name = "zhGroupBox_Panel";
            this.zhGroupBox_Panel.Size = new System.Drawing.Size(790, 225);
            this.zhGroupBox_Panel.TabIndex = 15;
            this.zhGroupBox_Panel.Tag = "";
            this.zhGroupBox_Panel.TextColor = System.Drawing.Color.Black;
            this.zhGroupBox_Panel.TextFont = new System.Drawing.Font("宋体", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // panelToolStrip
            // 
            this.panelToolStrip.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.panelToolStrip.AutoSize = false;
            this.panelToolStrip.BackColor = System.Drawing.Color.Transparent;
            this.panelToolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.panelToolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolAlignRightLeft,
            this.toolAlignTopBottom,
            this.toolAlignLeft,
            this.toolAlignRight,
            this.toolAlignTop,
            this.toolAlignBottom,
            this.toolStripSeparator6,
            this.toolPrevousPage,
            this.toolStripLabelPageNumber,
            this.toolNextPage,
            this.toolStripSeparator7,
            this.toolUpAdjustButton,
            this.MarqueeOffsetYValue,
            this.toolDownAdjustButton,
            this.toolStripSeparator9,
            this.toolStretchButton,
            this.StretchLabel,
            this.toolNarrowButton,
            this.toolStripSeparator8,
            this.maginfyToolsPanel,
            this.zoonToolsPanel,
            this.minifyToolsPanel,
            this.originalZoonToolsPanel});
            this.panelToolStrip.Location = new System.Drawing.Point(8, 200);
            this.panelToolStrip.Name = "panelToolStrip";
            this.panelToolStrip.Size = new System.Drawing.Size(529, 24);
            this.panelToolStrip.TabIndex = 1;
            this.panelToolStrip.Text = "toolStrip2";
            // 
            // toolAlignRightLeft
            // 
            this.toolAlignRightLeft.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolAlignRightLeft.Image = ((System.Drawing.Image)(resources.GetObject("toolAlignRightLeft.Image")));
            this.toolAlignRightLeft.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolAlignRightLeft.Name = "toolAlignRightLeft";
            this.toolAlignRightLeft.Size = new System.Drawing.Size(23, 21);
            this.toolAlignRightLeft.Text = "toolStripButton1";
            this.toolAlignRightLeft.ToolTipText = "水平扩展";
            this.toolAlignRightLeft.Click += new System.EventHandler(this.toolAlignRightLeft_Click);
            // 
            // toolAlignTopBottom
            // 
            this.toolAlignTopBottom.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolAlignTopBottom.Image = ((System.Drawing.Image)(resources.GetObject("toolAlignTopBottom.Image")));
            this.toolAlignTopBottom.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolAlignTopBottom.Name = "toolAlignTopBottom";
            this.toolAlignTopBottom.Size = new System.Drawing.Size(23, 21);
            this.toolAlignTopBottom.Text = "toolStripButton2";
            this.toolAlignTopBottom.ToolTipText = "垂直扩展";
            this.toolAlignTopBottom.Click += new System.EventHandler(this.toolAlignTopBottom_Click);
            // 
            // toolAlignLeft
            // 
            this.toolAlignLeft.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolAlignLeft.Image = ((System.Drawing.Image)(resources.GetObject("toolAlignLeft.Image")));
            this.toolAlignLeft.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolAlignLeft.Name = "toolAlignLeft";
            this.toolAlignLeft.Size = new System.Drawing.Size(23, 21);
            this.toolAlignLeft.Text = "toolStripButton3";
            this.toolAlignLeft.ToolTipText = "向左停靠";
            this.toolAlignLeft.Click += new System.EventHandler(this.toolAlignLeft_Click);
            // 
            // toolAlignRight
            // 
            this.toolAlignRight.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolAlignRight.Image = ((System.Drawing.Image)(resources.GetObject("toolAlignRight.Image")));
            this.toolAlignRight.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolAlignRight.Name = "toolAlignRight";
            this.toolAlignRight.Size = new System.Drawing.Size(23, 21);
            this.toolAlignRight.Text = "toolStripButton4";
            this.toolAlignRight.ToolTipText = "向右停靠";
            this.toolAlignRight.Click += new System.EventHandler(this.toolAlignRight_Click);
            // 
            // toolAlignTop
            // 
            this.toolAlignTop.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolAlignTop.Image = ((System.Drawing.Image)(resources.GetObject("toolAlignTop.Image")));
            this.toolAlignTop.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolAlignTop.Name = "toolAlignTop";
            this.toolAlignTop.Size = new System.Drawing.Size(23, 21);
            this.toolAlignTop.Text = "toolStripButton13";
            this.toolAlignTop.ToolTipText = "向上停靠";
            this.toolAlignTop.Click += new System.EventHandler(this.toolAlignTop_Click);
            // 
            // toolAlignBottom
            // 
            this.toolAlignBottom.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolAlignBottom.Image = ((System.Drawing.Image)(resources.GetObject("toolAlignBottom.Image")));
            this.toolAlignBottom.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolAlignBottom.Name = "toolAlignBottom";
            this.toolAlignBottom.Size = new System.Drawing.Size(23, 21);
            this.toolAlignBottom.Text = "toolStripButton14";
            this.toolAlignBottom.ToolTipText = "向下停靠";
            this.toolAlignBottom.Click += new System.EventHandler(this.toolAlignBottom_Click);
            // 
            // toolStripSeparator6
            // 
            this.toolStripSeparator6.Name = "toolStripSeparator6";
            this.toolStripSeparator6.Size = new System.Drawing.Size(6, 24);
            // 
            // toolPrevousPage
            // 
            this.toolPrevousPage.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolPrevousPage.Image = ((System.Drawing.Image)(resources.GetObject("toolPrevousPage.Image")));
            this.toolPrevousPage.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolPrevousPage.Name = "toolPrevousPage";
            this.toolPrevousPage.Size = new System.Drawing.Size(23, 21);
            this.toolPrevousPage.Text = "toolStripButton15";
            this.toolPrevousPage.ToolTipText = "上一页";
            this.toolPrevousPage.Click += new System.EventHandler(this.PrevousPage_Click);
            // 
            // toolStripLabelPageNumber
            // 
            this.toolStripLabelPageNumber.Name = "toolStripLabelPageNumber";
            this.toolStripLabelPageNumber.Size = new System.Drawing.Size(29, 21);
            this.toolStripLabelPageNumber.Text = "001";
            // 
            // toolNextPage
            // 
            this.toolNextPage.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolNextPage.Image = ((System.Drawing.Image)(resources.GetObject("toolNextPage.Image")));
            this.toolNextPage.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolNextPage.Name = "toolNextPage";
            this.toolNextPage.Size = new System.Drawing.Size(23, 21);
            this.toolNextPage.Text = "toolStripButton16";
            this.toolNextPage.ToolTipText = "下一页";
            this.toolNextPage.Click += new System.EventHandler(this.NextPage_Click);
            // 
            // toolStripSeparator7
            // 
            this.toolStripSeparator7.Name = "toolStripSeparator7";
            this.toolStripSeparator7.Size = new System.Drawing.Size(6, 24);
            // 
            // toolUpAdjustButton
            // 
            this.toolUpAdjustButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolUpAdjustButton.Image = ((System.Drawing.Image)(resources.GetObject("toolUpAdjustButton.Image")));
            this.toolUpAdjustButton.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolUpAdjustButton.Name = "toolUpAdjustButton";
            this.toolUpAdjustButton.Size = new System.Drawing.Size(23, 21);
            this.toolUpAdjustButton.Text = "向上偏移";
            this.toolUpAdjustButton.Click += new System.EventHandler(this.UpAdjustButton_Click);
            // 
            // MarqueeOffsetYValue
            // 
            this.MarqueeOffsetYValue.Name = "MarqueeOffsetYValue";
            this.MarqueeOffsetYValue.Size = new System.Drawing.Size(29, 21);
            this.MarqueeOffsetYValue.Text = "000";
            this.MarqueeOffsetYValue.DoubleClick += new System.EventHandler(this.MarqueeOffsetYValue_DoubleClick);
            // 
            // toolDownAdjustButton
            // 
            this.toolDownAdjustButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolDownAdjustButton.Image = ((System.Drawing.Image)(resources.GetObject("toolDownAdjustButton.Image")));
            this.toolDownAdjustButton.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolDownAdjustButton.Name = "toolDownAdjustButton";
            this.toolDownAdjustButton.Size = new System.Drawing.Size(23, 21);
            this.toolDownAdjustButton.Text = "向下偏移";
            this.toolDownAdjustButton.Click += new System.EventHandler(this.DownAdjustButton_Click);
            // 
            // toolStripSeparator9
            // 
            this.toolStripSeparator9.Name = "toolStripSeparator9";
            this.toolStripSeparator9.Size = new System.Drawing.Size(6, 24);
            // 
            // toolStretchButton
            // 
            this.toolStretchButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStretchButton.Image = ((System.Drawing.Image)(resources.GetObject("toolStretchButton.Image")));
            this.toolStretchButton.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStretchButton.Name = "toolStretchButton";
            this.toolStretchButton.Size = new System.Drawing.Size(23, 21);
            this.toolStretchButton.Text = "垂直拉伸";
            this.toolStretchButton.Click += new System.EventHandler(this.StretchButton_Click);
            // 
            // StretchLabel
            // 
            this.StretchLabel.Name = "StretchLabel";
            this.StretchLabel.Size = new System.Drawing.Size(29, 21);
            this.StretchLabel.Text = "000";
            this.StretchLabel.DoubleClick += new System.EventHandler(this.StretchLabel_DoubleClick);
            // 
            // toolNarrowButton
            // 
            this.toolNarrowButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolNarrowButton.Image = ((System.Drawing.Image)(resources.GetObject("toolNarrowButton.Image")));
            this.toolNarrowButton.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolNarrowButton.Name = "toolNarrowButton";
            this.toolNarrowButton.Size = new System.Drawing.Size(23, 21);
            this.toolNarrowButton.Text = "垂直压缩";
            this.toolNarrowButton.Click += new System.EventHandler(this.NarrowButton_Click);
            // 
            // toolStripSeparator8
            // 
            this.toolStripSeparator8.Name = "toolStripSeparator8";
            this.toolStripSeparator8.Size = new System.Drawing.Size(6, 24);
            // 
            // maginfyToolsPanel
            // 
            this.maginfyToolsPanel.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.maginfyToolsPanel.Image = ((System.Drawing.Image)(resources.GetObject("maginfyToolsPanel.Image")));
            this.maginfyToolsPanel.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.maginfyToolsPanel.Name = "maginfyToolsPanel";
            this.maginfyToolsPanel.Size = new System.Drawing.Size(23, 21);
            this.maginfyToolsPanel.Text = "放大";
            this.maginfyToolsPanel.Click += new System.EventHandler(this.maginfyToolsPanel_Click);
            // 
            // zoonToolsPanel
            // 
            this.zoonToolsPanel.Name = "zoonToolsPanel";
            this.zoonToolsPanel.Size = new System.Drawing.Size(23, 21);
            this.zoonToolsPanel.Text = "---";
            // 
            // minifyToolsPanel
            // 
            this.minifyToolsPanel.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.minifyToolsPanel.Image = ((System.Drawing.Image)(resources.GetObject("minifyToolsPanel.Image")));
            this.minifyToolsPanel.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.minifyToolsPanel.Name = "minifyToolsPanel";
            this.minifyToolsPanel.Size = new System.Drawing.Size(23, 21);
            this.minifyToolsPanel.Text = "缩小";
            this.minifyToolsPanel.Click += new System.EventHandler(this.minifyToolsPanel_Click);
            // 
            // originalZoonToolsPanel
            // 
            this.originalZoonToolsPanel.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.originalZoonToolsPanel.Image = ((System.Drawing.Image)(resources.GetObject("originalZoonToolsPanel.Image")));
            this.originalZoonToolsPanel.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.originalZoonToolsPanel.Name = "originalZoonToolsPanel";
            this.originalZoonToolsPanel.Size = new System.Drawing.Size(23, 21);
            this.originalZoonToolsPanel.Text = "原始大小";
            this.originalZoonToolsPanel.Click += new System.EventHandler(this.originalZoonToolsPanel_Click);
            // 
            // panel_Item
            // 
            this.panel_Item.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.panel_Item.Controls.Add(this.panel_Waitting);
            this.panel_Item.Controls.Add(this.panelCover);
            this.panel_Item.Location = new System.Drawing.Point(8, 8);
            this.panel_Item.Name = "panel_Item";
            this.panel_Item.Size = new System.Drawing.Size(779, 192);
            this.panel_Item.TabIndex = 0;
            this.panel_Item.Resize += new System.EventHandler(this.panel_Item_Resize);
            // 
            // panel_Waitting
            // 
            this.panel_Waitting.BackColor = System.Drawing.SystemColors.AppWorkspace;
            this.panel_Waitting.Controls.Add(this.label_Waitting_Picture);
            this.panel_Waitting.Controls.Add(this.pictureBox2);
            this.panel_Waitting.Location = new System.Drawing.Point(206, 143);
            this.panel_Waitting.Name = "panel_Waitting";
            this.panel_Waitting.Size = new System.Drawing.Size(368, 64);
            this.panel_Waitting.TabIndex = 5;
            // 
            // label_Waitting_Picture
            // 
            this.label_Waitting_Picture.ForeColor = System.Drawing.Color.White;
            this.label_Waitting_Picture.Location = new System.Drawing.Point(71, 3);
            this.label_Waitting_Picture.Name = "label_Waitting_Picture";
            this.label_Waitting_Picture.Size = new System.Drawing.Size(294, 58);
            this.label_Waitting_Picture.TabIndex = 1;
            this.label_Waitting_Picture.Text = "正在生成数据.....";
            this.label_Waitting_Picture.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // pictureBox2
            // 
            this.pictureBox2.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox2.Image")));
            this.pictureBox2.Location = new System.Drawing.Point(3, 3);
            this.pictureBox2.Name = "pictureBox2";
            this.pictureBox2.Size = new System.Drawing.Size(63, 58);
            this.pictureBox2.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pictureBox2.TabIndex = 0;
            this.pictureBox2.TabStop = false;
            // 
            // panelCover
            // 
            this.panelCover.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(100)))), ((int)(((byte)(30)))), ((int)(((byte)(0)))));
            this.panelCover.Controls.Add(this.panelEdgeBottom);
            this.panelCover.Controls.Add(this.panelEdgeRight);
            this.panelCover.Controls.Add(this.panelEdgeLeft);
            this.panelCover.Controls.Add(this.screenPanelMain);
            this.panelCover.Controls.Add(this.panelEdgeTop);
            this.panelCover.Location = new System.Drawing.Point(0, 0);
            this.panelCover.Name = "panelCover";
            this.panelCover.Size = new System.Drawing.Size(281, 56);
            this.panelCover.TabIndex = 3;
            // 
            // panelEdgeBottom
            // 
            this.panelEdgeBottom.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(128)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.panelEdgeBottom.Location = new System.Drawing.Point(15, 18);
            this.panelEdgeBottom.Name = "panelEdgeBottom";
            this.panelEdgeBottom.Size = new System.Drawing.Size(256, 11);
            this.panelEdgeBottom.TabIndex = 2;
            // 
            // panelEdgeRight
            // 
            this.panelEdgeRight.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(128)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.panelEdgeRight.Location = new System.Drawing.Point(268, 7);
            this.panelEdgeRight.Name = "panelEdgeRight";
            this.panelEdgeRight.Size = new System.Drawing.Size(10, 21);
            this.panelEdgeRight.TabIndex = 3;
            // 
            // panelEdgeLeft
            // 
            this.panelEdgeLeft.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(128)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.panelEdgeLeft.Location = new System.Drawing.Point(5, 18);
            this.panelEdgeLeft.Name = "panelEdgeLeft";
            this.panelEdgeLeft.Size = new System.Drawing.Size(11, 10);
            this.panelEdgeLeft.TabIndex = 2;
            // 
            // screenPanelMain
            // 
            this.screenPanelMain.BackColor = System.Drawing.SystemColors.ControlDarkDark;
            this.screenPanelMain.ContextMenuStrip = this.contextMenuStripSubarea;
            this.screenPanelMain.Location = new System.Drawing.Point(15, 30);
            this.screenPanelMain.Name = "screenPanelMain";
            this.screenPanelMain.Size = new System.Drawing.Size(140, 23);
            this.screenPanelMain.TabIndex = 0;
            this.screenPanelMain.MouseDown += new System.Windows.Forms.MouseEventHandler(this.screenPanelMain_MouseDown);
            this.screenPanelMain.MouseMove += new System.Windows.Forms.MouseEventHandler(this.screenPanelMain_MouseMove);
            this.screenPanelMain.MouseUp += new System.Windows.Forms.MouseEventHandler(this.screenPanelMain_MouseUp);
            // 
            // panelEdgeTop
            // 
            this.panelEdgeTop.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(128)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.panelEdgeTop.Location = new System.Drawing.Point(6, 7);
            this.panelEdgeTop.Name = "panelEdgeTop";
            this.panelEdgeTop.Size = new System.Drawing.Size(256, 11);
            this.panelEdgeTop.TabIndex = 1;
            // 
            // zhGroupBox_Tree
            // 
            this.zhGroupBox_Tree.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
            this.zhGroupBox_Tree.Controls.Add(this.ledTree);
            this.zhGroupBox_Tree.Location = new System.Drawing.Point(6, 106);
            this.zhGroupBox_Tree.Name = "zhGroupBox_Tree";
            this.zhGroupBox_Tree.Size = new System.Drawing.Size(194, 225);
            this.zhGroupBox_Tree.TabIndex = 16;
            this.zhGroupBox_Tree.TextColor = System.Drawing.Color.Black;
            this.zhGroupBox_Tree.TextFont = new System.Drawing.Font("宋体", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // ledTree
            // 
            this.ledTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ledTree.BackColor = System.Drawing.Color.PowderBlue;
            this.ledTree.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.ledTree.CheckBoxes = true;
            this.ledTree.DrawMode = System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll;
            this.ledTree.Font = new System.Drawing.Font("宋体", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
            this.ledTree.ImageIndex = 0;
            this.ledTree.ImageList = this.panelTreeNodeImageList;
            this.ledTree.Location = new System.Drawing.Point(9, 11);
            this.ledTree.Name = "ledTree";
            this.ledTree.SelectedImageIndex = 0;
            this.ledTree.ShowLines = false;
            this.ledTree.Size = new System.Drawing.Size(176, 208);
            this.ledTree.TabIndex = 0;
            this.ledTree.AfterCheck += new System.Windows.Forms.TreeViewEventHandler(this.ledTree_AfterCheck);
            this.ledTree.DrawNode += new System.Windows.Forms.DrawTreeNodeEventHandler(this.ledTree_DrawNode);
            this.ledTree.KeyDown += new System.Windows.Forms.KeyEventHandler(this.ledTree_KeyDown);
            this.ledTree.Leave += new System.EventHandler(this.ledTree_Leave);
            this.ledTree.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ledTree_MouseDown);
            // 
            // contentBackgroundSettingGroupBox
            // 
            this.contentBackgroundSettingGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.contentBackgroundSettingGroupBox.Controls.Add(this.contentBackgroundUseGif);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.contentBackgroundEffectComboBox);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.label30);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.label27);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.contentBackgroundIsUse);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.contentBackgroundSize);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.contentBackgroundGradition);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.contentBackgroundSelect);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.label28);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.label29);
            this.contentBackgroundSettingGroupBox.Controls.Add(this.contentBackgroundSpeed);
            this.contentBackgroundSettingGroupBox.Location = new System.Drawing.Point(790, 337);
            this.contentBackgroundSettingGroupBox.Name = "contentBackgroundSettingGroupBox";
            this.contentBackgroundSettingGroupBox.Size = new System.Drawing.Size(85, 20);
            this.contentBackgroundSettingGroupBox.TabIndex = 24;
            this.contentBackgroundSettingGroupBox.Tag = "内容背景设置";
            this.contentBackgroundSettingGroupBox.Text = "内容背景设置";
            this.contentBackgroundSettingGroupBox.TextColor = System.Drawing.Color.Black;
            this.contentBackgroundSettingGroupBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // contentBackgroundUseGif
            // 
            this.contentBackgroundUseGif.AutoSize = true;
            this.contentBackgroundUseGif.Location = new System.Drawing.Point(11, 130);
            this.contentBackgroundUseGif.Name = "contentBackgroundUseGif";
            this.contentBackgroundUseGif.Size = new System.Drawing.Size(15, 14);
            this.contentBackgroundUseGif.TabIndex = 13;
            this.contentBackgroundUseGif.UseVisualStyleBackColor = true;
            this.contentBackgroundUseGif.CheckedChanged += new System.EventHandler(this.contentBackgroundUseGif_CheckedChanged);
            // 
            // contentBackgroundEffectComboBox
            // 
            this.contentBackgroundEffectComboBox.FormattingEnabled = true;
            this.contentBackgroundEffectComboBox.Location = new System.Drawing.Point(42, 56);
            this.contentBackgroundEffectComboBox.Name = "contentBackgroundEffectComboBox";
            this.contentBackgroundEffectComboBox.Size = new System.Drawing.Size(81, 20);
            this.contentBackgroundEffectComboBox.TabIndex = 10;
            this.contentBackgroundEffectComboBox.Click += new System.EventHandler(this.contentBackgroundEffectComboBox_Click);
            // 
            // label30
            // 
            this.label30.AutoSize = true;
            this.label30.Location = new System.Drawing.Point(3, 59);
            this.label30.Name = "label30";
            this.label30.Size = new System.Drawing.Size(29, 12);
            this.label30.TabIndex = 11;
            this.label30.Text = "效果";
            // 
            // label27
            // 
            this.label27.AutoSize = true;
            this.label27.Location = new System.Drawing.Point(133, 168);
            this.label27.Name = "label27";
            this.label27.Size = new System.Drawing.Size(29, 12);
            this.label27.TabIndex = 9;
            this.label27.Text = "尺寸";
            this.label27.Visible = false;
            // 
            // contentBackgroundIsUse
            // 
            this.contentBackgroundIsUse.AutoSize = true;
            this.contentBackgroundIsUse.Location = new System.Drawing.Point(9, 32);
            this.contentBackgroundIsUse.Name = "contentBackgroundIsUse";
            this.contentBackgroundIsUse.Size = new System.Drawing.Size(72, 16);
            this.contentBackgroundIsUse.TabIndex = 2;
            this.contentBackgroundIsUse.Text = "使用背景";
            this.contentBackgroundIsUse.UseVisualStyleBackColor = true;
            this.contentBackgroundIsUse.CheckedChanged += new System.EventHandler(this.checkBox3_CheckedChanged);
            // 
            // contentBackgroundSize
            // 
            this.contentBackgroundSize.FormattingEnabled = true;
            this.contentBackgroundSize.Items.AddRange(new object[] {
            "居中",
            "平铺",
            "拉伸",
            "自适应"});
            this.contentBackgroundSize.Location = new System.Drawing.Point(173, 163);
            this.contentBackgroundSize.Name = "contentBackgroundSize";
            this.contentBackgroundSize.Size = new System.Drawing.Size(81, 20);
            this.contentBackgroundSize.TabIndex = 8;
            this.contentBackgroundSize.Visible = false;
            // 
            // contentBackgroundGradition
            // 
            this.contentBackgroundGradition.FormattingEnabled = true;
            this.contentBackgroundGradition.Items.AddRange(new object[] {
            "无灰度",
            "4级灰度",
            "8级灰度",
            "16级灰度"});
            this.contentBackgroundGradition.Location = new System.Drawing.Point(173, 141);
            this.contentBackgroundGradition.Name = "contentBackgroundGradition";
            this.contentBackgroundGradition.Size = new System.Drawing.Size(81, 20);
            this.contentBackgroundGradition.TabIndex = 3;
            this.contentBackgroundGradition.Text = "无灰度";
            this.contentBackgroundGradition.Visible = false;
            // 
            // contentBackgroundSelect
            // 
            this.contentBackgroundSelect.Location = new System.Drawing.Point(42, 126);
            this.contentBackgroundSelect.Name = "contentBackgroundSelect";
            this.contentBackgroundSelect.Size = new System.Drawing.Size(83, 23);
            this.contentBackgroundSelect.TabIndex = 7;
            this.contentBackgroundSelect.Text = "自定义背景";
            this.contentBackgroundSelect.UseVisualStyleBackColor = true;
            this.contentBackgroundSelect.Click += new System.EventHandler(this.button2_Click);
            // 
            // label28
            // 
            this.label28.AutoSize = true;
            this.label28.Location = new System.Drawing.Point(133, 147);
            this.label28.Name = "label28";
            this.label28.Size = new System.Drawing.Size(29, 12);
            this.label28.TabIndex = 4;
            this.label28.Text = "灰度";
            this.label28.Visible = false;
            // 
            // label29
            // 
            this.label29.AutoSize = true;
            this.label29.Location = new System.Drawing.Point(3, 96);
            this.label29.Name = "label29";
            this.label29.Size = new System.Drawing.Size(29, 12);
            this.label29.TabIndex = 6;
            this.label29.Text = "速度";
            // 
            // contentBackgroundSpeed
            // 
            this.contentBackgroundSpeed.FormattingEnabled = true;
            this.contentBackgroundSpeed.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30"});
            this.contentBackgroundSpeed.Location = new System.Drawing.Point(42, 93);
            this.contentBackgroundSpeed.Name = "contentBackgroundSpeed";
            this.contentBackgroundSpeed.Size = new System.Drawing.Size(81, 20);
            this.contentBackgroundSpeed.TabIndex = 5;
            this.contentBackgroundSpeed.SelectedIndexChanged += new System.EventHandler(this.comboBox5_SelectedIndexChanged);
            // 
            // itemPlaySettingGroupBox
            // 
            this.itemPlaySettingGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.itemPlaySettingGroupBox.Controls.Add(this.itemByTimeLengthPanel);
            this.itemPlaySettingGroupBox.Controls.Add(this.itemByNumPanel);
            this.itemPlaySettingGroupBox.Controls.Add(this.itemByAstTimerPanel);
            this.itemPlaySettingGroupBox.Controls.Add(this.itemByNumRadioButton);
            this.itemPlaySettingGroupBox.Controls.Add(this.itemByTimeLengthRadioButton);
            this.itemPlaySettingGroupBox.Controls.Add(this.itemByAstTimerRadioButton);
            this.itemPlaySettingGroupBox.Controls.Add(this.label14);
            this.itemPlaySettingGroupBox.Location = new System.Drawing.Point(881, 504);
            this.itemPlaySettingGroupBox.Name = "itemPlaySettingGroupBox";
            this.itemPlaySettingGroupBox.Size = new System.Drawing.Size(92, 20);
            this.itemPlaySettingGroupBox.TabIndex = 20;
            this.itemPlaySettingGroupBox.Tag = "节目播放模式";
            this.itemPlaySettingGroupBox.TextColor = System.Drawing.Color.Black;
            this.itemPlaySettingGroupBox.TextFont = new System.Drawing.Font("微软雅黑", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            // 
            // itemByTimeLengthPanel
            // 
            this.itemByTimeLengthPanel.Controls.Add(this.itemPlayLengthMinute);
            this.itemByTimeLengthPanel.Controls.Add(this.label17);
            this.itemByTimeLengthPanel.Controls.Add(this.itemPlayLengthHour);
            this.itemByTimeLengthPanel.Controls.Add(this.label20);
            this.itemByTimeLengthPanel.Controls.Add(this.itemPlayLengthDay);
            this.itemByTimeLengthPanel.Controls.Add(this.label16);
            this.itemByTimeLengthPanel.Controls.Add(this.label18);
            this.itemByTimeLengthPanel.Controls.Add(this.label19);
            this.itemByTimeLengthPanel.Controls.Add(this.itemPlayLengthSecond);
            this.itemByTimeLengthPanel.Location = new System.Drawing.Point(117, 49);
            this.itemByTimeLengthPanel.Name = "itemByTimeLengthPanel";
            this.itemByTimeLengthPanel.Size = new System.Drawing.Size(308, 61);
            this.itemByTimeLengthPanel.TabIndex = 29;
            // 
            // itemPlayLengthMinute
            // 
            this.itemPlayLengthMinute.Location = new System.Drawing.Point(183, 22);
            this.itemPlayLengthMinute.Name = "itemPlayLengthMinute";
            this.itemPlayLengthMinute.Size = new System.Drawing.Size(43, 21);
            this.itemPlayLengthMinute.TabIndex = 20;
            this.itemPlayLengthMinute.ValueChanged += new System.EventHandler(this.itemPlayLengthDay_ValueChanged);
            // 
            // label17
            // 
            this.label17.Location = new System.Drawing.Point(145, 24);
            this.label17.Name = "label17";
            this.label17.Size = new System.Drawing.Size(38, 18);
            this.label17.TabIndex = 19;
            this.label17.Text = "时";
            // 
            // itemPlayLengthHour
            // 
            this.itemPlayLengthHour.Location = new System.Drawing.Point(96, 22);
            this.itemPlayLengthHour.Name = "itemPlayLengthHour";
            this.itemPlayLengthHour.Size = new System.Drawing.Size(43, 21);
            this.itemPlayLengthHour.TabIndex = 18;
            this.itemPlayLengthHour.ValueChanged += new System.EventHandler(this.itemPlayLengthDay_ValueChanged);
            // 
            // label20
            // 
            this.label20.AutoSize = true;
            this.label20.Location = new System.Drawing.Point(17, 4);
            this.label20.Name = "label20";
            this.label20.Size = new System.Drawing.Size(59, 12);
            this.label20.TabIndex = 24;
            this.label20.Text = "播放时长:";
            // 
            // itemPlayLengthDay
            // 
            this.itemPlayLengthDay.Location = new System.Drawing.Point(14, 22);
            this.itemPlayLengthDay.Name = "itemPlayLengthDay";
            this.itemPlayLengthDay.Size = new System.Drawing.Size(43, 21);
            this.itemPlayLengthDay.TabIndex = 16;
            this.itemPlayLengthDay.ValueChanged += new System.EventHandler(this.itemPlayLengthDay_ValueChanged);
            // 
            // label16
            // 
            this.label16.Location = new System.Drawing.Point(63, 24);
            this.label16.Name = "label16";
            this.label16.Size = new System.Drawing.Size(34, 18);
            this.label16.TabIndex = 17;
            this.label16.Text = "天";
            // 
            // label18
            // 
            this.label18.Location = new System.Drawing.Point(235, 24);
            this.label18.Name = "label18";
            this.label18.Size = new System.Drawing.Size(38, 18);
            this.label18.TabIndex = 21;
            this.label18.Text = "分";
            // 
            // label19
            // 
            this.label19.Location = new System.Drawing.Point(332, 24);
            this.label19.Name = "label19";
            this.label19.Size = new System.Drawing.Size(38, 18);
            this.label19.TabIndex = 23;
            this.label19.Text = "秒";
            // 
            // itemPlayLengthSecond
            // 
            this.itemPlayLengthSecond.Location = new System.Drawing.Point(283, 22);
            this.itemPlayLengthSecond.Name = "itemPlayLengthSecond";
            this.itemPlayLengthSecond.Size = new System.Drawing.Size(43, 21);
            this.itemPlayLengthSecond.TabIndex = 22;
            this.itemPlayLengthSecond.ValueChanged += new System.EventHandler(this.itemPlayLengthDay_ValueChanged);
            // 
            // itemByNumPanel
            // 
            this.itemByNumPanel.Controls.Add(this.label3);
            this.itemByNumPanel.Controls.Add(this.itemPlaySeetingPlayNum);
            this.itemByNumPanel.Location = new System.Drawing.Point(8, 34);
            this.itemByNumPanel.Name = "itemByNumPanel";
            this.itemByNumPanel.Size = new System.Drawing.Size(126, 71);
            this.itemByNumPanel.TabIndex = 28;
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(21, 2);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(53, 12);
            this.label3.TabIndex = 0;
            this.label3.Text = "播放次数";
            // 
            // itemPlaySeetingPlayNum
            // 
            this.itemPlaySeetingPlayNum.Location = new System.Drawing.Point(20, 22);
            this.itemPlaySeetingPlayNum.Name = "itemPlaySeetingPlayNum";
            this.itemPlaySeetingPlayNum.Size = new System.Drawing.Size(120, 21);
            this.itemPlaySeetingPlayNum.TabIndex = 1;
            this.itemPlaySeetingPlayNum.ValueChanged += new System.EventHandler(this.itemPlaySeetingPlayNum_ValueChanged);
            // 
            // itemByAstTimerPanel
            // 
            this.itemByAstTimerPanel.Location = new System.Drawing.Point(398, 6);
            this.itemByAstTimerPanel.Name = "itemByAstTimerPanel";
            this.itemByAstTimerPanel.Size = new System.Drawing.Size(25, 13);
            this.itemByAstTimerPanel.TabIndex = 30;
            this.itemByAstTimerPanel.Visible = false;
            // 
            // itemByNumRadioButton
            // 
            this.itemByNumRadioButton.AutoSize = true;
            this.itemByNumRadioButton.Location = new System.Drawing.Point(82, 18);
            this.itemByNumRadioButton.Name = "itemByNumRadioButton";
            this.itemByNumRadioButton.Size = new System.Drawing.Size(71, 16);
            this.itemByNumRadioButton.TabIndex = 11;
            this.itemByNumRadioButton.TabStop = true;
            this.itemByNumRadioButton.Text = "按次播放";
            this.itemByNumRadioButton.UseVisualStyleBackColor = true;
            this.itemByNumRadioButton.CheckedChanged += new System.EventHandler(this.itemByNumRadioButton_CheckedChanged);
            // 
            // itemByTimeLengthRadioButton
            // 
            this.itemByTimeLengthRadioButton.AutoSize = true;
            this.itemByTimeLengthRadioButton.Location = new System.Drawing.Point(263, 18);
            this.itemByTimeLengthRadioButton.Name = "itemByTimeLengthRadioButton";
            this.itemByTimeLengthRadioButton.Size = new System.Drawing.Size(107, 16);
            this.itemByTimeLengthRadioButton.TabIndex = 12;
            this.itemByTimeLengthRadioButton.TabStop = true;
            this.itemByTimeLengthRadioButton.Text = "按时间长度播放";
            this.itemByTimeLengthRadioButton.UseVisualStyleBackColor = true;
            this.itemByTimeLengthRadioButton.CheckedChanged += new System.EventHandler(this.itemByTimeLengthRadioButton_CheckedChanged);
            // 
            // itemByAstTimerRadioButton
            // 
            this.itemByAstTimerRadioButton.AutoSize = true;
            this.itemByAstTimerRadioButton.Location = new System.Drawing.Point(285, 13);
            this.itemByAstTimerRadioButton.Name = "itemByAstTimerRadioButton";
            this.itemByAstTimerRadioButton.Size = new System.Drawing.Size(107, 16);
            this.itemByAstTimerRadioButton.TabIndex = 13;
            this.itemByAstTimerRadioButton.TabStop = true;
            this.itemByAstTimerRadioButton.Text = "按天文时钟播放";
            this.itemByAstTimerRadioButton.UseVisualStyleBackColor = true;
            this.itemByAstTimerRadioButton.Visible = false;
            this.itemByAstTimerRadioButton.CheckedChanged += new System.EventHandler(this.itemByAstTimerRadioButton_CheckedChanged);
            // 
            // label14
            // 
            this.label14.Location = new System.Drawing.Point(3, 5);
            this.label14.Name = "label14";
            this.label14.Size = new System.Drawing.Size(69, 15);
            this.label14.TabIndex = 0;
            this.label14.Text = "播放模式:";
            // 
            // formMain
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 12F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(1002, 546);
            this.Controls.Add(this.StringEffectSettingzhGroupBox);
            this.Controls.Add(this.stringAttributeBox);
            this.Controls.Add(this.zhGroupBoxItemBackground);
            this.Controls.Add(this.zhGroupBoxContentBackground);
            this.Controls.Add(this.WeatherEffectSettingzhGroupBox);
            this.Controls.Add(this.weatherAttributeBox);
            this.Controls.Add(this.lunarAttributeBox);
            this.Controls.Add(this.textAttributeBox);
            this.Controls.Add(this.marqueeAttributeBox);
            this.Controls.Add(this.itemEdgeSettingGroupBox);
            this.Controls.Add(this.pictureBox_ChangeSize);
            this.Controls.Add(this.zhGroupBox_PanelAttribute);
            this.Controls.Add(this.AnimationEffectSettingzhGroupBox);
            this.Controls.Add(this.clockAttributeBox);
            this.Controls.Add(this.ItemAttribute);
            this.Controls.Add(this.itemByPeroidGroupBox);
            this.Controls.Add(this.dialAttributeBox);
            this.Controls.Add(this.subareaEdgeSetting);
            this.Controls.Add(this.generateAnimationZhGroupBox);
            this.Controls.Add(this.subareaEffectSetting);
            this.Controls.Add(this.counterAttributeBox);
            this.Controls.Add(this.animationAttributeBox);
            this.Controls.Add(this.animationPreviewZhGroupBox);
            this.Controls.Add(this.temperatureAttributeBox);
            this.Controls.Add(this.itemBackgroundSettingGroupBox);
            this.Controls.Add(this.subareaAttribute);
            this.Controls.Add(this.zhGroupBox_Panel);
            this.Controls.Add(this.zhGroupBox_Tree);
            this.Controls.Add(this.panel_Nagivator);
            this.Controls.Add(this.pictureBox_BorderLeftTop);
            this.Controls.Add(this.pictureBox_BorderRightTop);
            this.Controls.Add(this.panel_BorderBottom);
            this.Controls.Add(this.panel_BordertTop);
            this.Controls.Add(this.contentBackgroundSettingGroupBox);
            this.Controls.Add(this.itemPlaySettingGroupBox);
            this.Controls.Add(this.panel_BorderRight);
            this.Controls.Add(this.pictureBox_BorderRightBottom);
            this.Controls.Add(this.pictureBox_BorderLeftBottom);
            this.Controls.Add(this.panel_BorderLeft);
            this.Controls.Add(this.panel_Top);
            this.Controls.Add(this.pictureBox_RightTop);
            this.Controls.Add(this.pictureBox_LeftTop);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
            this.KeyPreview = true;
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "formMain";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "LED Control System V6";
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.mainForm_FormClosing);
            this.Load += new System.EventHandler(this.mainForm_Load);
            this.Shown += new System.EventHandler(this.formMain_Shown);
            this.SizeChanged += new System.EventHandler(this.formMain_SizeChanged);
            this.Paint += new System.Windows.Forms.PaintEventHandler(this.formMain_Paint);
            this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.formMain_KeyDown);
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.contextMenuStripSubarea.ResumeLayout(false);
            this.contextMenuStripPanel.ResumeLayout(false);
            this.contextMenuStripItem.ResumeLayout(false);
            this.contextMenuStripContent.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_LeftTop)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_RightTop)).EndInit();
            this.panel_Top.ResumeLayout(false);
            this.panel_Top.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picLogo)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picCloudLoginInfo)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Close)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Max)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Min)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_BorderLeftBottom)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_BorderRightBottom)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_BorderRightTop)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_BorderLeftTop)).EndInit();
            this.panel_Nagivator.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_String)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Weather)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_FindDeviceWifi)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Usb)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Send)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Play)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_FindDevice)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Delete)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Score)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Noise)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Humidity)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Temperature)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Lunar)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Counter)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Dial)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Clock)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Marquee)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Animation)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Text)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Item)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Save)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.zhToolButton_Open)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Spliter2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_Spliter1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox_ChangeSize)).EndInit();
            this.contextMenuStrip1_Marquee.ResumeLayout(false);
            this.contextMenuStripSharedSource.ResumeLayout(false);
            this.contextMenuStripShared.ResumeLayout(false);
            this.StringEffectSettingzhGroupBox.ResumeLayout(false);
            this.StringEffectSettingzhGroupBox.PerformLayout();
            this.stringAttributeBox.ResumeLayout(false);
            this.zhGroupBoxItemBackground.ResumeLayout(false);
            this.zhGroupBoxContentBackground.ResumeLayout(false);
            this.WeatherEffectSettingzhGroupBox.ResumeLayout(false);
            this.WeatherEffectSettingzhGroupBox.PerformLayout();
            this.weatherAttributeBox.ResumeLayout(false);
            this.lunarAttributeBox.ResumeLayout(false);
            this.textAttributeBox.ResumeLayout(false);
            this.marqueeAttributeBox.ResumeLayout(false);
            this.itemEdgeSettingGroupBox.ResumeLayout(false);
            this.itemEdgeSettingGroupBox.PerformLayout();
            this.zhGroupBox_PanelAttribute.ResumeLayout(false);
            this.groupBox11.ResumeLayout(false);
            this.groupBox1.ResumeLayout(false);
            this.AnimationEffectSettingzhGroupBox.ResumeLayout(false);
            this.clockAttributeBox.ResumeLayout(false);
            this.clockAttributeBox.PerformLayout();
            this.ItemAttribute.ResumeLayout(false);
            this.ItemAttribute.PerformLayout();
            this.itemByPeroidGroupBox.ResumeLayout(false);
            this.itemByPeroidGroupBox.PerformLayout();
            this.itemPlayTimerByDatePanel.ResumeLayout(false);
            this.itemPlayTimerByDatePanel.PerformLayout();
            this.itemPlayTimerByWeekPanel.ResumeLayout(false);
            this.itemPlayTimerByWeekPanel.PerformLayout();
            this.dialAttributeBox.ResumeLayout(false);
            this.dialAttributeBox.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberSecondHandPlus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberMinuteHandPlus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialElementLeftDown)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialElementUp)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialElementRight)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialElementLeft)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberSecondHandWidthPlus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberMinuteHandWidthPlus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberHourHandWidthPlus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberHourHandPlus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumnberScaleMinutePlus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberScaleHourPlus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialNumberScaleCrossPlus)).EndInit();
            this.subareaEdgeSetting.ResumeLayout(false);
            this.subareaEdgeSetting.PerformLayout();
            this.subareaEffectSetting.ResumeLayout(false);
            this.subareaEffectSetting.PerformLayout();
            this.counterAttributeBox.ResumeLayout(false);
            this.counterAttributeBox.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetHour)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetDay)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetMonth)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetYear)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.counterTargetMinute)).EndInit();
            this.animationAttributeBox.ResumeLayout(false);
            this.temperatureAttributeBox.ResumeLayout(false);
            this.temperatureAttributeBox.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.temperatureMinDegreeNumericUpDown)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.temperatureMaxDegreeNumericUpDown)).EndInit();
            this.itemBackgroundSettingGroupBox.ResumeLayout(false);
            this.itemBackgroundSettingGroupBox.PerformLayout();
            this.subareaAttribute.ResumeLayout(false);
            this.subareaAttribute.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.subareaLocaltionX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.subareaSizeWidth)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.subareaSizeHeight)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.subareaLocaltionY)).EndInit();
            this.zhGroupBox_Panel.ResumeLayout(false);
            this.panelToolStrip.ResumeLayout(false);
            this.panelToolStrip.PerformLayout();
            this.panel_Item.ResumeLayout(false);
            this.panel_Waitting.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox2)).EndInit();
            this.panelCover.ResumeLayout(false);
            this.zhGroupBox_Tree.ResumeLayout(false);
            this.contentBackgroundSettingGroupBox.ResumeLayout(false);
            this.contentBackgroundSettingGroupBox.PerformLayout();
            this.itemPlaySettingGroupBox.ResumeLayout(false);
            this.itemPlaySettingGroupBox.PerformLayout();
            this.itemByTimeLengthPanel.ResumeLayout(false);
            this.itemByTimeLengthPanel.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlayLengthMinute)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlayLengthHour)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlayLengthDay)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlayLengthSecond)).EndInit();
            this.itemByNumPanel.ResumeLayout(false);
            this.itemByNumPanel.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.itemPlaySeetingPlayNum)).EndInit();
            this.ResumeLayout(false);

		}
	}
}
